{
  "swagger" : "2.0",
  "info" : {
    "version" : "2.0",
    "title" : "CD NextGen API Reference",
    "contact" : { }
  },
  "host" : "ng-manager-8b6459b67-jx7sc",
  "basePath" : "/gateway/ng/api",
  "tags" : [ {
    "name" : "accounts"
  }, {
    "name" : "environmentGroup"
  }, {
    "name" : "pipelines"
  }, {
    "name" : "cdStageSummary"
  }, {
    "name" : "license-usage-cd"
  }, {
    "name" : "license-usage-cdv2"
  }, {
    "name" : "connectors"
  }, {
    "name" : "google-secret-manager-connector"
  }, {
    "name" : "admincredits"
  }, {
    "name" : "credits"
  }, {
    "name" : "enforcement"
  }, {
    "name" : "file-store"
  }, {
    "name" : "filters"
  }, {
    "name" : "gitopsproviders"
  }, {
    "name" : "git-servicedefault-branch-cache"
  }, {
    "name" : "git-servicegit-file-cache"
  }, {
    "name" : "git-sync-branch"
  }, {
    "name" : "git-sync-entities"
  }, {
    "name" : "git-full-sync"
  }, {
    "name" : "git-sync-settings"
  }, {
    "name" : "scm"
  }, {
    "name" : "user-source-code-manager"
  }, {
    "name" : "git-sync"
  }, {
    "name" : "git-sync-errors"
  }, {
    "name" : "gitx-webhookmigration"
  }, {
    "name" : "ldap"
  }, {
    "name" : "ldap-settings-internal"
  }, {
    "name" : "admindeveloper-license-mapping"
  }, {
    "name" : "adminlicenses"
  }, {
    "name" : "licenses"
  }, {
    "name" : "smplicenses"
  }, {
    "name" : "usage"
  }, {
    "name" : "roleassignments"
  }, {
    "name" : "authentication-settings"
  }, {
    "name" : "account-setting"
  }, {
    "name" : "activityHistory"
  }, {
    "name" : "agentmtls"
  }, {
    "name" : "artifacts"
  }, {
    "name" : "har"
  }, {
    "name" : "aws"
  }, {
    "name" : "buckets"
  }, {
    "name" : "customDeployment"
  }, {
    "name" : "v2"
  }, {
    "name" : "download-delegates"
  }, {
    "name" : "delegate-group-tags"
  }, {
    "name" : "delegate-profilesng"
  }, {
    "name" : "delegate-setup"
  }, {
    "name" : "delegate-token-ng"
  }, {
    "name" : "cdStage"
  }, {
    "name" : "entitySetupUsage"
  }, {
    "name" : "environments"
  }, {
    "name" : "environmentsV2"
  }, {
    "name" : "serviceV1-eol-banner"
  }, {
    "name" : "gcp"
  }, {
    "name" : "globalKms"
  }, {
    "name" : "infrastructures"
  }, {
    "name" : "invites"
  }, {
    "name" : "manifestshelm"
  }, {
    "name" : "service-env-migration"
  }, {
    "name" : "oidcdelegatetoken-exchange-details"
  }, {
    "name" : "oidcaccess-token"
  }, {
    "name" : "oidcid-token"
  }, {
    "name" : "oidcaccount"
  }, {
    "name" : "provider"
  }, {
    "name" : "refresh-inputs"
  }, {
    "name" : "apikey"
  }, {
    "name" : "health"
  }, {
    "name" : "host-validation"
  }, {
    "name" : "aggregate"
  }, {
    "name" : "hosts"
  }, {
    "name" : "secret-managers"
  }, {
    "name" : "v2secrets"
  }, {
    "name" : "organizations"
  }, {
    "name" : "projects"
  }, {
    "name" : "sample-manifests"
  }, {
    "name" : "token"
  }, {
    "name" : "user-groups"
  }, {
    "name" : "v2user-groups"
  }, {
    "name" : "azure"
  }, {
    "name" : "yamlschema"
  }, {
    "name" : "services"
  }, {
    "name" : "servicesV2"
  }, {
    "name" : "overrides"
  }, {
    "name" : "serviceOverrides"
  }, {
    "name" : "smtpConfig"
  }, {
    "name" : "tas"
  }, {
    "name" : "terraform"
  }, {
    "name" : "terraform-cloud"
  }, {
    "name" : "terragrunt"
  }, {
    "name" : "user"
  }, {
    "name" : "variables"
  }, {
    "name" : "executions"
  }, {
    "name" : "feedback"
  }, {
    "name" : "freeze"
  }, {
    "name" : "gitopsclusters"
  }, {
    "name" : "artifactinstance"
  }, {
    "name" : "iac-tf-module"
  }, {
    "name" : "instanceng"
  }, {
    "name" : "instancestats"
  }, {
    "name" : "gitOpsInstanceSync"
  }, {
    "name" : "instancesync"
  }, {
    "name" : "jira"
  }, {
    "name" : "oauth"
  }, {
    "name" : "dashboard"
  }, {
    "name" : "landingDashboards"
  }, {
    "name" : "landingPage"
  }, {
    "name" : "rollback"
  }, {
    "name" : "cgi"
  }, {
    "name" : "scim"
  }, {
    "name" : "serviceaccount"
  }, {
    "name" : "servicenow"
  }, {
    "name" : "canny"
  }, {
    "name" : "trial-signup"
  }, {
    "name" : "tunnel"
  }, {
    "name" : "source-code-manager"
  }, {
    "name" : "polling"
  }, {
    "name" : "webhook"
  }, {
    "name" : "webhookevent"
  }, {
    "name" : "settings"
  }, {
    "name" : "user-settings"
  }, {
    "name" : "signup"
  }, {
    "name" : "credit-cards"
  }, {
    "name" : "subscriptions"
  }, {
    "name" : "yaml-schema"
  }, {
    "name" : "yaml-snippet"
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/accounts/{accountIdentifier}" : {
      "get" : {
        "tags" : [ "accounts" ],
        "summary" : "Get Account",
        "description" : "",
        "operationId" : "getAccountNG",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountIdentifier}/default-experience" : {
      "put" : {
        "tags" : [ "accounts" ],
        "summary" : "Update Default Experience",
        "description" : "",
        "operationId" : "updateAccountDefaultExperienceNG",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AccountDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountIdentifier}/harness-support-access" : {
      "put" : {
        "tags" : [ "accounts" ],
        "summary" : "Enable/Disable Harness Support Access",
        "description" : "",
        "operationId" : "updateHarnessSupportAccessNG",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountIdentifier}/cross-generation-access" : {
      "put" : {
        "tags" : [ "accounts" ],
        "summary" : "Update Cross Generation Access Enabled",
        "description" : "",
        "operationId" : "updateAccountCrossGenerationAccessEnabledNG",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AccountDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountIdentifier}/immutable-delegate-enabled" : {
      "get" : {
        "tags" : [ "accounts" ],
        "summary" : "Get Immutable delegate enabled flag",
        "description" : "",
        "operationId" : "isImmutableDelegateEnabled",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountIdentifier}/name" : {
      "put" : {
        "tags" : [ "accounts" ],
        "summary" : "Update Account Name",
        "description" : "",
        "operationId" : "updateAccountNameNG",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AccountDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/license/update/{accountIdentifier}" : {
      "put" : {
        "tags" : [ "accounts" ],
        "summary" : "License update from UI",
        "description" : "",
        "operationId" : "licenseUpdateFromUING",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountStatus",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentGroup/{envGroupIdentifier}" : {
      "get" : {
        "tags" : [ "environmentGroup" ],
        "summary" : "Gets a Environment Group by identifier",
        "description" : "",
        "operationId" : "getEnvironmentGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "envGroupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentGroupResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "environmentGroup" ],
        "summary" : "Update an Environment Group by Identifier",
        "description" : "",
        "operationId" : "updateEnvironmentGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envGroupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentGroupRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentGroupResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "environmentGroup" ],
        "summary" : "Delete en Environment Group by Identifier",
        "description" : "",
        "operationId" : "deleteEnvironmentGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envGroupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentGroupDeleteResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentGroup" : {
      "post" : {
        "tags" : [ "environmentGroup" ],
        "summary" : "Create an Environment Group",
        "description" : "",
        "operationId" : "createEnvironmentGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentGroupRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentGroupResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentGroup/list" : {
      "post" : {
        "tags" : [ "environmentGroup" ],
        "summary" : "Gets Environment Group list",
        "description" : "",
        "operationId" : "getEnvironmentGroupList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envGroupIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterProperties"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllEnvGroupsAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEnvironmentGroupResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/strategies/yaml-snippets" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "Gets Yaml for Execution Strategy based on deployment type and selected strategy",
        "description" : "",
        "operationId" : "getExecutionStrategyYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceDefinitionType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "strategyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Basic", "Canary", "BlueGreen", "Rolling", "Default", "GitOps" ]
        }, {
          "name" : "includeVerify",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentMetadataYaml",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "pipelines" ],
        "summary" : "Gets generated Yaml snippet based on strategy parameters",
        "description" : "",
        "operationId" : "postExecutionStrategyYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceDefinitionType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "strategyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Basic", "Canary", "BlueGreen", "Rolling", "Default", "GitOps" ]
        }, {
          "name" : "includeVerify",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StrategyParameters"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/strategies/provisioner-yaml-snippets" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "Gets Yaml for Execution Strategy based on Provisioner Type",
        "description" : "",
        "operationId" : "getProvisionerExecutionStrategyYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "provisionerType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "TERRAFORM", "CLOUD_FORMATION", "AZURE_ARM", "AZURE_BLUEPRINT", "SHELL_SCRIPT_PROVISIONER", "TERRAGRUNT", "TERRAFORM_CLOUD", "AWS_CDK" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/serviceDefinitionTypes" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "Git list of service definition types",
        "description" : "",
        "operationId" : "getServiceDefinitionTypes",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceDefinitionType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/steps" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "get steps for given service definition type",
        "description" : "",
        "operationId" : "getSteps",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceDefinitionType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseStepCategory"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/strategies" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "Gets Execution Strategy list",
        "description" : "",
        "operationId" : "getExecutionStrategyList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapServiceDefinitionTypeListExecutionStrategyType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/provisioner-steps" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "get provisioner steps",
        "description" : "",
        "operationId" : "getProvisionerSteps",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseStepCategory"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/cd-stage-yaml-snippet" : {
      "get" : {
        "tags" : [ "pipelines" ],
        "summary" : "Gets the failure strategy yaml snippet for CD stage",
        "description" : "",
        "operationId" : "getFailureStrategiesYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cdStageSummary/listStageExecutionFormattedSummary" : {
      "get" : {
        "tags" : [ "cdStageSummary" ],
        "summary" : "Lists summary of execution of deployment stages filtered by stage execution identifiers",
        "description" : "",
        "operationId" : "listStageExecutionFormattedSummaryByStageExecutionIdentifiers",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stageExecutionIdentifiers",
          "in" : "query",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "shouldAddFormatting",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringCDStageSummaryResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cdStageSummary/listStagePlanCreationFormattedSummary" : {
      "get" : {
        "tags" : [ "cdStageSummary" ],
        "summary" : "Lists summary of deployment stages available at plan creation filtered by stage identifiers",
        "description" : "",
        "operationId" : "listStagePlanCreationFormattedSummaryByStageIdentifiers",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "planExecutionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stageIdentifiers",
          "in" : "query",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "shouldAddFormatting",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringCDStageSummaryResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/date" : {
      "post" : {
        "tags" : [ "license-usage-cd" ],
        "summary" : "Get license date usage in CD Module",
        "description" : "",
        "operationId" : "getLicenseDateUsage",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "licenseType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LicenseDateUsageParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseLicenseDateUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/getLicenseUsagePerVersions" : {
      "get" : {
        "tags" : [ "license-usage-cd" ],
        "summary" : "Get license usage for both V1 and V2",
        "description" : "",
        "operationId" : "getLicenseUsagePerVersions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "licenseType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCDLicenseUsageV1V2VersionsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/services" : {
      "get" : {
        "tags" : [ "license-usage-cd" ],
        "summary" : "Get all services",
        "description" : "",
        "operationId" : "getAllServices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/license-usage-cd/v2/pipelineExecution/listLicenseUsage" : {
      "post" : {
        "tags" : [ "license-usage-cdv2" ],
        "summary" : "List pipeline execution license usage",
        "description" : "",
        "operationId" : "listPipelineExecutionLicenseUsage",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 50,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "licenseType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PipelineExecutionUsageFilterParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePagePipelineExecutionUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/v2/serviceDeployment/listLicenseUsage" : {
      "post" : {
        "tags" : [ "license-usage-cdv2" ],
        "summary" : "List usage timeline",
        "description" : "",
        "operationId" : "listServiceDeploymentLicenseUsage",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 50,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "licenseType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceDeploymentUsageFilterParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceDeploymentUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/v2/{usageType}/csv/download" : {
      "get" : {
        "tags" : [ "license-usage-cdv2" ],
        "summary" : "Download CD Usage CSV report",
        "description" : "",
        "operationId" : "downloadCDUsageCSVReport",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "usageType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "ServiceDeployment", "Gitops", "PipelineExecution" ]
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/v2/timeline" : {
      "post" : {
        "tags" : [ "license-usage-cdv2" ],
        "summary" : "Get usage timeline",
        "description" : "",
        "operationId" : "getUsageTimeline",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fromDate",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "toDate",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UsageTimelineParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUsageTimeline"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/v2" : {
      "get" : {
        "tags" : [ "license-usage-cdv2" ],
        "summary" : "Get license usage",
        "description" : "",
        "operationId" : "getCDLicenseUsage",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "licenseType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCDLicenseUsageV2DTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license-usage-cd/v2/gitops/listLicenseUsage" : {
      "post" : {
        "tags" : [ "license-usage-cdv2" ],
        "summary" : "List usage timeline",
        "description" : "",
        "operationId" : "listGitopsLicenseUsage",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 50,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "licenseType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitopsUsageFilterParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitopsUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/{identifier}" : {
      "get" : {
        "tags" : [ "connectors" ],
        "summary" : "Get Connector",
        "description" : "",
        "operationId" : "getConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "connectors" ],
        "summary" : "Delete a connector by identifier",
        "description" : "",
        "operationId" : "deleteConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors" : {
      "get" : {
        "tags" : [ "connectors" ],
        "summary" : "Gets Connector list",
        "description" : "",
        "operationId" : "getConnectorList",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
        }, {
          "name" : "category",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CLOUD_PROVIDER", "SECRET_MANAGER", "CLOUD_COST", "ARTIFACTORY", "CODE_REPO", "MONITORING", "TICKETING", "DATABASE" ]
        }, {
          "name" : "source_category",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CLOUD_PROVIDER", "SECRET_MANAGER", "CLOUD_COST", "ARTIFACTORY", "CODE_REPO", "MONITORING", "TICKETING", "DATABASE" ]
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Creates a Connector",
        "description" : "",
        "operationId" : "createConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Connector"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "connectors" ],
        "summary" : "Updates a Connector",
        "description" : "",
        "operationId" : "updateConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Connector"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/listV2" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Gets Connector list",
        "description" : "",
        "operationId" : "getConnectorListV2",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllConnectorsAvailableAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConnectorFilterProperties"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDistinctFromBranches",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyFavorites",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/registerConnectorsPreFlight" : {
      "post" : {
        "tags" : [ "connectors" ],
        "operationId" : "registerForTest",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConnectorsTestRegisterRequest"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDistinctFromBranches",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorsTestRegisterRequest"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/testGitRepoConnection/{identifier}" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Test the connection",
        "description" : "",
        "operationId" : "getTestGitRepoConnectionResult",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoURL",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorValidationResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/catalogue" : {
      "get" : {
        "tags" : [ "connectors" ],
        "summary" : "Get Connector Catalogue",
        "description" : "",
        "operationId" : "getConnectorCatalogue",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorCatalogueResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/ccmK8sList" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Gets CCMK8S Connector list",
        "description" : "",
        "operationId" : "getCCMK8SConnectorList",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllConnectorsAvailableAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConnectorFilterProperties"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDistinctFromBranches",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageCcmK8sConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/testConnectionInternal/{identifier}" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Test the connection internal api",
        "description" : "",
        "operationId" : "getTestConnectionResultInternal",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorValidationResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/stats" : {
      "get" : {
        "tags" : [ "connectors" ],
        "summary" : "Get Connectors statistics",
        "description" : "",
        "operationId" : "getConnectorStatistics",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorStatistics"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/listbyfqn" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Gets Connector list",
        "description" : "",
        "operationId" : "listConnectorByFQN",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/getceawstemplateurl" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Get CCM Aws Connector Template URL Environment Wise",
        "description" : "",
        "operationId" : "getCEAwsTemplate",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "eventsEnabled",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "curEnabled",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "optimizationEnabled",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/connectors/fieldValues" : {
      "get" : {
        "tags" : [ "connectors" ],
        "summary" : "Get All Allowed field values for Connector Type",
        "description" : "",
        "operationId" : "getAllAllowedFieldValues",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFieldValues"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/validateUniqueIdentifier" : {
      "get" : {
        "tags" : [ "connectors" ],
        "summary" : "Validate Identifier is unique",
        "description" : "",
        "operationId" : "validateTheIdentifierIsUnique",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/testConnection/{identifier}" : {
      "post" : {
        "tags" : [ "connectors" ],
        "summary" : "Test the connection",
        "description" : "",
        "operationId" : "getTestConnectionResult",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectorValidationResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/google-secret-manager-connector/gcp-regions" : {
      "get" : {
        "tags" : [ "google-secret-manager-connector" ],
        "summary" : "Get GCP Regions",
        "description" : "",
        "operationId" : "getGcpRegions",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/credits/{accountIdentifier}" : {
      "get" : {
        "tags" : [ "admincredits" ],
        "summary" : "Admin level get purchase history of credits for an Account in an ascending order of the expiry time",
        "description" : "",
        "operationId" : "adminGetCreditsByAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListCreditDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "admincredits" ],
        "summary" : "Enables Harness Support user to update an existing Credit for a customer account",
        "description" : "",
        "operationId" : "adminUpdatesCustomerCredit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreditDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreditDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/credits/{creditId}" : {
      "delete" : {
        "tags" : [ "admincredits" ],
        "summary" : "Enables Harness Support User to delete an existing Credit for a customer account",
        "description" : "",
        "operationId" : "adminDeleteCustomerCredit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "creditId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseVoid"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/credits/create" : {
      "post" : {
        "tags" : [ "admincredits" ],
        "summary" : "Admin Level purchase credit for an account",
        "description" : "",
        "operationId" : "adminCreateCredit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreditDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreditDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/credits/{accountIdentifier}" : {
      "get" : {
        "tags" : [ "credits" ],
        "summary" : "Get Credits purchase history of an Account in expiry time ascending order",
        "description" : "",
        "operationId" : "getCreditsByAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListCreditDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/enforcement/metadata" : {
      "get" : {
        "tags" : [ "enforcement" ],
        "summary" : "Fetch All Feature Restriction Metadata",
        "description" : "",
        "operationId" : "getAllFeatureRestrictionMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListFeatureRestrictionMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/enforcement/{featureRestrictionName}/metadata" : {
      "get" : {
        "tags" : [ "enforcement" ],
        "summary" : "Fetch Feature Restriction Metadata",
        "description" : "",
        "operationId" : "fetchFeatureRestrictionMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "featureRestrictionName",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "TEST1", "TEST2", "TEST3", "TEST4", "TEST5", "TEST6", "TEST7", "PERSPECTIVES", "CCM_K8S_CLUSTERS", "CCM_AUTOSTOPPING_RULES", "MULTIPLE_ORGANIZATIONS", "MULTIPLE_PROJECTS", "MULTIPLE_SECRETS", "MULTIPLE_USER_GROUPS", "MULTIPLE_USERS", "MULTIPLE_SERVICE_ACCOUNTS", "MULTIPLE_VARIABLES", "MULTIPLE_CONNECTORS", "MULTIPLE_API_KEYS", "MULTIPLE_API_TOKENS", "INTEGRATED_APPROVALS_WITH_HARNESS_UI", "INTEGRATED_APPROVALS_WITH_CUSTOM_SCRIPT", "INTEGRATED_APPROVALS_WITH_JIRA", "SECRET_MANAGERS", "DEPLOYMENTS", "INITIAL_DEPLOYMENTS", "DEPLOYMENTS_PER_MONTH", "SERVICES", "BUILDS", "SAML_SUPPORT", "OAUTH_SUPPORT", "LDAP_SUPPORT", "TWO_FACTOR_AUTH_SUPPORT", "CUSTOM_ROLES", "CUSTOM_RESOURCE_GROUPS", "MAX_TOTAL_BUILDS", "MAX_BUILDS_PER_MONTH", "MAX_BUILDS_PER_DAY", "ACTIVE_COMMITTERS", "TEST_INTELLIGENCE", "TEMPLATE_SERVICE", "CACHE_SIZE_ALLOWANCE", "AUDIT_STREAMING_DESTINATION", "SRM_SERVICES", "ANALYZE_DEPLOYMENT_STEP", "TERRAFORM_APPLY", "TERRAFORM_PLAN", "TERRAFORM_DESTROY", "TERRAFORM_ROLLBACK", "INTEGRATED_APPROVALS_WITH_SERVICE_NOW", "CREATE_STACK", "DELETE_STACK", "ROLLBACK_STACK", "COMMAND", "AZURE_SLOT_DEPLOYMENT", "AZURE_TRAFFIC_SHIFT", "AZURE_SWAP_SLOT", "AZURE_WEBAPP_ROLLBACK", "JENKINS_BUILD", "AZURE_CREATE_ARM_RESOURCE", "AZURE_CREATE_BP_RESOURCE", "AZURE_ROLLBACK_ARM_RESOURCE", "SHELL_SCRIPT_PROVISION", "TERRAFORM_CLOUD_RUN", "TERRAFORM_CLOUD_ROLLBACK", "SECURITY", "DEVELOPERS", "MONTHLY_ACTIVE_USERS", "STRATEGY_MAX_CONCURRENT", "MAX_PARALLEL_STEP_IN_A_PIPELINE", "PIPELINE_EXECUTION_DATA_RETENTION_DAYS", "MAX_PIPELINE_TIMEOUT_SECONDS", "MAX_STAGE_TIMEOUT_SECONDS", "MAX_STEP_TIMEOUT_SECONDS", "MAX_CONCURRENT_ACTIVE_PIPELINE_EXECUTIONS", "MAX_CHAOS_EXPERIMENT_RUNS_PER_MONTH", "MAX_CHAOS_INFRASTRUCTURES", "TERRAGRUNT_PLAN", "TERRAGRUNT_APPLY", "TERRAGRUNT_DESTROY", "TERRAGRUNT_ROLLBACK", "SEI_MAX_NUMBER_OF_CONTRIBUTORS", "IDP_ACTIVE_DEVELOPERS", "SUCCESSFUL_APPLIES" ]
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFeatureRestrictionMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/enforcement/details" : {
      "post" : {
        "tags" : [ "enforcement" ],
        "summary" : "Fetch List of Feature Restriction Detail",
        "description" : "",
        "operationId" : "getFeatureRestrictionDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FeatureRestrictionDetailListRequestDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListFeatureRestrictionDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/enforcement/enabled" : {
      "get" : {
        "tags" : [ "enforcement" ],
        "summary" : "Fetch the List of enabled Feature Restriction Detail for this Account",
        "description" : "",
        "operationId" : "getEnabledFeatureRestrictionDetailByAccountId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListFeatureRestrictionDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/enforcement" : {
      "post" : {
        "tags" : [ "enforcement" ],
        "summary" : "Fetch Feature Restriction Detail",
        "description" : "",
        "operationId" : "getFeatureRestrictionDetail",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FeatureRestrictionDetailRequestDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFeatureRestrictionDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/{identifier}" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Get the Folder or File metadata",
        "description" : "",
        "operationId" : "getFile",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "file-store" ],
        "summary" : "Update Folder or File including content",
        "description" : "",
        "operationId" : "update",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tags",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileUsage",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "formData",
          "required" : true,
          "type" : "string",
          "enum" : [ "FILE", "FOLDER" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mimeType",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "path",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "createdBy",
          "in" : "formData",
          "required" : true,
          "type" : "ref"
        }, {
          "name" : "lastModifiedBy",
          "in" : "formData",
          "required" : true,
          "type" : "ref"
        }, {
          "name" : "lastModifiedAt",
          "in" : "formData",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "content",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "file-store" ],
        "summary" : "Delete File or Folder by identifier",
        "description" : "",
        "operationId" : "deleteFile",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "List Files and Folders metadata",
        "description" : "",
        "operationId" : "listFilesAndFolders",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "file-store" ],
        "summary" : "Create Folder or File including content",
        "description" : "",
        "operationId" : "create",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tags",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "content",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "identifier",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileUsage",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "formData",
          "required" : true,
          "type" : "string",
          "enum" : [ "FILE", "FOLDER" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mimeType",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "path",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "createdBy",
          "in" : "formData",
          "required" : true,
          "type" : "ref"
        }, {
          "name" : "lastModifiedBy",
          "in" : "formData",
          "required" : true,
          "type" : "ref"
        }, {
          "name" : "lastModifiedAt",
          "in" : "formData",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/yaml" : {
      "post" : {
        "tags" : [ "file-store" ],
        "summary" : "Create File or Folder metadata via YAML",
        "description" : "",
        "operationId" : "createViaYAML",
        "consumes" : [ "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FileStoreRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/yaml/{identifier}" : {
      "put" : {
        "tags" : [ "file-store" ],
        "summary" : "Update File or Folder metadata via YAML",
        "description" : "",
        "operationId" : "updateViaYAML",
        "consumes" : [ "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FileStoreRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/folder" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Get file store nodes on path",
        "description" : "",
        "operationId" : "getFileStoreNodesOnPath",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "path",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileUsage",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "MANIFEST_FILE", "CONFIG", "SCRIPT" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFolderNodeDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "file-store" ],
        "summary" : "Get folder nodes at first level, not including sub-nodes",
        "description" : "",
        "operationId" : "getFolderNodes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FolderNodeDTO"
          }
        }, {
          "name" : "fileUsage",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "MANIFEST_FILE", "CONFIG", "SCRIPT" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFolderNodeDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/supported-entity-types" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Get the list of supported entity types for files",
        "description" : "",
        "operationId" : "getEntityTypes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListEntityType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/files/filter" : {
      "post" : {
        "tags" : [ "file-store" ],
        "summary" : "Get filtered list of Files or Folders",
        "description" : "",
        "operationId" : "listFilesWithFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilesFilterProperties"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageFileDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/files/createdBy" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Get list of created by user details",
        "description" : "",
        "operationId" : "getCreatedByList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetEmbeddedUserDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/{identifier}/referenced-by" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Get list of entities where file is referenced by queried entity type",
        "description" : "",
        "operationId" : "getReferencedBy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEntitySetupUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/files/{scopedFilePath}/content" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Get file content as string using encoded scopedFilePath",
        "description" : "",
        "operationId" : "getFileContentUsingScopedFilePath",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "scopedFilePath",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/file-store/files/content" : {
      "post" : {
        "tags" : [ "file-store" ],
        "summary" : "Get file content as string using encoded scopedFilePathV2",
        "description" : "",
        "operationId" : "getFileContentUsingScopedFilePathV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/file-store/files/{identifier}/download" : {
      "get" : {
        "tags" : [ "file-store" ],
        "summary" : "Download File content",
        "description" : "",
        "operationId" : "downloadFile",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/filters/{identifier}" : {
      "get" : {
        "tags" : [ "filters" ],
        "summary" : "Get Filter",
        "description" : "",
        "operationId" : "getFilter",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFilterDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "filters" ],
        "summary" : "Delete a filter",
        "description" : "",
        "operationId" : "deleteFilter",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/filters" : {
      "get" : {
        "tags" : [ "filters" ],
        "summary" : "Get Filter",
        "description" : "",
        "operationId" : "getFilterList",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageFilterDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "filters" ],
        "summary" : "Create a Filter",
        "description" : "",
        "operationId" : "postFilter",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFilterDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "filters" ],
        "summary" : "Update a Filter",
        "description" : "",
        "operationId" : "updateFilter",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFilterDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitopsproviders/{identifier}" : {
      "get" : {
        "tags" : [ "gitopsproviders" ],
        "summary" : "Get GitOps Provider",
        "description" : "",
        "operationId" : "getGitOpsProvider",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitopsProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "gitopsproviders" ],
        "summary" : "Deletes a GitOpsProvider",
        "description" : "",
        "operationId" : "deleteGitOpsProvider",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitopsproviders" : {
      "post" : {
        "tags" : [ "gitopsproviders" ],
        "summary" : "Creates a GitOpsProvider",
        "description" : "",
        "operationId" : "createGitOpsProvider",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitOpsProvider"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitopsProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "gitopsproviders" ],
        "summary" : "Updates a GitOpsProvider",
        "description" : "",
        "operationId" : "updateGitOpsProvider",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitOpsProvider"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitopsProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitopsproviders/list" : {
      "get" : {
        "tags" : [ "gitopsproviders" ],
        "summary" : "List GitOps Providers",
        "description" : "",
        "operationId" : "listGitOpsProviders",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CONNECTED_ARGO_PROVIDER", "MANAGED_ARGO_PROVIDER" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitopsProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitopsproviders/validateUniqueIdentifier" : {
      "get" : {
        "tags" : [ "gitopsproviders" ],
        "summary" : "Validate Identifier is unique",
        "description" : "",
        "operationId" : "validateProviderIdentifierIsUnique",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-service/default-branch-cache" : {
      "get" : {
        "tags" : [ "git-servicedefault-branch-cache" ],
        "operationId" : "fetchFromCache",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitDefaultBranchGetCacheRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitDefaultBranchGetCacheResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "git-servicedefault-branch-cache" ],
        "operationId" : "list",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitDefaultBranchCacheListRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitDefaultBranchCacheListResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "git-servicedefault-branch-cache" ],
        "operationId" : "upsertCache",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitDefaultBranchUpsertCacheRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitDefaultBranchUpsertCacheResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "git-servicedefault-branch-cache" ],
        "operationId" : "clearCache",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitDefaultBranchClearCacheRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitDefaultBranchClearCacheResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-service/git-file-cache" : {
      "get" : {
        "tags" : [ "git-servicegit-file-cache" ],
        "operationId" : "getFileCache",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifierFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gitProviderFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoNameFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filepathFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "refFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFileCacheGetResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "git-servicegit-file-cache" ],
        "operationId" : "updateCache",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitFileCacheUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFileCacheUpdateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "git-servicegit-file-cache" ],
        "operationId" : "clearCache_1",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitFileCacheClearCacheRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFileCacheClearCacheResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-branch/sync" : {
      "post" : {
        "tags" : [ "git-sync-branch" ],
        "summary" : "Sync the new branch into harness",
        "description" : "",
        "operationId" : "syncGitBranch",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-branch/listBranchesWithStatus" : {
      "get" : {
        "tags" : [ "git-sync-branch" ],
        "summary" : "Gets list of branches with their status by Git Sync Config Id",
        "description" : "",
        "operationId" : "getListOfBranchesWithStatus",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "yamlGitConfigIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branchSyncStatus",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SYNCED", "SYNCING", "UNSYNCED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitBranchListDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-entities/summary" : {
      "post" : {
        "tags" : [ "git-sync-entities" ],
        "summary" : "List Git Sync Entity by product for List of Repos and Entities",
        "description" : "",
        "operationId" : "listGitSyncEntitiesSummaryForRepoAndTypes",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitEntityFilterProperties"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitSyncRepoFilesList"
            }
          }
        }
      }
    },
    "/git-sync-entities/branch/{branch}" : {
      "post" : {
        "tags" : [ "git-sync-entities" ],
        "summary" : "List Git Sync Entity by product for Repo and Branch and List of Entities",
        "description" : "",
        "operationId" : "listGitSyncEntitiesSummaryForRepoAndBranch",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "gitSyncConfigId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitEntityBranchFilterSummaryProperties"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListGitSyncEntityListDTO"
            }
          }
        }
      }
    },
    "/git-sync-entities/{entityType}" : {
      "get" : {
        "tags" : [ "git-sync-entities" ],
        "summary" : "Get Git Sync Entity By Type",
        "description" : "",
        "operationId" : "listGitSyncEntitiesByType",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gitSyncConfigId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitSyncEntityListDTO"
            }
          }
        }
      }
    },
    "/git-full-sync/files" : {
      "post" : {
        "tags" : [ "git-full-sync" ],
        "summary" : "Fetches the list of all Git Full Sync Entities and their status",
        "description" : "",
        "operationId" : "listFullSyncFiles",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitFullSyncEntityInfoFilterKeys"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitFullSyncEntityInfoDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-full-sync/config" : {
      "get" : {
        "tags" : [ "git-full-sync" ],
        "summary" : "Get full sync configuration",
        "description" : "",
        "operationId" : "getGitFullSyncConfig",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFullSyncConfigDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "git-full-sync" ],
        "summary" : "Create a full sync configuration",
        "description" : "",
        "operationId" : "createGitFullSyncConfig",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitFullSyncConfigRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFullSyncConfigDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "git-full-sync" ],
        "summary" : "Update a full sync configuration",
        "description" : "",
        "operationId" : "updateGitFullSyncConfig",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitFullSyncConfigRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFullSyncConfigDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-full-sync" : {
      "post" : {
        "tags" : [ "git-full-sync" ],
        "summary" : "Triggers full sync",
        "description" : "",
        "operationId" : "triggerFullSync",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTriggerFullSyncResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-settings" : {
      "get" : {
        "tags" : [ "git-sync-settings" ],
        "summary" : "Get git sync settings",
        "description" : "",
        "operationId" : "getGitSyncSettings",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitSyncSettingsDTO"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "git-sync-settings" ],
        "summary" : "Create a Git Sync Setting",
        "description" : "",
        "operationId" : "postGitSyncSetting",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitSyncSettingsDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitSyncSettingsDTO"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "git-sync-settings" ],
        "summary" : "Update a Git Sync Setting",
        "description" : "",
        "operationId" : "updateGitSyncSetting",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitSyncSettingsDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitSyncSettingsDTO"
            }
          }
        }
      }
    },
    "/git-sync-settings/git-simplification" : {
      "get" : {
        "tags" : [ "git-sync-settings" ],
        "summary" : "Get Git Simplification status for a project",
        "description" : "",
        "operationId" : "getGitSimplification",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "git-sync-settings" ],
        "summary" : "Enable Git Simplification for a project",
        "description" : "",
        "operationId" : "enableGitSimplification",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          }
        }
      }
    },
    "/scm/list-files" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "List files",
        "description" : "",
        "operationId" : "listFiles",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseScmListFilesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/file-url" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Get file url",
        "description" : "",
        "operationId" : "getFileURL",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commitId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/validate-repo" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Validates repos on the basis of repoAllowList in default settings",
        "description" : "",
        "operationId" : "validateRepo",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRepoValidationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/update-git-cache" : {
      "post" : {
        "tags" : [ "scm" ],
        "summary" : "updates git cache for files in a repo",
        "description" : "",
        "operationId" : "updateGitCache",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateGitCacheRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUpdateGitCacheResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/listRepoBranches" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Gets list of branches by Connector Identifier",
        "description" : "",
        "operationId" : "getListOfBranchesByConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "connectorIdentifierRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoURL",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/listBranchesByGitConfig" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Retrieves a list of Git Branches corresponding to a Git Sync Config Id",
        "description" : "",
        "operationId" : "getListOfBranchesByGitConfig",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "yamlGitConfigIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/fileContent" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Gets file content",
        "description" : "",
        "operationId" : "getFileContent",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "yamlGitConfigIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitFileContent"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/v2/list-branches" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Paginated List Git Branches of given repo",
        "description" : "",
        "operationId" : "getPaginatedListOfBranchesByRefConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "branchNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitListBranchesResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/create-pull-request" : {
      "post" : {
        "tags" : [ "scm" ],
        "summary" : "creates a pull request",
        "description" : "",
        "operationId" : "createPRV2",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreatePRRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreatePRResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/get-file-by-branch" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "get file by branch",
        "description" : "",
        "operationId" : "getFileByBranch",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGetFileResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/list-repos-by-connector" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Lists Git Repos corresponding to given reference connector",
        "description" : "",
        "operationId" : "getListOfReposByRefConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "repoNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applyGitXRepoAllowListFilter",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListGitRepositoryResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/v2/list-repos" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Paginated List Git Repos corresponding to given reference connector",
        "description" : "",
        "operationId" : "getPaginatedListOfReposByRefConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "repoNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applyGitXRepoAllowListFilter",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitListRepositoryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/list-all-repos-by-connector" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Lists All Git Repos corresponding to given reference connector",
        "description" : "",
        "operationId" : "getListOfAllReposByRefConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListUserRepoResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/list-branches" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Lists Git Branches of given repo",
        "description" : "",
        "operationId" : "getListOfBranchesByRefConnectorV2",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "branchNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitBranchesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/repo-url" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Get repo url",
        "description" : "",
        "operationId" : "getRepoURL",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/get-batch-file" : {
      "post" : {
        "tags" : [ "scm" ],
        "summary" : "Get file url",
        "description" : "",
        "operationId" : "getBatchFile",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScmBatchGetFileRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseScmBatchGetFileResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/list-tags" : {
      "get" : {
        "tags" : [ "scm" ],
        "summary" : "Lists Git Tags of given repo",
        "description" : "",
        "operationId" : "getListOfTagsByRefConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "tagNameSearchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitTagsResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/isSaasGit" : {
      "post" : {
        "tags" : [ "scm" ],
        "summary" : "Checks if Saas is possible",
        "description" : "",
        "operationId" : "isSaasGit",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "repoURL",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSaasGitDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scm/createPR" : {
      "post" : {
        "tags" : [ "scm" ],
        "summary" : "creates a pull request",
        "description" : "",
        "operationId" : "createPR",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitPRCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreatePRDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-source-code-manager" : {
      "get" : {
        "tags" : [ "user-source-code-manager" ],
        "summary" : "get user source code manager information",
        "description" : "",
        "operationId" : "getUserSourceCodeManagers",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "BITBUCKET", "GITHUB", "GITLAB", "AWS_CODE_COMMIT", "AZURE_REPO", "BITBUCKET_SERVER", "GITLAB_ON_PREM" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserSourceCodeManagerResponseDTOList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "user-source-code-manager" ],
        "summary" : "save user source code manager",
        "description" : "",
        "operationId" : "saveUserSourceCodeManager",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserSourceCodeManagerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user-source-code-manager" ],
        "summary" : "update user source code manager",
        "description" : "",
        "operationId" : "updateUserSourceCodeManager",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserSourceCodeManagerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user-source-code-manager" ],
        "summary" : "delete user source code manager",
        "description" : "",
        "operationId" : "deleteUserSourceCodeManager",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "BITBUCKET", "GITHUB", "GITLAB", "AWS_CODE_COMMIT", "AZURE_REPO", "BITBUCKET_SERVER", "GITLAB_ON_PREM" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync" : {
      "get" : {
        "tags" : [ "git-sync" ],
        "summary" : "List Git Sync",
        "description" : "",
        "operationId" : "listGitSync",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GitSyncConfig"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "git-sync" ],
        "summary" : "Create a Git Sync",
        "description" : "",
        "operationId" : "postGitSync",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitSyncConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GitSyncConfig"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "git-sync" ],
        "summary" : "Update Git Sync by id",
        "description" : "",
        "operationId" : "putGitSync",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitSyncConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GitSyncConfig"
            }
          }
        }
      }
    },
    "/git-sync/reset-cache" : {
      "post" : {
        "tags" : [ "git-sync" ],
        "operationId" : "resetGitSyncSDKCache",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "targetAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "targetOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "targetProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/git-sync/git-sync-enabled" : {
      "get" : {
        "tags" : [ "git-sync" ],
        "summary" : "Is Git Sync EnabledForProject",
        "description" : "",
        "operationId" : "isGitSyncEnabled",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GitEnabledDTO"
            }
          }
        }
      }
    },
    "/git-sync/{identifier}/folder/{folderIdentifier}/default" : {
      "put" : {
        "tags" : [ "git-sync" ],
        "summary" : "Update Git Sync default by id",
        "description" : "",
        "operationId" : "putGitSyncDefault",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "folderIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GitSyncConfig"
            }
          }
        }
      }
    },
    "/git-sync-errors/aggregate" : {
      "get" : {
        "tags" : [ "git-sync-errors" ],
        "summary" : "Gets Error list grouped by commit",
        "description" : "",
        "operationId" : "listGitToHarnessErrorsCommits",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "numberOfErrorsInSummary",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "maximum" : 5,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitSyncErrorAggregateByCommitDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-errors/count" : {
      "get" : {
        "tags" : [ "git-sync-errors" ],
        "summary" : "Gets Error Count",
        "description" : "",
        "operationId" : "getGitSyncErrorsCount",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGitSyncErrorCountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-errors/commits/{commitId}" : {
      "get" : {
        "tags" : [ "git-sync-errors" ],
        "summary" : "Gets Error list for a particular Commit",
        "description" : "",
        "operationId" : "listGitToHarnessErrorsForCommit",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitSyncErrorDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-errors" : {
      "get" : {
        "tags" : [ "git-sync-errors" ],
        "summary" : "Gets Error list",
        "description" : "",
        "operationId" : "listGitSyncErrors",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gitToHarness",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageGitSyncErrorDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitx-webhook/migration" : {
      "put" : {
        "tags" : [ "gitx-webhookmigration" ],
        "operationId" : "updateGitXWebhook",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitXWebhookMigrationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseGitXWebhookMigrationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/settings/test/connection" : {
      "post" : {
        "tags" : [ "ldap" ],
        "summary" : "Validates Ldap Connection Setting",
        "description" : "",
        "operationId" : "validateLdapConnectionSettings",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LdapSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLdapTestResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/settings/test/user" : {
      "post" : {
        "tags" : [ "ldap" ],
        "summary" : "Validates Ldap User Setting",
        "description" : "",
        "operationId" : "validateLdapUserSettings",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LdapSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLdapTestResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/settings/test/group" : {
      "post" : {
        "tags" : [ "ldap" ],
        "summary" : "Validates Ldap Group Setting",
        "description" : "",
        "operationId" : "validateLdapGroupSettings",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LdapSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLdapTestResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/ngLdapSettings" : {
      "get" : {
        "tags" : [ "ldap" ],
        "summary" : "Returns the ngLdapSettings",
        "description" : "",
        "operationId" : "getNgLdapSettings",
        "consumes" : [ "application/x-kryo" ],
        "produces" : [ "application/x-kryo" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGLdapSettingsWithEncryptedDataDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/{ldapId}/search/group" : {
      "get" : {
        "tags" : [ "ldap" ],
        "summary" : "Search Ldap groups with matching name",
        "description" : "",
        "operationId" : "searchLdapGroups",
        "parameters" : [ {
          "name" : "ldapId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseCollectionLdapGroupResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/sync-groups" : {
      "get" : {
        "tags" : [ "ldap" ],
        "summary" : "Sync Ldap groups within an account",
        "description" : "",
        "operationId" : "syncLdapGroups",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ldap" ],
        "summary" : "Sync Ldap groups within an account",
        "description" : "",
        "operationId" : "syncLdapGroupsV2",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/ldap-login-test" : {
      "post" : {
        "tags" : [ "ldap" ],
        "summary" : "Perform LDAP Login Test",
        "description" : "",
        "operationId" : "postLdapAuthenticationTest",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "email",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLdapResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap/sync-group/{userGroupId}" : {
      "get" : {
        "tags" : [ "ldap" ],
        "summary" : "Trigger sync for a harness user group linked to an LDAP user group in an account",
        "description" : "",
        "operationId" : "syncUserGroupLinkedToLDAP",
        "parameters" : [ {
          "name" : "userGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseVoid"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ldap-settings-internal" : {
      "get" : {
        "tags" : [ "ldap-settings-internal" ],
        "operationId" : "getNGLdapSettingsWithEncryptedDataDetail_1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseNGLdapSettingsWithEncryptedDataDetails"
            }
          }
        }
      }
    },
    "/admin/developer-license-mapping/{accountIdentifier}" : {
      "get" : {
        "tags" : [ "admindeveloper-license-mapping" ],
        "operationId" : "getDeveloperMapping",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseListDeveloperMappingDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "admindeveloper-license-mapping" ],
        "operationId" : "createDeveloperMapping",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeveloperMappingDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseDeveloperMappingDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "admindeveloper-license-mapping" ],
        "operationId" : "updateDeveloperMapping",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeveloperMappingDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseDeveloperMappingDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/{identifier}" : {
      "get" : {
        "tags" : [ "licenses" ],
        "summary" : "Gets Module License",
        "description" : "",
        "operationId" : "getModuleLicenseById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/account-license" : {
      "get" : {
        "tags" : [ "licenses" ],
        "summary" : "Gets All Module Licenses for an Account",
        "description" : "",
        "operationId" : "getAllAccountModuleLicenses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/versions" : {
      "post" : {
        "tags" : [ "licenses" ],
        "summary" : "Get Last Modified Time For All Module Types",
        "description" : "",
        "operationId" : "getLastModifiedTimeForAllModuleTypes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapModuleTypeLong"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/actions" : {
      "get" : {
        "tags" : [ "licenses" ],
        "summary" : "Get Allowed Actions Under Each Edition",
        "description" : "",
        "operationId" : "getEditionActions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapEditionSetEditionActionDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/{accountIdentifier}/summary" : {
      "get" : {
        "tags" : [ "licenses" ],
        "summary" : "Gets Module Licenses With Summary By Account And ModuleType",
        "description" : "",
        "operationId" : "getLicensesAndSummary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseLicensesWithSummaryDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/account" : {
      "get" : {
        "tags" : [ "licenses" ],
        "summary" : "Gets All Module License Information in Account",
        "description" : "",
        "operationId" : "getAccountLicenses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/modules/{accountIdentifier}" : {
      "get" : {
        "tags" : [ "licenses" ],
        "summary" : "Gets Module Licenses By Account And ModuleType",
        "description" : "",
        "operationId" : "getModuleLicensesByAccountAndModuleType",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/free" : {
      "post" : {
        "tags" : [ "licenses" ],
        "summary" : "Starts Free License For A Module",
        "description" : "",
        "operationId" : "startFreeLicense",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        }, {
          "name" : "referer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gaClientId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/community" : {
      "post" : {
        "tags" : [ "licenses" ],
        "summary" : "Starts Community License For A Module",
        "description" : "",
        "operationId" : "startCommunityLicense",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/trial" : {
      "post" : {
        "tags" : [ "licenses" ],
        "summary" : "Starts Trial License For A Module",
        "description" : "",
        "operationId" : "startTrialLicense",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartTrialDTO"
          }
        }, {
          "name" : "referer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/extend-trial" : {
      "post" : {
        "tags" : [ "licenses" ],
        "summary" : "Extends Trail License For A Module",
        "description" : "",
        "operationId" : "extendTrialLicense",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartTrialDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/usage/CD/servicesLicense" : {
      "get" : {
        "tags" : [ "usage" ],
        "summary" : "Gets License Usage By Timestamp for Services in CD Module",
        "description" : "",
        "operationId" : "getCDLicenseUsageForServices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/usage/CD/serviceInstancesLicense" : {
      "get" : {
        "tags" : [ "usage" ],
        "summary" : "Gets License Usage By Timestamp for Service Instances in CD Module",
        "description" : "",
        "operationId" : "getCDLicenseUsageForServiceInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceInstanceUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/usage/cd/active-services" : {
      "post" : {
        "tags" : [ "usage" ],
        "summary" : "List Active Services in CD Module",
        "description" : "",
        "operationId" : "lisCDActiveServices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 30,
          "maximum" : 50,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ActiveServicesFilterParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageActiveServiceDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/usage/cd/active-services/csv/download" : {
      "get" : {
        "tags" : [ "usage" ],
        "summary" : "Download CSV Active Services report",
        "description" : "",
        "operationId" : "downloadActiveServiceCSVReport",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/usage/{module}" : {
      "get" : {
        "tags" : [ "usage" ],
        "summary" : "Gets License Usage By Module and Timestamp",
        "description" : "",
        "operationId" : "getLicenseUsage",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "module",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "CDLicenseType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseLicenseUsageDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roleassignments/filter" : {
      "post" : {
        "tags" : [ "roleassignments" ],
        "summary" : "(Stub) Get Filtered Role Assignments",
        "description" : "",
        "operationId" : "getFilteredRoleAssignmentList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RoleAssignmentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageRoleAssignmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roleassignments" : {
      "post" : {
        "tags" : [ "roleassignments" ],
        "summary" : "(Stub) Create Role Assignment",
        "description" : "",
        "operationId" : "createRoleAssignment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RoleAssignment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRoleAssignmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roleassignments/multi/internal" : {
      "post" : {
        "tags" : [ "roleassignments" ],
        "summary" : "(Stub) Create Multiple Role Assignments",
        "description" : "",
        "operationId" : "createRoleAssignments",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "managed",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RoleAssignmentCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListRoleAssignmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roleassignments/aggregate" : {
      "post" : {
        "tags" : [ "roleassignments" ],
        "summary" : "Get Role Assignments Aggregate",
        "description" : "",
        "operationId" : "getRoleAssignmentsAggregate",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RoleAssignmentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRoleAssignmentAggregateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/authentication-settings" : {
      "get" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Get authentication settings for an account",
        "description" : "",
        "operationId" : "getAuthenticationSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseAuthenticationSettingsResponse"
            }
          }
        }
      }
    },
    "/authentication-settings/v2" : {
      "get" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Get authentication settings version 2 for an account",
        "description" : "",
        "operationId" : "getAuthenticationSettingsV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseAuthenticationSettingsResponse"
            }
          }
        }
      }
    },
    "/authentication-settings/login-settings/password-strength" : {
      "get" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Get Password strength settings",
        "description" : "",
        "operationId" : "getPasswordStrengthSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponsePasswordStrengthPolicy"
            }
          }
        }
      }
    },
    "/authentication-settings/login-settings/{loginSettingsId}" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Update login settings - lockout, expiration, strength",
        "description" : "",
        "operationId" : "putLoginSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "loginSettingsId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LoginSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLoginSettings"
            }
          }
        }
      }
    },
    "/authentication-settings/oauth/update-providers" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Update Oauth providers for an account",
        "description" : "",
        "operationId" : "updateOauthProviders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OAuthSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/oauth/remove-mechanism" : {
      "delete" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Remove Oauth mechanism for an account",
        "description" : "",
        "operationId" : "removeOauthMechanism",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/update-auth-mechanism" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Update Auth mechanism for an account",
        "description" : "",
        "operationId" : "updateAuthMechanism",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "authenticationMechanism",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/whitelisted-domains" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Update Whitelisted domains for an account",
        "description" : "",
        "operationId" : "updateWhitelistedDomains",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/ldap/settings" : {
      "get" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Get Ldap settings",
        "description" : "",
        "operationId" : "getLdapSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLDAPSettings"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Create Ldap settings - with user queries, group queries",
        "description" : "",
        "operationId" : "createLdapSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LDAPSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLDAPSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Update Ldap settings - user queries, group queries",
        "description" : "",
        "operationId" : "updateLdapSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LDAPSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLDAPSettings"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Delete Ldap settings",
        "description" : "",
        "operationId" : "deleteLdapSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/two-factor-admin-override-settings" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Set account level two factor auth setting",
        "description" : "",
        "operationId" : "setTwoFactorAuthAtAccountLevel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TwoFactorAdminOverrideSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/session-timeout-account-level" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Set account level session timeout",
        "description" : "",
        "operationId" : "setSessionTimeoutAtAccountLevel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SessionTimeoutSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/public-access" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Enable/disable public access",
        "description" : "",
        "operationId" : "setPublicAccess",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-metadata-upload" : {
      "post" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Create SAML Config",
        "description" : "",
        "operationId" : "uploadSamlMetaData",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "displayName",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupMembershipAttr",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "authorizationEnabled",
          "in" : "formData",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "logoutUrl",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "entityIdentifier",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "samlProviderType",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientSecret",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "friendlySamlName",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jitEnabled",
          "in" : "formData",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "jitValidationKey",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jitValidationValue",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Edit SAML Config",
        "description" : "",
        "operationId" : "updateSamlMetaData",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "displayName",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupMembershipAttr",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "authorizationEnabled",
          "in" : "formData",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "logoutUrl",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "entityIdentifier",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "samlProviderType",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientSecret",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jitEnabled",
          "in" : "formData",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "jitValidationKey",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jitValidationValue",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-metadata-upload/{samlSSOId}" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Edit SAML Config for a given SAML SSO Id",
        "description" : "",
        "operationId" : "updateSamlMetaDataForSamlSSOId",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "samlSSOId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "displayName",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupMembershipAttr",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "authorizationEnabled",
          "in" : "formData",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "logoutUrl",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "entityIdentifier",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "samlProviderType",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientSecret",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "friendlySamlName",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jitEnabled",
          "in" : "formData",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "jitValidationKey",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jitValidationValue",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      }
    },
    "/authentication-settings/delete-saml-metadata" : {
      "delete" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Delete SAML Config",
        "description" : "",
        "operationId" : "deleteSamlMetaData",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-metadata/{samlSSOId}/delete" : {
      "delete" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Delete SAML Config for given SAML sso id",
        "description" : "",
        "operationId" : "deleteSamlMetaDataForSamlSSOId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "samlSSOId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-metadata-upload/{samlSSOId}/authentication" : {
      "put" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Enables or disables authentication for the given SAML sso id",
        "description" : "",
        "operationId" : "enableDisableAuthenticationForSAMLSetting",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "enable",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "samlSSOId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-login-test" : {
      "get" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Get SAML Login Test",
        "description" : "",
        "operationId" : "getSamlLoginTest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLoginTypeResponse"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-login-test/{samlSSOId}" : {
      "get" : {
        "tags" : [ "authentication-settings" ],
        "summary" : "Get SAML Login Test",
        "description" : "",
        "operationId" : "getSamlLoginTestV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "samlSSOId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseLoginTypeResponse"
            }
          }
        }
      }
    },
    "/account-setting" : {
      "get" : {
        "tags" : [ "account-setting" ],
        "summary" : "Gets account setting",
        "description" : "",
        "operationId" : "getAccountSetting",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Connector" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountSettingResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "account-setting" ],
        "summary" : "Create a account setting",
        "description" : "",
        "operationId" : "createAccountSetting",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AccountSettings"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountSettingResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "account-setting" ],
        "summary" : "Update a account setting",
        "description" : "",
        "operationId" : "updateAccountSetting",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AccountSettings"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountSettingResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account-setting/list" : {
      "get" : {
        "tags" : [ "account-setting" ],
        "summary" : "List account setting",
        "description" : "",
        "operationId" : "listAccountSetting",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Connector" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAccountSettings"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/activityHistory" : {
      "get" : {
        "tags" : [ "activityHistory" ],
        "summary" : "Get Activities where this resource was used",
        "description" : "",
        "operationId" : "listActivities",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILED" ]
        }, {
          "name" : "referredEntityType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "referredByEntityType",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "activityTypes",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CONNECTIVITY_CHECK", "ENTITY_USAGE", "ENTITY_CREATION", "ENTITY_UPDATE" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scopeFilter",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "account", "org", "project", "unknown" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageActivity"
            }
          }
        }
      }
    },
    "/activityHistory/connectivityCheckSummary" : {
      "get" : {
        "tags" : [ "activityHistory" ],
        "summary" : "Get ConnectivityCheck Summary",
        "description" : "",
        "operationId" : "getConnectivitySummary",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseConnectivityCheckSummary"
            }
          }
        }
      }
    },
    "/activityHistory/summary" : {
      "get" : {
        "tags" : [ "activityHistory" ],
        "summary" : "Get Activities Summary",
        "description" : "",
        "operationId" : "getActivitiesSummary",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "timeGroupType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "HOUR", "DAY", "WEEK" ]
        }, {
          "name" : "referredEntityType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "referredByEntityType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageActivitySummary"
            }
          }
        }
      }
    },
    "/activityHistory/referred-by-entity-types" : {
      "get" : {
        "tags" : [ "activityHistory" ],
        "summary" : "Get List Of Referred By Entity Types",
        "description" : "",
        "operationId" : "getUniqueReferredByEntities",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "referredEntityType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "activityTypes",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CONNECTIVITY_CHECK", "ENTITY_USAGE", "ENTITY_CREATION", "ENTITY_UPDATE" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGEntityList"
            }
          }
        }
      }
    },
    "/agent/mtls/endpoint" : {
      "get" : {
        "tags" : [ "agentmtls" ],
        "summary" : "Gets the agent mTLS endpoint for an account.",
        "description" : "",
        "operationId" : "getAgentMtlsEndpointForAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "description" : "Account Identifier for the Entity.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseAgentMtlsEndpointDetails"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "agentmtls" ],
        "summary" : "Creates the agent mTLS endpoint for an account.",
        "description" : "",
        "operationId" : "createAgentMtlsEndpointForAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "description" : "Account Identifier for the Entity.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The details of the agent mTLS endpoint to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AgentMtlsEndpointRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseAgentMtlsEndpointDetails"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "agentmtls" ],
        "summary" : "Updates the existing agent mTLS endpoint for an account.",
        "description" : "",
        "operationId" : "updateAgentMtlsEndpointForAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "description" : "Account Identifier for the Entity.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The details to update for the agent mTLS endpoint.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AgentMtlsEndpointRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseAgentMtlsEndpointDetails"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "agentmtls" ],
        "summary" : "Removes the agent mTLS endpoint for an account.",
        "description" : "",
        "operationId" : "deleteAgentMtlsEndpointForAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "description" : "Account Identifier for the Entity.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "agentmtls" ],
        "summary" : "Updates selected properties of the existing agent mTLS endpoint for an account.",
        "description" : "",
        "operationId" : "patchAgentMtlsEndpointForAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "description" : "Account Identifier for the Entity.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A subset of the details to update for the agent mTLS endpoint.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AgentMtlsEndpointRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseAgentMtlsEndpointDetails"
            }
          }
        }
      }
    },
    "/agent/mtls/check-availability" : {
      "get" : {
        "tags" : [ "agentmtls" ],
        "summary" : "Checks whether a given agent mTLS endpoint domain prefix is available.",
        "description" : "",
        "operationId" : "checkAgentMtlsEndpointDomainPrefixAvailability",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "description" : "Account Identifier for the Entity.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "domainPrefix",
          "in" : "query",
          "description" : "The domain prefix to check.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/artifacts/acr/subscriptions" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets azure subscriptions for ACR artifact",
        "description" : "",
        "operationId" : "getAzureSubscriptionsForAcrArtifact",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureSubscriptionsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/v2/subscriptions" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets azure subscriptions for ACR artifact with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getAzureSubscriptionsForAcrArtifactWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureSubscriptionsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/container-registries" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR registries by subscription ",
        "description" : "",
        "operationId" : "getACRRegistriesBySubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrRegistriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/v2/container-registries" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR registries",
        "description" : "",
        "operationId" : "getACRRegistriesForService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrRegistriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/v3/container-registries" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR registries with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getACRRegistriesForServiceWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrRegistriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/container-registries/{registry}/repositories" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR repositories by subscription and container registry name ",
        "description" : "",
        "operationId" : "getACRRepositories",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrRepositoriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/v2/repositories" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR repositories",
        "description" : "",
        "operationId" : "getACRRepositoriesForService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrRepositoriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/v3/repositories" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR repositories with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getACRRepositoriesForServiceWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrRepositoriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR repository last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForACRRepository",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/getBuildDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR build details with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getBuildDetailsForAcrArtifactWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR repository build details",
        "description" : "",
        "operationId" : "getBuildDetailsForACRRepository",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/acr/getLastSuccessfulBuildV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ACR last successful build with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForAcrArtifactWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAcrBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ami/versions" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Versions for AMI Artifacts",
        "description" : "",
        "operationId" : "listVersionsForAMIArtifact",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AMIRequestBody"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ami/tags" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Tags for AMI Artifacts",
        "description" : "",
        "operationId" : "listTagsForAMIArtifact",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAMITagObject"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/repositoriesDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets repository details",
        "description" : "",
        "operationId" : "getRepositoriesDetailsForArtifactory",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "any"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryRepoDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/repositoriesDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets repository details",
        "description" : "",
        "operationId" : "getRepositoriesDetailsV2ForArtifactory",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "any"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryRepoDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/imagePathsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Image Paths details",
        "description" : "",
        "operationId" : "getImagePathsForArtifactoryV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "any"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryImagePathsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/artifactBuildsDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets artifacts builds details",
        "description" : "",
        "operationId" : "getArtifactsBuildsDetailsForArtifactory",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxVersions",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListArtifactoryArtifactBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/imagePaths" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Image Paths details",
        "description" : "",
        "operationId" : "getImagePathsForArtifactory",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "any"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryImagePathsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/validateArtifactServer" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate artifactory artifact server",
        "description" : "",
        "operationId" : "validateArtifactServerForArtifactory",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets artifactory artifact last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForArtifactoryArtifact",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ArtifactoryRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/getBuildDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets artifactory artifact build details with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getBuildDetailsForArtifactoryArtifactWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tagInput",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets artifactory artifact build details",
        "description" : "",
        "operationId" : "getBuildDetailsForArtifactoryArtifact",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/artifactory/getLastSuccessfulBuildV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets artifactory artifact last successful build with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildArtifactoryArtifactWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ArtifactoryRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactoryBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/v2/projects" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Projects for Azure Artifacts",
        "description" : "",
        "operationId" : "listProjectsForAzureArtifactsWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAzureDevopsProject"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/v2/feeds" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Lists Feeds for Azure Artifacts Org or Project",
        "description" : "",
        "operationId" : "listFeedsForAzureArtifactsWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAzureArtifactsFeed"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/v2/versions" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Versions from Package",
        "description" : "",
        "operationId" : "listVersionsFromPackageWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "feed",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/version" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Version from Packages",
        "description" : "",
        "operationId" : "getVersionFromPackage",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "feed",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/v2/version" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Version from Packages",
        "description" : "",
        "operationId" : "getVersionFromPackageWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "feed",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/v2/packages" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Packages for Azure Artifacts",
        "description" : "",
        "operationId" : "listPackagesForAzureArtifactsWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "feed",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAzureArtifactsPackage"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/versions" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Versions from Package",
        "description" : "",
        "operationId" : "listVersionsFromPackage",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "feed",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/projects" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Projects for Azure Artifacts",
        "description" : "",
        "operationId" : "listProjectsForAzureArtifacts",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAzureDevopsProject"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/feeds" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Lists Feeds for Azure Artifacts Org or Project",
        "description" : "",
        "operationId" : "listFeedsForAzureArtifacts",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAzureArtifactsFeed"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/azureartifacts/packages" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "List Packages for Azure Artifacts",
        "description" : "",
        "operationId" : "listPackagesForAzureArtifacts",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "feed",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAzureArtifactsPackage"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/bamboo/paths" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get Artifact Paths for Bamboo",
        "description" : "",
        "operationId" : "getArtifactPathsForBamboo",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "planName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/bamboo/builds" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Builds details for Bamboo",
        "description" : "",
        "operationId" : "getBuildsForBamboo",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "planName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/bamboo/plans" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Plan Keys for Bamboo",
        "description" : "",
        "operationId" : "getPlansKey",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBambooPlanKeysDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/custom/builds" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Job details for Custom Artifact",
        "description" : "",
        "operationId" : "getJobDetailsForCustom",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomScriptInfo"
          }
        }, {
          "name" : "versionPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "arrayPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getLabels" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets docker labels",
        "description" : "",
        "operationId" : "getLabelsForDocker",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDockerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/validateArtifactServer" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate docker artifact server",
        "description" : "",
        "operationId" : "validateArtifactServerForDocker",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets docker last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForDocker",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDockerBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getBuildDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets docker build details with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getBuildDetailsForDockerWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tagInput",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceGitBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDockerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets docker build details",
        "description" : "",
        "operationId" : "getBuildDetailsForDocker",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDockerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getLastSuccessfulBuildV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets docker last successful build with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForDockerWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerRequestDTO"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDockerBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/validateArtifactSource" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate docker image",
        "description" : "",
        "operationId" : "validateArtifactImageForDocker",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/validateArtifact" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate docker artifact with tag/tagregx if given",
        "description" : "",
        "operationId" : "validateArtifactForDocker",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/validateArtifactServer" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate ecr artifact server",
        "description" : "",
        "operationId" : "validateArtifactServerForEcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ecr last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForEcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEcrBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getImages" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ecr images",
        "description" : "",
        "operationId" : "getImagesListForEcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEcrListImagesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getBuildDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ecr build details with yaml expression",
        "description" : "",
        "operationId" : "getBuildDetailsForEcrWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEcrResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ecr build details",
        "description" : "",
        "operationId" : "getBuildDetailsForEcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEcrResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getLastSuccessfulBuildV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets ecr last successful build with yaml expression",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForEcrWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEcrBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/validateArtifactSource" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate Ecr image",
        "description" : "",
        "operationId" : "validateArtifactImageForEcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/validateArtifact" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate Ecr Artifact",
        "description" : "",
        "operationId" : "validateArtifactForEcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/getPackages" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets google artifact registry packages",
        "description" : "",
        "operationId" : "getPackagesForGoogleArtifactRegistry",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARPackageDTOList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/v2/getRepositories" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Repositories google artifact registry V2",
        "description" : "",
        "operationId" : "getRepositoriesForGoogleArtifactRegistryV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARRepositoryDTOList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/v2/getPackages" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Repositories google artifact packages V2",
        "description" : "",
        "operationId" : "getPackagesForGoogleArtifactRegistryV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARPackageDTOList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/getRegions" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets google artifact registry regions",
        "description" : "",
        "operationId" : "getRegionsForGoogleArtifactRegistry",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListRegionGar"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/getRepositories" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Repositories google artifact registry",
        "description" : "",
        "operationId" : "getRepositoriesForGoogleArtifactRegistry",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARRepositoryDTOList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets google artifact registry last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForGoogleArtifactRegistry",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GarRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/v2/getBuildDetails" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets google artifact registry build details v2",
        "description" : "",
        "operationId" : "getBuildDetailsForGoogleArtifactRegistryV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets google artifact registry build details",
        "description" : "",
        "operationId" : "getBuildDetailsForGoogleArtifactRegistry",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gar/v2/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets google artifact registry last successful build v2",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForGoogleArtifactRegistryV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "package",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GarRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGARBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/validateArtifactServer" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate gcr artifact server",
        "description" : "",
        "operationId" : "validateArtifactServerForGcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "registryHostname",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets gcr last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForGcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcrBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets gcr build details",
        "description" : "",
        "operationId" : "getBuildDetailsForGcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "registryHostname",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcrResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/getBuildDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets gcr build details with Yaml expression",
        "description" : "",
        "operationId" : "getBuildDetailsForGcrWithYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registryHostname",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcrResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/getLastSuccessfulBuildV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets gcr last successful build with Yaml expression",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForGcrV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcrBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/validateArtifactSource" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate Gcr image",
        "description" : "",
        "operationId" : "validateArtifactImageForGcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "registryHostname",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/validateArtifact" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate Gcr Artifact",
        "description" : "",
        "operationId" : "validateArtifactForGcr",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "imagePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "registryHostname",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcrRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/githubpackages/packages" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Package details for GithubPackages",
        "description" : "",
        "operationId" : "getPackagesFromGithub",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGithubPackagesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/githubpackages/v2/packages" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Package details for GithubPackages",
        "description" : "",
        "operationId" : "getPackagesFromGithubWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGithubPackagesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/githubpackages/v2/versions" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Versions from Packages",
        "description" : "",
        "operationId" : "getVersionsFromPackagesWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/githubpackages/lastSuccessfulVersion" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Last Successful Version for the Package",
        "description" : "",
        "operationId" : "getLastSuccessfulVersion",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/githubpackages/v2/lastSuccessfulVersion" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Last Successful Version for the Package",
        "description" : "",
        "operationId" : "getLastSuccessfulVersionWithServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/githubpackages/versions" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Versions from Packages",
        "description" : "",
        "operationId" : "getVersionsFromPackages",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "packageType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "org",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/google-cloud-storage/buckets" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get list of buckets from google cloud storage",
        "description" : "",
        "operationId" : "getGcsBuckets",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "project",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGoogleCloudStorageBucketsResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/har/artifacts" : {
      "post" : {
        "tags" : [ "har" ],
        "summary" : "Get list of artifacts from har registry",
        "description" : "",
        "operationId" : "getHarArtifacts",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/har/artifacts/versions" : {
      "post" : {
        "tags" : [ "har" ],
        "summary" : "Get list of artifact versions from har registry",
        "description" : "",
        "operationId" : "getHarArtifactVersions",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "registry",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifact",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/jobs" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Job details for Jenkins",
        "description" : "",
        "operationId" : "getJobDetailsForJenkins",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentJobName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJenkinsJobDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/job/{jobName}/paths" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets jenkins Artifact Paths",
        "description" : "",
        "operationId" : "getArtifactPath For Jenkins",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/job/{jobName}/details" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Jenkins Job paramter",
        "description" : "",
        "operationId" : "getJobParameters for Jenkins",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListJobParameter"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/job/{jobName}/builds" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Jenkins builds",
        "description" : "",
        "operationId" : "getBuilds For Jenkins",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/v2/jobs" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Job details for Jenkins ServiceV2",
        "description" : "",
        "operationId" : "getJobDetailsForJenkinsServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentJobName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJenkinsJobDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/v2/jobArtifactPaths" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets jenkins Artifact Paths ServiceV2",
        "description" : "",
        "operationId" : "getArtifactPath For Jenkins ServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/v2/jobBuilds" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Jenkins builds ServiceV2",
        "description" : "",
        "operationId" : "getBuilds For Jenkins ServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBuildDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/jenkins/v2/jobDetails" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets Jenkins Job paramter ServiceV2",
        "description" : "",
        "operationId" : "getJobParameters for Jenkins ServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListJobParameter"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/getRepositories" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get Repositories for nexus artifact server",
        "description" : "",
        "operationId" : "getRepositories",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListNexusRepositories"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/artifactIds" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get ArtifactIds for nexus",
        "description" : "",
        "operationId" : "artifactIds",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nexusSourceType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/groupIds" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get GroupIds for nexus",
        "description" : "",
        "operationId" : "getGroupIds",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/validateArtifactServer" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Validate nexus artifact server",
        "description" : "",
        "operationId" : "validateArtifactServerForNexus",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/getLastSuccessfulBuild" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets nexus artifact last successful build",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForNexusArtifact",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryPort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NexusRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNexusBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/getBuildDetailsV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets nexus artifact build details with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getBuildDetailsForNexusArtifactWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryPort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "extension",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "classifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNexusResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/getBuildDetails" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets nexus artifact build details",
        "description" : "",
        "operationId" : "getBuildDetailsForNexusArtifact",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryPort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "extension",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "classifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "packageName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNexusResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/nexus/getLastSuccessfulBuildV2" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Gets nexus artifact last successful build with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getLastSuccessfulBuildForNexusArtifactWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryPort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryFormat",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repositoryUrl",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NexusRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNexusBuildDetailsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/tags" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the tags",
        "description" : "",
        "operationId" : "tags",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/vpcs" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the vpcs",
        "description" : "",
        "operationId" : "vpcs",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAwsVPC"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/hosts" : {
      "post" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the IAM hosts",
        "description" : "",
        "operationId" : "filterAwsHosts",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AwsListInstancesFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/load-balancers" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get load balancers",
        "description" : "",
        "operationId" : "loadBalancers",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/auto-scaling-groups" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get auto scaling groups",
        "description" : "",
        "operationId" : "autoScalingGroups",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/listeners" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get elastic load balancer listeners ",
        "description" : "",
        "operationId" : "listeners",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "elasticLoadBalancer",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/listener-rules-arns" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get elastic load balancer listener rules",
        "description" : "",
        "operationId" : "listener rules",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "elasticLoadBalancer",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "listenerArn",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/iam-roles" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the IAM roles",
        "description" : "",
        "operationId" : "getIamRolesForAws",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/v2/tags" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the tags V2",
        "description" : "",
        "operationId" : "tagsV2",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/elastic-load-balancers" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get elastic load balancers",
        "description" : "",
        "operationId" : "elastic load balancers",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/clusters" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get clusters",
        "description" : "",
        "operationId" : "clusters",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/eks/clusters" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get EKS clusters list",
        "description" : "",
        "operationId" : "getEKSClusterNames",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/regions" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the AWS regions defined in the application",
        "description" : "",
        "operationId" : "RegionsForAws",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/cf-parameters" : {
      "post" : {
        "tags" : [ "aws" ],
        "summary" : "Get Cloudformation parameters from a template",
        "description" : "",
        "operationId" : "CFParametersForAws",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "awsConnectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "gitConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListAwsCFTemplateParamsData"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/cf-capabilities" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get the Cloudformation capabilities",
        "description" : "",
        "operationId" : "CFCapabilitiesForAws",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/aws-helper/cf-states" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Get all the Cloudformation states for a stack",
        "description" : "",
        "operationId" : "CFStatesForAws",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/gcs" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets GCS buckets list",
        "description" : "",
        "operationId" : "getGCSBucketList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/s3/v2/getBucketsInManifests" : {
      "post" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets s3 buckets",
        "description" : "",
        "operationId" : "getBucketsInManifests",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/s3/getBucketsV2" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets s3 buckets",
        "description" : "",
        "operationId" : "getV2BucketListForS3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBucketResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/s3/v2/getBuckets" : {
      "post" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets s3 buckets",
        "description" : "",
        "operationId" : "listBucketsWithServiceV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListBucketResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/s3/getFilePaths" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets s3 file paths",
        "description" : "",
        "operationId" : "getFilePathsForS3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "bucketName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePathRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fileFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListFilePaths"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/s3/v2/getFilePaths" : {
      "post" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets s3 file paths",
        "description" : "",
        "operationId" : "getFilePathsV2ForS3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePathRegex",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fileFilter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListFilePaths"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/buckets/s3/getBuckets" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets s3 buckets",
        "description" : "",
        "operationId" : "getBucketListForS3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customDeployment/variables/{templateIdentifier}" : {
      "get" : {
        "tags" : [ "customDeployment" ],
        "summary" : "Gets Infra variables from a Custom Deployment Template by identifier",
        "description" : "",
        "operationId" : "getCustomDeploymentInfraVariables",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "templateIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionLabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customDeployment/get-updated-Yaml/{infraIdentifier}" : {
      "post" : {
        "tags" : [ "customDeployment" ],
        "summary" : "Return the updated yaml for infrastructure based on Deployment template",
        "description" : "",
        "operationId" : "getUpdatedYamlForInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomDeploymentYaml"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomDeploymentRefreshYaml"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customDeployment/expression-variables" : {
      "post" : {
        "tags" : [ "customDeployment" ],
        "summary" : "Gets Custom Deployment Expression Variables",
        "description" : "",
        "operationId" : "getCustomDeploymentExpressionVariables",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomDeploymentYamlRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomDeploymentVariableResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customDeployment/validate-infrastructure/{infraIdentifier}" : {
      "get" : {
        "tags" : [ "customDeployment" ],
        "summary" : "This validates whether Infrastructure is valid or not",
        "description" : "",
        "operationId" : "validateInfrastructureForDeploymentTemplate",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomDeploymentInfraResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customDeployment/get-references" : {
      "post" : {
        "tags" : [ "customDeployment" ],
        "summary" : "Gets Custom Deployment entity references",
        "description" : "",
        "operationId" : "getCustomDeploymentEntityReferences",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomDeploymentYamlRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListEntityDetailProtoDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/accounts/{accountId}/delegate-configs" : {
      "get" : {
        "tags" : [ "v2" ],
        "summary" : "Lists the Delegate Configurations",
        "description" : "",
        "operationId" : "listDelegateConfigsNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fieldsIncluded",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "fieldsExcluded",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponsePageResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v2" ],
        "summary" : "Adds a Delegate profile",
        "description" : "",
        "operationId" : "addDelegateProfileNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateProfileDetailsNg"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/v2/delegate-configs" : {
      "post" : {
        "tags" : [ "v2" ],
        "summary" : "Adds a Delegate profile",
        "description" : "",
        "operationId" : "addDelegateProfileNgV2noQueryParamsV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateProfileDetailsNg"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/v2/accounts/{accountId}/delegate-configs/{delegateConfigIdentifier}" : {
      "get" : {
        "tags" : [ "v2" ],
        "summary" : "Gets Delegate config by identifier",
        "description" : "",
        "operationId" : "getDelegateConfigNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateConfigIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "v2" ],
        "summary" : "Updates a Delegate Configuration",
        "description" : "",
        "operationId" : "updateDelegateConfigNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateConfigIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateProfileDetailsNg"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v2" ],
        "summary" : "Deletes a Delegate config by identifier",
        "description" : "",
        "operationId" : "deleteDelegateConfigNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateConfigIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/{identifier}/tags" : {
      "put" : {
        "tags" : [ "v2" ],
        "summary" : "Update tags for the Delegate group",
        "description" : "",
        "operationId" : "updateTagsForDelegateGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateGroupTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateGroup"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v2/accounts/{accountId}/delegate-configs/{delegateConfigIdentifier}/scoping-rules" : {
      "put" : {
        "tags" : [ "v2" ],
        "summary" : "Updates the Scoping Rules inside the Delegate config",
        "description" : "",
        "operationId" : "updateScopingRulesNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateConfigIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ScopingRuleDetailsNg"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/v2/accounts/{accountId}/delegate-configs/{delegateConfigIdentifier}/selectors" : {
      "put" : {
        "tags" : [ "v2" ],
        "summary" : "Updates the selectors inside the Delegate config",
        "description" : "",
        "operationId" : "updateSelectorsNgV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateConfigIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/v2/accounts/{accountId}/delegate-configs/listV2" : {
      "post" : {
        "tags" : [ "v2" ],
        "summary" : "Lists the Delegate configs with filter",
        "description" : "",
        "operationId" : "listDelegateConfigsNgV2WithFilter",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateProfileFilterProperties"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fieldsIncluded",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "fieldsExcluded",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponsePageResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/download-delegates/docker" : {
      "post" : {
        "tags" : [ "download-delegates" ],
        "summary" : "Downloads a docker delegate yaml file.",
        "description" : "",
        "operationId" : "downloadDockerDelegateYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateDownloadRequest"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/download-delegates/kubernetes" : {
      "post" : {
        "tags" : [ "download-delegates" ],
        "summary" : "Downloads a kubernetes delegate yaml file.",
        "description" : "",
        "operationId" : "downloadKubernetesDelegateYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateDownloadRequest"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/delegate-group-tags/delegate-groups" : {
      "post" : {
        "tags" : [ "delegate-group-tags" ],
        "summary" : "List delegate groups that are having mentioned tags.",
        "description" : "",
        "operationId" : "listDelegateGroupsUsingTags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateGroupTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseListDelegateGroupDTO"
            }
          }
        }
      }
    },
    "/delegate-group-tags/{groupIdentifier}" : {
      "get" : {
        "tags" : [ "delegate-group-tags" ],
        "summary" : "List tags attached with Delegate group",
        "description" : "",
        "operationId" : "listTagsForDelegateGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateGroupDTO"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "delegate-group-tags" ],
        "summary" : "Add tags to the Delegate group",
        "description" : "",
        "operationId" : "addTagsToDelegateGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateGroupTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateGroupDTO"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "delegate-group-tags" ],
        "summary" : "Update tags of the Delegate group",
        "description" : "",
        "operationId" : "updateTagsOfDelegateGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateGroupTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateGroupDTO"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "delegate-group-tags" ],
        "summary" : "Deletes all tags from the Delegate group",
        "description" : "",
        "operationId" : "deleteTagsFromDelegateGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateGroupDTO"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng" : {
      "get" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Lists the Delegate Configurations (profiles)",
        "description" : "",
        "operationId" : "listDelegateProfilesNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fieldsIncluded",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "fieldsExcluded",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponsePageResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Adds a Delegate Configuration (profile)",
        "description" : "",
        "operationId" : "addDelegateProfileNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateProfileDetailsNg"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng/{delegateProfileId}" : {
      "get" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Gets Delegate Configuration (profile)",
        "description" : "",
        "operationId" : "getDelegateProfileNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateProfileId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Updates a Delegate profile",
        "description" : "",
        "operationId" : "updateDelegateProfileNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateProfileId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateProfileDetailsNg"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Deletes a Delegate Configuration (profile)",
        "description" : "",
        "operationId" : "deleteDelegateProfileNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateProfileId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng/{delegateProfileId}/scoping-rules" : {
      "put" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Updates the scoping rules inside the Delegate profile",
        "description" : "",
        "operationId" : "updateScopingRulesNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateProfileId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ScopingRuleDetailsNg"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng/{delegateProfileId}/selectors" : {
      "put" : {
        "tags" : [ "delegate-profilesng" ],
        "summary" : "Updates the selectors inside the Delegate profile",
        "description" : "",
        "operationId" : "updateSelectorsNg",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "delegateProfileId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/delegate-setup/listDelegates" : {
      "post" : {
        "tags" : [ "delegate-setup" ],
        "summary" : "Lists all delegates in NG",
        "description" : "",
        "operationId" : "listDelegates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "all",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateFilterProperties"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseListDelegateListResponse"
            }
          }
        }
      }
    },
    "/delegate-setup/delegate/{delegateIdentifier}" : {
      "delete" : {
        "tags" : [ "delegate-setup" ],
        "summary" : "Deletes delegate",
        "description" : "",
        "operationId" : "deleteDelegate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "delegateIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateDeleteResponse"
            }
          }
        }
      }
    },
    "/delegate-setup/generate-helm-values" : {
      "post" : {
        "tags" : [ "delegate-setup" ],
        "summary" : "Generate helm values yaml file",
        "description" : "",
        "operationId" : "generateNgHelmValuesYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateSetupDetails"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/delegate-setup/delegate-terraform-module-file" : {
      "get" : {
        "tags" : [ "delegate-setup" ],
        "summary" : "Generate delegate terraform example module file",
        "description" : "",
        "operationId" : "generateTerraformModule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/delegate-setup/latest-supported-version" : {
      "get" : {
        "tags" : [ "delegate-setup" ],
        "summary" : "Gets the latest supported delegate version",
        "description" : "",
        "operationId" : "publishedDelegateVersion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseSupportedDelegateVersion"
            }
          }
        }
      }
    },
    "/delegate-setup/override-delegate-tag" : {
      "put" : {
        "tags" : [ "delegate-setup" ],
        "summary" : "Overrides delegate image tag for account",
        "description" : "",
        "operationId" : "overrideDelegateImageTag",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "delegateTag",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "validTillNextRelease",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "validForDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 180,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseString"
            }
          }
        }
      }
    },
    "/delegate-token-ng/delegate-groups" : {
      "get" : {
        "tags" : [ "delegate-token-ng" ],
        "summary" : "Get Delegate Groups",
        "description" : "",
        "operationId" : "getDelegateGroupsUsingToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "delegateTokenName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateGroupListing"
            }
          }
        }
      }
    },
    "/delegate-token-ng" : {
      "get" : {
        "tags" : [ "delegate-token-ng" ],
        "summary" : "Get Delegate Tokens",
        "description" : "",
        "operationId" : "getCgDelegateTokens",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ACTIVE", "REVOKED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseListDelegateTokenDetails"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "delegate-token-ng" ],
        "summary" : "Creates Delegate Token",
        "description" : "",
        "operationId" : "createDelegateToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tokenName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "revokeAfter",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateTokenDetails"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "delegate-token-ng" ],
        "summary" : "Revokes Delegate Token",
        "description" : "",
        "operationId" : "revokeCgDelegateToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tokenName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseDelegateTokenDetails"
            }
          }
        }
      }
    },
    "/cdStage/metadata" : {
      "post" : {
        "tags" : [ "cdStage" ],
        "summary" : "Gets the Service and Environment refs from CD Stage Yaml",
        "description" : "",
        "operationId" : "getCdDeployStageMetadata",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CdDeployStageMetadataRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCDStageMetaDataDTO"
            }
          }
        }
      }
    },
    "/entitySetupUsage" : {
      "get" : {
        "tags" : [ "entitySetupUsage" ],
        "summary" : "Get Entities referring this resource",
        "description" : "",
        "operationId" : "listReferredByEntities",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "referredEntityType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEntitySetupUsageDTO"
            }
          }
        }
      }
    },
    "/entitySetupUsage/v2" : {
      "get" : {
        "tags" : [ "entitySetupUsage" ],
        "summary" : "Get Entities referring this resource if fqn is given",
        "description" : "",
        "operationId" : "listAllEntityUsageByFqn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "referredEntityFQN",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "referredEntityType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEntitySetupUsageDTO"
            }
          }
        }
      }
    },
    "/environments/{environmentIdentifier}" : {
      "get" : {
        "tags" : [ "environments" ],
        "summary" : "Gets a Environment by identifier",
        "description" : "",
        "operationId" : "getEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "environments" ],
        "summary" : "Delete en environment by identifier",
        "description" : "",
        "operationId" : "deleteEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environments" : {
      "get" : {
        "tags" : [ "environments" ],
        "summary" : "Gets environment list for a project",
        "description" : "",
        "operationId" : "getEnvironmentListForProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEnvironmentResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "environments" ],
        "summary" : "Create an Environment",
        "description" : "",
        "operationId" : "createEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "environments" ],
        "summary" : "Update an environment by identifier",
        "description" : "",
        "operationId" : "updateEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environments/upsert" : {
      "put" : {
        "tags" : [ "environments" ],
        "summary" : "Upsert an environment by identifier",
        "description" : "",
        "operationId" : "upsertEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/{environmentIdentifier}" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets a Environment by identifier",
        "description" : "",
        "operationId" : "getEnvironmentV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Delete en environment by identifier",
        "description" : "",
        "operationId" : "deleteEnvironmentV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets environment list",
        "description" : "",
        "operationId" : "getEnvironmentList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Create an Environment",
        "description" : "",
        "operationId" : "createEnvironmentV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Update an environment by identifier",
        "description" : "",
        "operationId" : "updateEnvironmentV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/serviceOverrides/runtimeInputs" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This api returns Service Override inputs YAML",
        "description" : "",
        "operationId" : "getServiceOverrideInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGEntityTemplateResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/environmentsV2/move-config/{environmentIdentifier}" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Move environment YAML from inline to remote",
        "description" : "",
        "operationId" : "moveEnvironmentConfigs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "moveConfigType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "INLINE_TO_REMOTE", "REMOTE_TO_INLINE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentMoveConfigResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/{environmentIdentifier}/update-git-metadata" : {
      "put" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Update git-metadata in remote environment Entity",
        "description" : "",
        "operationId" : "updateEnvironmentGitDetails",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentGitUpdateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/import" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Get Environment YAML from Git Repository",
        "description" : "",
        "operationId" : "importEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isForceImport",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentImportResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/mergeEnvironmentInputs/{environmentIdentifier}" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This api merges old and new environment inputs YAML",
        "description" : "",
        "operationId" : "mergeEnvironmentInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "environmentIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentInputsMergedResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/clone" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Clone an Environment",
        "description" : "",
        "operationId" : "cloneEnvironmentV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentCloneRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentCloneResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/list/scoped" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets environment list filtered by scoped env refs",
        "description" : "",
        "operationId" : "getEnvironmentListFiltered",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/getActiveServiceInstancesForEnvironment" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Get list of instances grouped by service for particular environment",
        "description" : "",
        "operationId" : "getActiveServiceInstancesForEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "buildId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceGroupedByServiceList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/listV2" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets environment list",
        "description" : "",
        "operationId" : "getEnvironmentListV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentFilterProperties"
          }
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/listV2/access" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets environment access list",
        "description" : "",
        "operationId" : "getEnvironmentAccessListV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentFilterProperties"
          }
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/list/access" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets environment access list",
        "description" : "",
        "operationId" : "getEnvironmentAccessList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "envGroupIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/v3/list" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets environment list",
        "description" : "",
        "operationId" : "getEnvironmentListV3",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentFilterProperties"
          }
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "editOnlyRBACPermission",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/dummy-env-api" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This is dummy api to expose NGEnvironmentConfig",
        "description" : "",
        "operationId" : "dummyNGEnvironmentConfigApi",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGEnvironmentConfig"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/serviceOverrides" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Gets Service Overrides list ",
        "description" : "",
        "operationId" : "getServiceOverridesList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 500,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceOverrideResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "upsert a Service Override for an Environment",
        "description" : "",
        "operationId" : "upsertServiceOverride",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Delete a Service Override entity",
        "description" : "",
        "operationId" : "deleteServiceOverride",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/environmentInputYamlAndServiceOverridesMetadata" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This api returns environments runtime input YAML and serviceOverrides Yaml",
        "description" : "",
        "operationId" : "getEnvironmentsInputYamlAndServiceOverrides",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentInputsetYamlAndServiceOverridesMetadataInput"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentYamlMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/v2/env-service-override-metadata" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This api returns environments runtime input YAML and serviceOverrides Yaml",
        "description" : "",
        "operationId" : "getEnvironmentsInputYamlAndServiceOverridesV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentAndServiceOverridesMetadataInput"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentYamlMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/dummy-api-for-exposing-objects" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This is dummy api to expose objects to swagger",
        "description" : "",
        "operationId" : "dummyNGServiceOverrideConfig",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvSwaggerObjectWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/runtimeInputs" : {
      "get" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This api returns Environment inputs YAML",
        "description" : "",
        "operationId" : "getEnvironmentInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGEntityTemplateResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/environmentsV2/upsert" : {
      "put" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Upsert an environment by identifier",
        "description" : "",
        "operationId" : "upsertEnvironmentV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/force-import" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "Force Import a Environment",
        "description" : "",
        "operationId" : "forceImportEnvironment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForceImportEnvironmentRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseForceImportEnvironmentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/validate-yaml" : {
      "post" : {
        "tags" : [ "environmentsV2" ],
        "summary" : "This api return the validation result of Environment yaml",
        "description" : "",
        "operationId" : "validateEnvironmentYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YamlValidationRequestBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseYamlValidationListAPIResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceV1-eol-banner/template" : {
      "post" : {
        "tags" : [ "serviceV1-eol-banner" ],
        "summary" : "Returns list of stage identifiers using v1 stage",
        "description" : "",
        "operationId" : "checkIfTemplateUsingV1Stage",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EOLBannerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEOLBannerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceV1-eol-banner/pipeline" : {
      "post" : {
        "tags" : [ "serviceV1-eol-banner" ],
        "summary" : "Returns list of stage identifiers using v1 stage",
        "description" : "",
        "operationId" : "checkIfPipelineUsingV1Stage",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EOLBannerRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEOLBannerResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gcp/project" : {
      "post" : {
        "tags" : [ "gcp" ],
        "summary" : "Get list of projects from gcp",
        "description" : "",
        "operationId" : "getProjects",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcpProjectResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/{infraIdentifier}" : {
      "get" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Gets an Infrastructure by identifier",
        "description" : "",
        "operationId" : "getInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Delete an infrastructure by identifier",
        "description" : "",
        "operationId" : "deleteInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures" : {
      "get" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Gets Infrastructure list ",
        "description" : "",
        "operationId" : "getInfrastructureList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "deploymentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "deploymentTemplateIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionLabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "serviceRefs",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Create an Infrastructure in an Environment",
        "description" : "",
        "operationId" : "createInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Update an Infrastructure by identifier",
        "description" : "",
        "operationId" : "updateInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/mergeInfrastructureInputs/{infraIdentifier}" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "This api merges old and new infrastructure inputs YAML",
        "description" : "",
        "operationId" : "mergeInfraInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureInputsMergedResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/list-access" : {
      "get" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Gets Infrastructure access list ",
        "description" : "",
        "operationId" : "getInfrastructureAccessList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "deploymentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "deploymentTemplateIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionLabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "serviceRefs",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/v2/list" : {
      "get" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Gets Infrastructure list ",
        "description" : "",
        "operationId" : "getInfrastructureListV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "deploymentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "deploymentTemplateIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionLabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "serviceRefs",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "editOnlyRBACPermission",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/{infraIdentifier}/update-git-metadata" : {
      "put" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Update git-metadata in remote Infrastructure Entity",
        "description" : "",
        "operationId" : "updateInfrastructureGitDetails",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureGitUpdateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/import" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Get Infrastructure YAML from Git Repository",
        "description" : "",
        "operationId" : "importInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isForceImport",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureImportResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/validate-yaml" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "This api return the validation result of Infrastructure yaml",
        "description" : "",
        "operationId" : "validateInfrastructureYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YamlValidationRequestBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseYamlValidationListAPIResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/force-import" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Force Import an Infrastructure",
        "description" : "",
        "operationId" : "forceImportInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForceImportInfrastructureRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseForceImportInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/batch" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Create Infrastructures",
        "description" : "",
        "operationId" : "createInfrastructures",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/InfrastructureRequestDTO"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/move-config/{infraIdentifier}" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Move infra YAML from inline to remote",
        "description" : "",
        "operationId" : "moveInfraConfigs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "moveConfigType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "INLINE_TO_REMOTE", "REMOTE_TO_INLINE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfraMoveConfigResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/dummy-infraConfig-api" : {
      "get" : {
        "tags" : [ "infrastructures" ],
        "summary" : "This is dummy api to expose infraConfig",
        "description" : "",
        "operationId" : "dummyInfraConfigApi",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureConfig"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/runtimeInputs" : {
      "get" : {
        "tags" : [ "infrastructures" ],
        "summary" : "This api returns Infrastructure Definition inputs YAML",
        "description" : "",
        "operationId" : "getInfrastructureInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "infraIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "deployToAll",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGEntityTemplateResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/infrastructureYamlMetadata" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "This api returns infrastructure YAML and runtime input YAML",
        "description" : "",
        "operationId" : "getInfrastructureYamlAndRuntimeInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureYamlMetadataApiInput"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureYamlMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/v2/infrastructure-yaml-metadata" : {
      "post" : {
        "tags" : [ "infrastructures" ],
        "summary" : "This api returns infrastructure YAML and runtime input YAML",
        "description" : "",
        "operationId" : "getInfrastructureYamlAndRuntimeInputsV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureYamlMetadataApiInputV2"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureYamlMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/infrastructures/upsert" : {
      "put" : {
        "tags" : [ "infrastructures" ],
        "summary" : "Upsert an Infrastructure by identifier",
        "description" : "",
        "operationId" : "upsertInfrastructure",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInfrastructureResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites/{inviteId}" : {
      "put" : {
        "tags" : [ "invites" ],
        "summary" : "Resend invite mail",
        "description" : "",
        "operationId" : "updateInvite",
        "consumes" : [ "application/json", "text/yaml" ],
        "produces" : [ "application/json", "text/yaml" ],
        "parameters" : [ {
          "name" : "inviteId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Invite"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOptionalInvite"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "invites" ],
        "summary" : "Delete a invite for the specified project/organization",
        "description" : "",
        "operationId" : "deleteInvite",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "inviteId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOptionalInvite"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites" : {
      "get" : {
        "tags" : [ "invites" ],
        "summary" : "Get all invites for the queried project/organization",
        "description" : "",
        "operationId" : "getInvites",
        "consumes" : [ "application/json", "text/yaml" ],
        "produces" : [ "application/json", "text/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageInvite"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites/aggregate" : {
      "post" : {
        "tags" : [ "invites" ],
        "summary" : "Get a page of pending users for access control",
        "description" : "",
        "operationId" : "getPendingUsersAggregated",
        "consumes" : [ "application/json", "text/yaml" ],
        "produces" : [ "application/json", "text/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ACLAggregateFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageInvite"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites/invite" : {
      "get" : {
        "tags" : [ "invites" ],
        "summary" : "Get invite",
        "description" : "",
        "operationId" : "getInvite",
        "consumes" : [ "application/json", "text/yaml" ],
        "produces" : [ "application/json", "text/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "inviteId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jwttoken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInvite"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gcp/clustersV2" : {
      "get" : {
        "tags" : [ "gcp" ],
        "summary" : "Gets gcp cluster names for a gcp infrastructure definition",
        "description" : "",
        "operationId" : "getClusterNamesForGcpInfra",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcpResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gcp/clusters" : {
      "get" : {
        "tags" : [ "gcp" ],
        "summary" : "Gets gcp cluster names",
        "description" : "",
        "operationId" : "getClusterNamesForGcp",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcpResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/manifests/helm/chart/version" : {
      "get" : {
        "tags" : [ "manifestshelm" ],
        "summary" : "Gets helm chart version details",
        "description" : "",
        "operationId" : "getHelmChartVersionDetails",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "chartName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "folderPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastTag",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseHelmChartResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/manifests/helm/v1/chart/version" : {
      "get" : {
        "tags" : [ "manifestshelm" ],
        "summary" : "Gets helm chart version details",
        "description" : "",
        "operationId" : "getHelmChartVersionDetailsV1",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "chartName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "folderPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastTag",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ociHelmChartStoreConfigType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "helmVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseHelmChartResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/manifests/helm/v2/chart/version" : {
      "post" : {
        "tags" : [ "manifestshelm" ],
        "summary" : "Gets helm chart version details with yaml input for expression resolution",
        "description" : "",
        "operationId" : "getHelmChartVersionDetailsWithYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "chartName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "folderPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastTag",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "registryId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseHelmChartResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service-env-migration/project" : {
      "post" : {
        "tags" : [ "service-env-migration" ],
        "summary" : "Migrate a project to new service and environment framework",
        "description" : "",
        "operationId" : "migrateSvcEnvFromProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SvcEnvMigrationProjectWrapperRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSvcEnvMigrationProjectWrapperResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service-env-migration/pipeline" : {
      "post" : {
        "tags" : [ "service-env-migration" ],
        "summary" : "Migrate a pipeline to new service and environment framework",
        "description" : "",
        "operationId" : "migrateSvcEnvFromPipeline",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SvcEnvMigrationRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSvcEnvMigrationResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service-env-migration/summary" : {
      "get" : {
        "tags" : [ "service-env-migration" ],
        "summary" : "Get summary for an account",
        "description" : "",
        "operationId" : "getSummary",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "getInfrastructuresYaml",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "getServiceConfigsYaml",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountSummaryResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/delegate/token-exchange-details/aws" : {
      "post" : {
        "tags" : [ "oidcdelegatetoken-exchange-details" ],
        "summary" : "Get instance sync perpetual task oidc token exchange details for aws",
        "description" : "",
        "operationId" : "getOidcDelegateTokenExchangeDetailsForAws",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConnectorConfigDTO"
          }
        }, {
          "name" : "connectorIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAwsOidcTokenExchangeDetailsForDelegate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/delegate/token-exchange-details/gcp" : {
      "post" : {
        "tags" : [ "oidcdelegatetoken-exchange-details" ],
        "summary" : "Get instance sync perpetual task oidc token exchange details for gcp",
        "description" : "",
        "operationId" : "getOidcDelegateTokenExchangeDetailsForGcp",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConnectorConfigDTO"
          }
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcpOidcTokenExchangeDetailsForDelegate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/access-token/gcp/workload-access" : {
      "post" : {
        "tags" : [ "oidcaccess-token" ],
        "summary" : "Generate an OIDC Workload Access Token for GCP",
        "description" : "",
        "operationId" : "generateOidcWorkloadAccessTokenForGcp",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcpOidcAccessTokenRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOidcWorkloadAccessTokenResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/access-token/gcp/service-account-access" : {
      "post" : {
        "tags" : [ "oidcaccess-token" ],
        "summary" : "Generate an OIDC Service Account Access Token for GCP",
        "description" : "",
        "operationId" : "generateOidcSAAccessTokenForGcp",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcpOidcAccessTokenRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGcpOidcServiceAccountAccessTokenResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/access-token/aws/webidentity-session-access" : {
      "post" : {
        "tags" : [ "oidcaccess-token" ],
        "summary" : "Generate an OIDC IAM Role Credential for AWS",
        "description" : "",
        "operationId" : "generateOidcIAMRoleCredentialForAws",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AwsOidcCredentialRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAwsOidcCredentialResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/id-token/gcp-v2" : {
      "post" : {
        "tags" : [ "oidcid-token" ],
        "summary" : "Generate an OIDC ID Token for GCP with custom attributes",
        "description" : "",
        "operationId" : "generateOidcIdTokenForGcp2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcpOidcTokenRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/id-token/aws" : {
      "post" : {
        "tags" : [ "oidcid-token" ],
        "summary" : "Generate an OIDC ID Token for AWS",
        "description" : "",
        "operationId" : "generateOidcIdTokenForAws",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AwsOidcTokenRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/id-token/gcp" : {
      "post" : {
        "tags" : [ "oidcid-token" ],
        "summary" : "Generate an OIDC ID Token for GCP",
        "description" : "",
        "operationId" : "generateOidcIdTokenForGcp",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GcpOidcTokenRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/account/{accountId}/.well-known/openid-configuration" : {
      "get" : {
        "tags" : [ "oidcaccount" ],
        "summary" : "Gets the openid configuration for Harness",
        "description" : "",
        "operationId" : "getHarnessOpenIdConfig",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OidcConfiguration"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oidc/account/{accountId}/.wellknown/jwks" : {
      "get" : {
        "tags" : [ "oidcaccount" ],
        "summary" : "Gets the openid configuration for Harness",
        "description" : "",
        "operationId" : "getHarnessOpenIdJwks",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/JwksPublicKeysDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/provider/{providerIdentifier}" : {
      "get" : {
        "tags" : [ "provider" ],
        "summary" : "Gets a Provider by identifier",
        "description" : "",
        "operationId" : "getProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "providerIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGetProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "provider" ],
        "summary" : "Update a provider by identifier",
        "description" : "",
        "operationId" : "updateProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "providerIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateProviderRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUpdateProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "provider" ],
        "summary" : "Delete a provider by identifier",
        "description" : "",
        "operationId" : "deleteProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "providerIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDeleteProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/provider" : {
      "get" : {
        "tags" : [ "provider" ],
        "summary" : "Gets Provider list",
        "description" : "",
        "operationId" : "getProviderList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListGetProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "provider" ],
        "summary" : "Create a Provider",
        "description" : "",
        "operationId" : "createProvider",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateProviderRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreateProviderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refresh-inputs/refreshed-yaml" : {
      "post" : {
        "tags" : [ "refresh-inputs" ],
        "summary" : "This refreshes and update inputs of entities in given yaml",
        "description" : "",
        "operationId" : "getRefreshedYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NgManagerRefreshRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRefreshResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refresh-inputs/validate-inputs-yaml" : {
      "post" : {
        "tags" : [ "refresh-inputs" ],
        "summary" : "This validates whether inputs provided to different references in yaml is valid or not",
        "description" : "",
        "operationId" : "validateInputsForYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NgManagerRefreshRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInputsValidationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/apikey" : {
      "get" : {
        "tags" : [ "apikey" ],
        "summary" : "List api keys",
        "description" : "",
        "operationId" : "listApiKeys",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListApiKeyDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "apikey" ],
        "summary" : "Create API key",
        "description" : "",
        "operationId" : "createApiKey",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiKeyDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseApiKeyDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/apikey/{identifier}" : {
      "put" : {
        "tags" : [ "apikey" ],
        "summary" : "Update API key",
        "description" : "",
        "operationId" : "updateApiKey",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiKeyDTO"
          }
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseApiKeyDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikey" ],
        "summary" : "Delete API key",
        "description" : "",
        "operationId" : "deleteApiKey",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/apikey/aggregate" : {
      "get" : {
        "tags" : [ "apikey" ],
        "summary" : "List api key",
        "description" : "",
        "operationId" : "listAggregatedApiKeys",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageApiKeyAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/apikey/aggregate/{identifier}" : {
      "get" : {
        "tags" : [ "apikey" ],
        "summary" : "Get API key",
        "description" : "",
        "operationId" : "getAggregatedApiKey",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseApiKeyAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/health" : {
      "get" : {
        "tags" : [ "health" ],
        "operationId" : "doReadinessCheck",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          }
        }
      }
    },
    "/health/liveness" : {
      "get" : {
        "tags" : [ "health" ],
        "operationId" : "doLivenessCheck",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseString"
            }
          }
        }
      }
    },
    "/host-validation" : {
      "post" : {
        "tags" : [ "host-validation" ],
        "summary" : "Validate hosts connectivity",
        "description" : "",
        "operationId" : "validateHostsConnectivity",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HostValidationParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListHostValidationDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/organizations/{identifier}" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Gets an OrganizationAggregateDTO by identifier",
        "description" : "",
        "operationId" : "getOrganizationAggregateDTO",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOrganizationAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/projects/{identifier}" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Gets a ProjectAggregateDTO by identifier",
        "description" : "",
        "operationId" : "getProjectAggregateDTO",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseProjectAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/acl/usergroups/{identifier}" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Get Aggregated User Group",
        "description" : "",
        "operationId" : "getUserGroupAggregate",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "roleAssignmentScopeOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "roleAssignmentScopeProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/acl/user/{userId}/usergroups" : {
      "post" : {
        "tags" : [ "aggregate" ],
        "summary" : "Get User Groups by User Id",
        "description" : "",
        "operationId" : "getUserGroupAggregateListByUser",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 6,
          "maximum" : 20,
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupAggregateFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserGroupAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/organizations" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Get OrganizationAggregateDTO list",
        "description" : "",
        "operationId" : "getOrganizationAggregateDTOList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageOrganizationAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/acl/usergroups" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Get Aggregated User Group list",
        "description" : "",
        "operationId" : "getUserGroupAggregateList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "EXCLUDE_INHERITED_GROUPS",
          "enum" : [ "INCLUDE_INHERITED_GROUPS", "EXCLUDE_INHERITED_GROUPS", "INCLUDE_CHILD_SCOPE_GROUPS" ]
        }, {
          "name" : "userSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 6,
          "maximum" : 20,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserGroupAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "aggregate" ],
        "summary" : "Get Aggregated Filtered User Group list",
        "description" : "",
        "operationId" : "getFilteredUserGroupAggregateList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 6,
          "maximum" : 20,
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupFilterDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserGroupAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/projects" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Get ProjectAggregateDTO list",
        "description" : "",
        "operationId" : "getProjectAggregateDTOList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "hasModule",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyFavorites",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageProjectAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/account-resources" : {
      "get" : {
        "tags" : [ "aggregate" ],
        "summary" : "Gets count of account resources",
        "description" : "",
        "operationId" : "getAccountResourcesCount",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountResourcesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hosts/validate" : {
      "post" : {
        "tags" : [ "hosts" ],
        "summary" : "Validate hosts connectivity",
        "description" : "",
        "operationId" : "validateHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HostValidationParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListHostValidationDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hosts/filter" : {
      "post" : {
        "tags" : [ "hosts" ],
        "summary" : "Get hosts filtered by connector",
        "description" : "",
        "operationId" : "filterHostsByConnector",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HostFilterDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageHostDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secret-managers/meta-data" : {
      "post" : {
        "tags" : [ "secret-managers" ],
        "summary" : "Get metadata of secret manager",
        "description" : "",
        "operationId" : "getMetadata",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretManagerMetadataRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretManagerMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/{identifier}" : {
      "get" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Gets secret",
        "description" : "",
        "operationId" : "getSecretV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Update a secret",
        "description" : "",
        "operationId" : "putSecret",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretRequestWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Delete secret",
        "description" : "",
        "operationId" : "deleteSecretV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets" : {
      "get" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Get secrets",
        "description" : "",
        "operationId" : "listSecretsV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "SecretFile", "SecretText", "SSHKey", "WinRmCredentials" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "types",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SecretFile", "SecretText", "SSHKey", "WinRmCredentials" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "source_category",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CLOUD_PROVIDER", "SECRET_MANAGER", "CLOUD_COST", "ARTIFACTORY", "CODE_REPO", "MONITORING", "TICKETING", "DATABASE" ]
        }, {
          "name" : "includeSecretsFromEverySubScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "includeAllSecretsAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "secretManagerIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Create a secret",
        "description" : "",
        "operationId" : "postSecret",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "privateSecret",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretRequestWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/{identifier}/yaml" : {
      "put" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Update a secret via yaml",
        "description" : "",
        "operationId" : "putSecretViaYaml",
        "consumes" : [ "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretRequestWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/files" : {
      "post" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Create a secret file",
        "description" : "",
        "operationId" : "postSecretFileV2",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "privateSecret",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "spec",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/files/{identifier}" : {
      "put" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Update a secret file",
        "description" : "",
        "operationId" : "putSecretFileV2",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "spec",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/list/secrets" : {
      "post" : {
        "tags" : [ "v2secrets" ],
        "summary" : "List secrets",
        "description" : "",
        "operationId" : "listSecretsV4",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretFilterProperties"
          }
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/list" : {
      "post" : {
        "tags" : [ "v2secrets" ],
        "summary" : "List secrets",
        "description" : "",
        "operationId" : "listSecretsV3",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretResourceFilterDTO"
          }
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "secretManagerIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/validate" : {
      "post" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Validate a secret",
        "description" : "",
        "operationId" : "validateSecret",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretValidationMetaData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretValidationResultDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/yaml" : {
      "post" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Create a secret via yaml",
        "description" : "",
        "operationId" : "postSecretViaYaml",
        "consumes" : [ "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "privateSecret",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SecretRequestWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/validateUniqueIdentifier/{identifier}" : {
      "get" : {
        "tags" : [ "v2secrets" ],
        "summary" : "Validate Secret Identifier is unique",
        "description" : "",
        "operationId" : "validateSecretIdentifierIsUnique",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{identifier}" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Get an Organization by identifier",
        "description" : "",
        "operationId" : "getOrganization",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOrganizationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "organizations" ],
        "summary" : "Update an Organization by ID",
        "description" : "",
        "operationId" : "putOrganization",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OrganizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOrganizationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "organizations" ],
        "summary" : "Delete an Organization by identifier",
        "description" : "",
        "operationId" : "deleteOrganization",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Get Organization list",
        "description" : "",
        "operationId" : "getOrganizationList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageOrganizationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "organizations" ],
        "summary" : "Create an Organization",
        "description" : "",
        "operationId" : "postOrganization",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OrganizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOrganizationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{identifier}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Gets a Project by ID",
        "description" : "",
        "operationId" : "getProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Update a Project by ID",
        "description" : "",
        "operationId" : "putProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProjectRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a Project by identifier",
        "description" : "",
        "operationId" : "deleteProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get Project list",
        "description" : "",
        "operationId" : "getProjectList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "hasModule",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyFavorites",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a Project",
        "description" : "",
        "operationId" : "postProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProjectRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{identifier}/move" : {
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Move a Project across orgs",
        "description" : "",
        "operationId" : "moveProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "default"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MoveProjectRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/list" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get Project list",
        "description" : "",
        "operationId" : "getProjectListWithMultiOrgFilter",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "hasModule",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyFavorites",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token" : {
      "get" : {
        "tags" : [ "token" ],
        "summary" : "Get token",
        "description" : "",
        "operationId" : "getToken",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTokenDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "token" ],
        "summary" : "Create token",
        "description" : "",
        "operationId" : "createToken",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TokenDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/{identifier}" : {
      "put" : {
        "tags" : [ "token" ],
        "summary" : "Update token",
        "description" : "",
        "operationId" : "updateToken",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TokenDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTokenDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "token" ],
        "summary" : "Delete token",
        "description" : "",
        "operationId" : "deleteToken",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "apiKeyIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/ssh" : {
      "get" : {
        "tags" : [ "token" ],
        "summary" : "Get SSH token with public key",
        "description" : "",
        "operationId" : "getSSHTokenWithPublicKey",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tokenIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTokenDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/rotate/{identifier}" : {
      "post" : {
        "tags" : [ "token" ],
        "summary" : "Rotate token",
        "description" : "",
        "operationId" : "rotateToken",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "rotateTimestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "apiKeyIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/aggregate" : {
      "get" : {
        "tags" : [ "token" ],
        "summary" : "List tokens",
        "description" : "",
        "operationId" : "listAggregatedTokens",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        }, {
          "name" : "parentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apiKeyIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeOnlyActiveTokens",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageTokenAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/validate" : {
      "post" : {
        "tags" : [ "token" ],
        "summary" : "Validate token",
        "description" : "",
        "operationId" : "validateToken",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTokenDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/internal/validate" : {
      "post" : {
        "tags" : [ "token" ],
        "summary" : "Validate token",
        "description" : "",
        "operationId" : "validateTokenInternal",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTokenDTOInternal"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/ssh/validate" : {
      "post" : {
        "tags" : [ "token" ],
        "summary" : "Validate SSH Key",
        "description" : "",
        "operationId" : "validateSSHKey",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SSHValidateDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-groups/{identifier}" : {
      "get" : {
        "tags" : [ "user-groups" ],
        "summary" : "Get a User Group",
        "description" : "",
        "operationId" : "getUserGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user-groups" ],
        "summary" : "Delete a User Group",
        "description" : "",
        "operationId" : "deleteUserGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups" : {
      "get" : {
        "tags" : [ "user-groups" ],
        "summary" : "Get User Group List",
        "description" : "",
        "operationId" : "getUserGroupList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "EXCLUDE_INHERITED_GROUPS",
          "enum" : [ "INCLUDE_INHERITED_GROUPS", "EXCLUDE_INHERITED_GROUPS", "INCLUDE_CHILD_SCOPE_GROUPS" ]
        }, {
          "name" : "ssoGroupId",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "user-groups" ],
        "summary" : "Create a User Group",
        "description" : "",
        "operationId" : "postUserGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user-groups" ],
        "summary" : "Update a User Group",
        "description" : "",
        "operationId" : "putUserGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/filter" : {
      "post" : {
        "tags" : [ "user-groups" ],
        "summary" : "Get filtered User Groups",
        "description" : "",
        "operationId" : "getFilteredUserGroupsList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupFilterDTO"
          }
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/batch" : {
      "post" : {
        "tags" : [ "user-groups" ],
        "summary" : "Get Batch User Group List",
        "description" : "",
        "operationId" : "getBatchUserGroupList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupFilterDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/copy" : {
      "put" : {
        "tags" : [ "user-groups" ],
        "summary" : "Copy a User Group to several scopes",
        "description" : "",
        "operationId" : "copyUserGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Scope"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/user-groups/{userGroupId}/unlink" : {
      "put" : {
        "tags" : [ "user-groups" ],
        "summary" : "API to unlink the harness user group from SSO group",
        "description" : "",
        "operationId" : "unlinkSsoGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "retainMembers",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserGroup"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/{identifier}/users" : {
      "post" : {
        "tags" : [ "user-groups" ],
        "summary" : "List users in a user group",
        "description" : "",
        "operationId" : "getUsersInUserGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/{identifier}/scopes" : {
      "get" : {
        "tags" : [ "user-groups" ],
        "summary" : "Get Inheriting Child Scope List",
        "description" : "",
        "operationId" : "getInheritingChildScopeList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListScopeName"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/{identifier}/member/{userIdentifier}" : {
      "get" : {
        "tags" : [ "user-groups" ],
        "summary" : "Check if the user is part of the user group",
        "description" : "",
        "operationId" : "checkMember",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user-groups" ],
        "summary" : "Add a user to the user group",
        "description" : "",
        "operationId" : "addMember",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user-groups" ],
        "summary" : "Remove a user from the user group",
        "description" : "",
        "operationId" : "removeMember",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/{userGroupId}/link/saml/{samlId}" : {
      "put" : {
        "tags" : [ "user-groups" ],
        "summary" : "Link to SAML group",
        "description" : "",
        "operationId" : "linkToSamlGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "samlId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SamlLinkGroupRequest"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserGroup"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/{userGroupId}/link/ldap/{ldapId}" : {
      "put" : {
        "tags" : [ "user-groups" ],
        "summary" : "Link to an LDAP group",
        "description" : "",
        "operationId" : "linkToLdapGroup",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ldapId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LdapLinkGroupRequest"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserGroup"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/user-groups/sso/{identifier}" : {
      "get" : {
        "tags" : [ "user-groups" ],
        "summary" : "Get User Groups List linked to SSO",
        "description" : "",
        "operationId" : "getSsoLinkedUserGroups",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListUserGroupDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/v2/user-groups/{identifier}" : {
      "get" : {
        "tags" : [ "v2user-groups" ],
        "summary" : "Get a User Group",
        "description" : "",
        "operationId" : "getUserGroupV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupResponseV2DTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/v2/user-groups" : {
      "post" : {
        "tags" : [ "v2user-groups" ],
        "summary" : "Create a User Group",
        "description" : "",
        "operationId" : "postUserGroupV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupRequestV2DTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupResponseV2DTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "v2user-groups" ],
        "summary" : "Update a User Group",
        "description" : "",
        "operationId" : "putUserGroupV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserGroupRequestV2DTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserGroupResponseV2DTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/azure/subscriptions" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure subscriptions ",
        "description" : "",
        "operationId" : "getAzureSubscriptions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureSubscriptionsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/imageGalleries" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure image Galleries by resource group",
        "description" : "",
        "operationId" : "GetsazureimageGalleriesbyresourcegroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fqnPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureImageGalleriesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/v2/resourceGroups" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure resource groups V2",
        "description" : "",
        "operationId" : "getAzureResourceGroupsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureResourceGroupsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/v2/clusters" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure k8s clusters ",
        "description" : "",
        "operationId" : "getAzureClustersV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureClustersDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/subscriptions/{subscriptionId}/tags" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure tags by subscription ",
        "description" : "",
        "operationId" : "getSubscriptionTags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureTagsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/v2/tags" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure tags by subscription ",
        "description" : "",
        "operationId" : "getSubscriptionTagsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureTagsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/management-groups" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure management groups",
        "description" : "",
        "operationId" : "getManagementGroups",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureManagementGroupsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/v2/app-services-names" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure app services names V2",
        "description" : "",
        "operationId" : "getAzureWebAppNamesV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureWebAppNamesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/app-services/{webAppName}/slots" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure webApp deployment slots",
        "description" : "",
        "operationId" : "getAzureWebAppDeploymentSlots",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "webAppName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureDeploymentSlotsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/v2/app-services/{webAppName}/slots" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure webApp deployment slots V2",
        "description" : "",
        "operationId" : "getAzureWebAppDeploymentSlotsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "webAppName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureDeploymentSlotsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/function-app-services/{functionAppName}/slots" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure functionApp deployment slots V2",
        "description" : "",
        "operationId" : "getAzureFunctionAppDeploymentSlotsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionAppName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureDeploymentSlotsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/subscriptions/{subscriptionId}/resourceGroups" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure resource groups by subscription ",
        "description" : "",
        "operationId" : "getAzureResourceGroupsBySubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureResourceGroupsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/hosts" : {
      "post" : {
        "tags" : [ "azure" ],
        "summary" : "Filter azure hosts by subscription, resourceGroup and tags",
        "description" : "",
        "operationId" : "filterAzureHosts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AzureListInstancesFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/clusters" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure k8s clusters by subscription ",
        "description" : "",
        "operationId" : "getAzureClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureClustersDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/locations" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure locations defined for a subscription",
        "description" : "",
        "operationId" : "getLocationsBySubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureLocationsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/app-services-names" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure app services names by subscriptionId and resourceGroup",
        "description" : "",
        "operationId" : "getAzureWebAppNames",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureWebAppNamesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/azure/function-app-names" : {
      "get" : {
        "tags" : [ "azure" ],
        "summary" : "Gets azure function app names ",
        "description" : "",
        "operationId" : "getAzureFunctionAppNames",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceGroup",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAzureFunctionAppNamesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yamlschema/schemafile" : {
      "get" : {
        "tags" : [ "yamlschema" ],
        "summary" : "Get Schema for the given entity type",
        "description" : "",
        "operationId" : "schemafile",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "filename",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/services/{serviceIdentifier}" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Gets a Service by identifier",
        "description" : "",
        "operationId" : "getService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Delete a service by identifier",
        "description" : "",
        "operationId" : "deleteService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Gets Service list for a project",
        "description" : "",
        "operationId" : "getServiceListForProject",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Create a Service",
        "description" : "",
        "operationId" : "createService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Update a service by identifier",
        "description" : "",
        "operationId" : "updateService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/batch" : {
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Create Services",
        "description" : "",
        "operationId" : "createServices",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceRequestDTO"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/helmCmdFlags" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get Command flags based on Deployment Type",
        "description" : "",
        "operationId" : "helmCmdFlags",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceSpecType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "V2", "V3", "V380" ]
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetHelmCommandFlagType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/upsert" : {
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Upsert a service by identifier",
        "description" : "",
        "operationId" : "upsertService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/{serviceIdentifier}" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Gets a Service by identifier",
        "description" : "",
        "operationId" : "getServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "fetchResolvedYaml",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Delete a service by identifier",
        "description" : "",
        "operationId" : "deleteServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Gets Service list",
        "description" : "",
        "operationId" : "getServiceList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "gitOpsEnabled",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "deploymentTemplateIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionLabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllServicesAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "includeVersionInfo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "editOnlyRBACPermission",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Create a Service",
        "description" : "",
        "operationId" : "createServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Update a service by identifier",
        "description" : "",
        "operationId" : "updateServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/validate-yaml" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This api return the validation result of service yaml",
        "description" : "",
        "operationId" : "validateServiceYaml",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YamlValidationRequestBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseYamlValidationListAPIResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/clone" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Clone a Service",
        "description" : "",
        "operationId" : "cloneServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceCloneRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/force-import" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Force Import a Service",
        "description" : "",
        "operationId" : "forceImportServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForceImportServiceRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseForceImportServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/list/all-services" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Get all services list",
        "description" : "",
        "operationId" : "getAllServicesList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/list/scoped" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Gets Service list filtered by service refs",
        "description" : "",
        "operationId" : "getServiceListFiltered",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/list/access" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Gets Service Access list ",
        "description" : "",
        "operationId" : "getServiceAccessList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "maxItems" : 1000,
          "minItems" : 0
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }, {
          "name" : "gitOpsEnabled",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "deploymentTemplateIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionLabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentMetadataYaml",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllServicesAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/dummy-serviceConfig-api" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This is dummy api to expose NGServiceConfig",
        "description" : "",
        "operationId" : "dummyNGServiceConfigApi",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGServiceConfig"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/dummy-artifactSummary-api" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This is dummy api to expose ArtifactSummary",
        "description" : "",
        "operationId" : "dummyArtifactSummaryApi",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactSummary"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/runtimeInputs/{serviceIdentifier}" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This api returns runtime input YAML",
        "description" : "",
        "operationId" : "getRuntimeInputsServiceEntity",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNGEntityTemplateResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/servicesYamlMetadata" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This api returns service YAML and runtime input YAML",
        "description" : "",
        "operationId" : "getServicesYamlAndRuntimeInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServicesYamlMetadataApiInput"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServicesV2YamlMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/mergeServiceInputs/{serviceIdentifier}" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This api merges old and new service inputs YAML",
        "description" : "",
        "operationId" : "mergeServiceInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceInputsMergedResponseDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/validate-template-inputs" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This validates inputs for templates like artifact sources for service yaml",
        "description" : "",
        "operationId" : "validateTemplateInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseValidateTemplateInputsResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/artifactSourceInputs/{serviceIdentifier}" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This api returns artifact source identifiers and their runtime inputs YAML",
        "description" : "",
        "operationId" : "getArtifactSourceInputs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactSourcesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/batch" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Create Services",
        "description" : "",
        "operationId" : "createServicesV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceRequestDTO"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/move-config/{serviceIdentifier}" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Move Service YAML from inline to remote",
        "description" : "",
        "operationId" : "moveServiceConfigs",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "moveConfigType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE_TO_REMOTE", "REMOTE_TO_INLINE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceMoveConfigResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/v2/services-yaml-metadata" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This api returns service YAML and runtime input YAML",
        "description" : "",
        "operationId" : "getServicesYamlAndRuntimeInputsV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServicesYamlMetadataApiInputV2"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServicesV2YamlMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/dummy-artifactSourceConfig-api" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "This is dummy api to expose ArtifactSourceConfig",
        "description" : "",
        "operationId" : "dummyArtifactSourceConfigApi",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactSourceConfig"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/artifact-source-references" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Gets Artifact Source Template entity references",
        "description" : "",
        "operationId" : "getArtifactSourceTemplateEntityReferences",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ArtifactSourceYamlRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListEntityDetailProtoDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/k8s/command-flags" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Get Command flags for K8s",
        "description" : "",
        "operationId" : "k8sCmdFlags",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceSpecType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stepType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetK8sCommandFlagType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/hooks/actions" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Get Available Service Hook Actions",
        "description" : "",
        "operationId" : "hookActions",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceSpecType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetServiceHookAction"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/to-unified/{serviceIdentifier}" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Convert an Ng Service to Unified Service",
        "description" : "",
        "operationId" : "toUnifiedService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UnifiedServiceConverterRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUnifiedServiceConverterResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/kustomize/command-flags" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Get Command flags for kustomize",
        "description" : "",
        "operationId" : "kustomizeCmdFlags",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetKustomizeCommandFlagType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/list-repo" : {
      "get" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Gets all repo list",
        "description" : "",
        "operationId" : "getRepositoryList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAllServicesAccessibleAtScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRepoListResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/{serviceIdentifier}/update-git-metadata" : {
      "put" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Update git-metadata in remote service Entity",
        "description" : "",
        "operationId" : "updateServiceGitDetails",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceGitUpdateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/import" : {
      "post" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Get Service YAML from Git Repository",
        "description" : "",
        "operationId" : "importService",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isForceImport",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceImportResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/upsert" : {
      "put" : {
        "tags" : [ "servicesV2" ],
        "summary" : "Upsert a service by identifier",
        "description" : "",
        "operationId" : "upsertServiceV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "If-Match",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/{identifier}" : {
      "get" : {
        "tags" : [ "overrides" ],
        "summary" : "Gets Overrides by Identifier",
        "description" : "",
        "operationId" : "getOverridesViaIdentifier",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "getMetadataOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOverridesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "overrides" ],
        "summary" : "Delete an Override entity",
        "description" : "",
        "operationId" : "deleteOverride",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides" : {
      "get" : {
        "tags" : [ "overrides" ],
        "summary" : "Gets Overrides by given environment, service and infrastructure",
        "description" : "",
        "operationId" : "getOverrides",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "getMetadataOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOverridesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "overrides" ],
        "summary" : "Create an Override Entity",
        "description" : "",
        "operationId" : "createOverride",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OverrideRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOverridesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "overrides" ],
        "summary" : "Update an Override Entity",
        "description" : "",
        "operationId" : "updateOverride",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OverrideRequestDTO"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOverridesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/force-import" : {
      "post" : {
        "tags" : [ "overrides" ],
        "summary" : "Import YAML from git and create override bypassing errors",
        "description" : "",
        "operationId" : "forceImportOverrides",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForceImportOverridesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseForceImportOverridesResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/move-config" : {
      "post" : {
        "tags" : [ "overrides" ],
        "summary" : "Move Override YAML from inline to remote or remote to inline",
        "description" : "",
        "operationId" : "OverrideMoveConfigs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "moveConfigType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE_TO_REMOTE", "REMOTE_TO_INLINE" ]
        }, {
          "name" : "environmentRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceOverridesType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideMoveConfigResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/list" : {
      "post" : {
        "tags" : [ "overrides" ],
        "summary" : "Gets Override List",
        "description" : "",
        "operationId" : "getOverrideList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 500,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OverrideFilterProperties"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageOverridesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/validate-yaml" : {
      "post" : {
        "tags" : [ "overrides" ],
        "summary" : "This api return the validation result of Override yaml",
        "description" : "",
        "operationId" : "validateOverridesYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YamlValidationRequestBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseYamlValidationListAPIResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/update-git-metadata" : {
      "put" : {
        "tags" : [ "overrides" ],
        "summary" : "Update git-metadata in remote Override Entity",
        "description" : "",
        "operationId" : "updateOverrideGitDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceOverridesType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideGitUpdateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/overrides/import" : {
      "post" : {
        "tags" : [ "overrides" ],
        "summary" : "import Overrides from remote",
        "description" : "",
        "operationId" : "importOverrides",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideImportRequestDTO"
          }
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isForceImport",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideImportResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/{identifier}" : {
      "get" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Gets Service Overrides by Identifier",
        "description" : "",
        "operationId" : "getServiceOverridesV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "getMetadataOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Delete a Service Override entity",
        "description" : "",
        "operationId" : "deleteServiceOverrideV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides" : {
      "get" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Gets Service Overrides by given environment, service and infrastructure",
        "description" : "",
        "operationId" : "getServiceOverrides",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "getMetadataOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Create an ServiceOverride Entity",
        "description" : "",
        "operationId" : "createServiceOverrideV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideRequestDTOV2"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Update an ServiceOverride Entity",
        "description" : "",
        "operationId" : "updateServiceOverrideV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideRequestDTOV2"
          }
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rootFolder",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastObjectId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resolvedConflictCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storeType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        }, {
          "name" : "lastCommitId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/migrate-remote-environment-overrides" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Migrate remote environment overrides",
        "description" : "",
        "operationId" : "migrateRemoteEnvironmentOverrides",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRemoteEnvironmentGlobalOverrideMigrationResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/force-import" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Import YAML from git and create override bypassing errors",
        "description" : "",
        "operationId" : "forceImportOverride",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForceImportOverridesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseForceImportOverridesResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/move-config" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Move ServiceOverride YAML from inline to remote or remote to inline",
        "description" : "",
        "operationId" : "serviceOverrideMoveConfigs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "commitMsg",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isNewBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "baseBranch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "moveConfigType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INLINE_TO_REMOTE", "REMOTE_TO_INLINE" ]
        }, {
          "name" : "environmentRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceOverridesType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideMoveConfigResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/list" : {
      "get" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Gets Service Override List",
        "description" : "",
        "operationId" : "getServiceOverrideListV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 500,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/v2/list" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Gets Service Override List",
        "description" : "",
        "operationId" : "getServiceOverrideListV3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 500,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OverrideFilterProperties"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/validate-yaml" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "This api return the validation result of Override yaml",
        "description" : "",
        "operationId" : "validateOverrideYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YamlValidationRequestBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseYamlValidationListAPIResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/upsert" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Upsert an ServiceOverride Entity",
        "description" : "",
        "operationId" : "upsertServiceOverrideV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideRequestDTOV2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/serviceOverrides/v3/list" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Gets Service Override List based on RBAC permissions",
        "description" : "",
        "operationId" : "getServiceOverrideListWithRBAC",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 500,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OverrideFilterProperties"
          }
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/migrate" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Migrate ServiceOverride to V2",
        "description" : "",
        "operationId" : "migrateServiceOverride",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideMigrationResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/batch-migrate-and-enable" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Migrate ServiceOverride to V2",
        "description" : "",
        "operationId" : "migrateAndEnableServiceOverrideV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideBatchMigrationDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceOverrideMigrationResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/migrateScope" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Migrate ServiceOverride to V2 at one scope",
        "description" : "",
        "operationId" : "migrateServiceOverrideScoped",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideMigrationResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/revertMigration" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Revert ServiceOverride V2 Migration",
        "description" : "",
        "operationId" : "revertMigrationServiceOverride",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideMigrationResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/revertMigrationScope" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Revert ServiceOverride V2 Migration at one scope",
        "description" : "",
        "operationId" : "revertMigrationServiceOverrideScoped",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideMigrationResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/get-with-yaml/{identifier}" : {
      "get" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Gets Service Overrides by Identifier including the yaml of spec also in response",
        "description" : "",
        "operationId" : "getWithYamlServiceOverridesV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverridesResponseDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/update-git-metadata" : {
      "put" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Update git-metadata in remote ServiceOverride Entity",
        "description" : "",
        "operationId" : "updateServiceOverrideGitDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceOverridesType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideGitUpdateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/import" : {
      "post" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "import Service Overrides from remote",
        "description" : "",
        "operationId" : "importServiceOverrides",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideImportRequestDTO"
          }
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filePath",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isForceImport",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "isHarnessCodeRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceOverrideImportResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceOverrides/get-remote-environments-in-non-default-branch" : {
      "get" : {
        "tags" : [ "serviceOverrides" ],
        "summary" : "Get remote environments details",
        "description" : "",
        "operationId" : "getRemoteEnvironmentsDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceOverrideBatchMigrationDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseRemoteEnvFetchFailureResponsesListDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/smtpConfig" : {
      "get" : {
        "tags" : [ "smtpConfig" ],
        "summary" : "Gets Smtp config by accountId",
        "description" : "",
        "operationId" : "getSmtpConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNgSmtpDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "smtpConfig" ],
        "summary" : "Create SMTP config",
        "description" : "",
        "operationId" : "createSmtpConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NgSmtpDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNgSmtpDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "smtpConfig" ],
        "summary" : "Update SmtpConfig",
        "description" : "",
        "operationId" : "updateSmtp",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NgSmtpDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseNgSmtpDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/smtpConfig/{identifier}" : {
      "delete" : {
        "tags" : [ "smtpConfig" ],
        "summary" : "Delete Smtp Config",
        "description" : "",
        "operationId" : "deleteSmtpConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/smtpConfig/validateName" : {
      "post" : {
        "tags" : [ "smtpConfig" ],
        "summary" : "Checks whether other connectors exist with the same name",
        "description" : "",
        "operationId" : "validateName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseValidationResultDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/smtpConfig/validate-connectivity" : {
      "post" : {
        "tags" : [ "smtpConfig" ],
        "summary" : "Tests the connectivity",
        "description" : "",
        "operationId" : "validateConnectivity",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subject",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "body",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseValidationResultDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tas/v2/space" : {
      "get" : {
        "tags" : [ "tas" ],
        "summary" : "Gets tas spaces V2 ",
        "description" : "",
        "operationId" : "getTasSpacesV2",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tas/organizations" : {
      "get" : {
        "tags" : [ "tas" ],
        "summary" : "Gets tas organizations ",
        "description" : "",
        "operationId" : "getTasOrganizations",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "infraDefinitionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tas/space" : {
      "get" : {
        "tags" : [ "tas" ],
        "summary" : "Gets tas spaces ",
        "description" : "",
        "operationId" : "getTasSpaces",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organization",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/terraform/terraformCmdFlags" : {
      "get" : {
        "tags" : [ "terraform" ],
        "summary" : "Get Command flags based on terraform Step Type and Config Type",
        "description" : "",
        "operationId" : "terraformCmdFlags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "stepType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "configType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetTerraformCommandFlagType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/terraform-cloud/organizations" : {
      "get" : {
        "tags" : [ "terraform-cloud" ],
        "summary" : "Gets terraform cloud organizations",
        "description" : "",
        "operationId" : "getTerraformCloudOrganizations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOrganizationsDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/terraform-cloud/workspaces" : {
      "get" : {
        "tags" : [ "terraform-cloud" ],
        "summary" : "Gets terraform cloud workspaces",
        "description" : "",
        "operationId" : "getTerraformCloudWorkspaces",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseWorkspacesDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/terragrunt/terragruntCmdFlags" : {
      "get" : {
        "tags" : [ "terragrunt" ],
        "summary" : "Get Command flags based on terragrunt Step Type",
        "description" : "",
        "operationId" : "terragruntCmdFlags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "stepType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetTerragruntCommandFlagType"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/currentUser" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get current user information",
        "description" : "",
        "operationId" : "getCurrentUserInfo",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/add-user-to-groups/{userId}" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Add user to user groups",
        "description" : "",
        "operationId" : "addUserToUserGroups",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserAddToUserGroupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/accounts" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get accounts",
        "description" : "",
        "operationId" : "getAccounts",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponsePageNgAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/{userId}" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "update user information",
        "description" : "",
        "operationId" : "updateUserName",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserInfoUpdateDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Remove user as the collaborator from the scope",
        "description" : "",
        "operationId" : "removeUser",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/update-user-metadata/{userId}" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "update user metadata",
        "description" : "",
        "operationId" : "updateUserMetadata",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserMetadata"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/is-email-registered" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "checks if email is already registered",
        "description" : "",
        "operationId" : "isEmailRegistered",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/batch" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Get a list of users",
        "description" : "",
        "operationId" : "getUsers",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "create user",
        "description" : "",
        "operationId" : "createUser",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateUserDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "update user information",
        "description" : "",
        "operationId" : "updateUserInfo",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/unlock-user/{userId}" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "unlock user",
        "description" : "",
        "operationId" : "unlockUser",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/currentgen" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get users from current gen for an account",
        "description" : "",
        "operationId" : "getCurrentGenUsers",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "searchString",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserMetadataDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/projects" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get user project information",
        "description" : "",
        "operationId" : "getUserProjectInfo",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageProject"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/all-projects" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get user all projects information",
        "description" : "",
        "operationId" : "getUserAllProjectsInfo",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListProject"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/projects-count" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get count of projects accessible to a user",
        "description" : "",
        "operationId" : "getAccessibleProjectsCount",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseActiveProjectsCountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/last-admin" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "check if user is last admin at the scope",
        "description" : "",
        "operationId" : "checkIfLastAdmin",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/reset-two-factor-auth/{userId}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "resend email for two factor authorization",
        "description" : "",
        "operationId" : "resetTwoFactorAuth",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/password" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Change user password",
        "description" : "",
        "operationId" : "changeUserPassword",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PasswordChangeDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePasswordChangeResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/all-accounts" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get user accounts",
        "description" : "",
        "operationId" : "getAccountsfromNg",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "includeSupportAccounts",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "userEmail",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseListNgAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/two-factor-auth/{authMechanism}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get two factor auth settings",
        "description" : "",
        "operationId" : "getTwoFactorAuthSettings",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "authMechanism",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "TOTP" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTwoFactorAuthSettingsInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/aggregate/{userId}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get a user by userId for access control",
        "description" : "",
        "operationId" : "getAggregatedUser",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserAggregate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/aggregate" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Get a page of active users for access control",
        "description" : "",
        "operationId" : "getAggregatedUsers",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ACLAggregateFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageUserAggregate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/users" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Add users to a scope",
        "description" : "",
        "operationId" : "addUsers",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AddUsers"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAddUsersResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/enable-two-factor-auth" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "enable two factor auth settings",
        "description" : "",
        "operationId" : "enableTwoFactorAuth",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TwoFactorAuthSettingsInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/disable-two-factor-auth" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "disable two factor auth settings",
        "description" : "",
        "operationId" : "disableTwoFactorAuth",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/add-to-scope" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "add users to scope",
        "description" : "",
        "operationId" : "addUsersToScope",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AddUsersToScopeDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/variables/{identifier}" : {
      "get" : {
        "tags" : [ "variables" ],
        "summary" : "Get a Variable",
        "description" : "",
        "operationId" : "getVariable",
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseVariableResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "variables" ],
        "summary" : "Delete a Variable",
        "description" : "",
        "operationId" : "deleteVariable",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/variables" : {
      "get" : {
        "tags" : [ "variables" ],
        "summary" : "Gets Variable list",
        "description" : "",
        "operationId" : "getVariablesList",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeVariablesFromEverySubScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageVariableResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "variables" ],
        "summary" : "Create a Variable",
        "description" : "",
        "operationId" : "createVariable",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseVariableResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "variables" ],
        "summary" : "Update a Variable",
        "description" : "",
        "operationId" : "updateVariable",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseVariableResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/variables/expressions" : {
      "get" : {
        "tags" : [ "variables" ],
        "summary" : "Gets a map of variable expressions",
        "description" : "",
        "operationId" : "listVariablesExpression",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/variables/list" : {
      "post" : {
        "tags" : [ "variables" ],
        "summary" : "Get list of Variable",
        "description" : "",
        "operationId" : "listVariable",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeVariablesFromEverySubScope",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableListRequestDTO"
          }
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageVariableResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/executionStatus" : {
      "get" : {
        "tags" : [ "executions" ],
        "summary" : "Gets Execution Status list",
        "description" : "",
        "operationId" : "getExecutionStatuses",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListExecutionStatus"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/dummyCDStageModuleInfo" : {
      "get" : {
        "tags" : [ "executions" ],
        "summary" : "dummy api",
        "description" : "",
        "operationId" : "getDummyCDStageModuleInfo",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCDStageModuleInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/dummyCDPipelineModuleInfo" : {
      "get" : {
        "tags" : [ "executions" ],
        "summary" : "dummy api",
        "description" : "",
        "operationId" : "getDummyCDPipelineModuleInfo",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCDPipelineModuleInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/dummyApiForSwaggerStageSchemaCheck" : {
      "get" : {
        "tags" : [ "executions" ],
        "summary" : "dummy api for checking deployment stage",
        "description" : "",
        "operationId" : "dummyApiForSwaggerStageSchemaCheck",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseStageElementConfig"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/dummyApiForSwaggerStepSchemaCheck" : {
      "get" : {
        "tags" : [ "executions" ],
        "summary" : "dummy api for checking deployment stage",
        "description" : "",
        "operationId" : "dummyApiForSwaggerStepSchemaCheck",
        "consumes" : [ "application/json", "text/yaml", "text/html" ],
        "produces" : [ "application/json", "text/yaml", "text/html" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseStepElementConfig"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/feedback" : {
      "post" : {
        "tags" : [ "feedback" ],
        "summary" : "Saves Feedback",
        "description" : "",
        "operationId" : "saveFeedback",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FeedbackFormDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/{freezeIdentifier}" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "Get a Freeze",
        "description" : "",
        "operationId" : "getFreeze",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "freezeIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeDetailedResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "freeze" ],
        "summary" : "Updates a Freeze",
        "description" : "",
        "operationId" : "updateFreeze",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "freezeIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "freeze" ],
        "summary" : "Delete a Freeze",
        "description" : "",
        "operationId" : "deleteFreeze",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "freezeIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze" : {
      "post" : {
        "tags" : [ "freeze" ],
        "summary" : "Creates a Freeze",
        "description" : "",
        "operationId" : "createFreeze",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/notification/{freezeIdentifier}" : {
      "post" : {
        "tags" : [ "freeze" ],
        "summary" : "Send Notification",
        "description" : "",
        "operationId" : "sendNotification",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "freezeIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/getGlobalFreezeWithBannerDetails" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "Get Global Freeze Yaml with Banner Details",
        "description" : "",
        "operationId" : "getGlobalFreezeWithBannerDetails",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseGlobalFreezeBannerDetailsResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/list" : {
      "post" : {
        "tags" : [ "freeze" ],
        "summary" : "Gets Freeze Configs list ",
        "description" : "",
        "operationId" : "getFreezeList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FreezeFilterPropertiesDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageFreezeSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/getGlobalFreeze" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "Get Global Freeze Yaml",
        "description" : "",
        "operationId" : "getGlobalFreeze",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeDetailedResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/manageGlobalFreeze" : {
      "post" : {
        "tags" : [ "freeze" ],
        "summary" : "Manage Global Freeze",
        "description" : "",
        "operationId" : "GlobalFreeze",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/getFrozenExecutionDetails" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "Get list of freeze acted on a frozen execution",
        "description" : "",
        "operationId" : "getFrozenExecutionDetails",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "planExecutionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFrozenExecutionDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/updateFreezeStatus" : {
      "post" : {
        "tags" : [ "freeze" ],
        "summary" : "Update the status of Freeze to active or inactive",
        "description" : "",
        "operationId" : "updateFreezeStatus",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "Enabled", "Disabled" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeResponseWrapperDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/delete" : {
      "post" : {
        "tags" : [ "freeze" ],
        "summary" : "Deletes many Freezes",
        "description" : "",
        "operationId" : "deleteManyFreezes",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseFreezeResponseWrapperDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/evaluate/isGlobalFreezeActive" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "Get if global freeze is Active",
        "description" : "",
        "operationId" : "isGlobalFreezeActive",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/evaluate/shouldDisableDeployment" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "If to disable run button for deployment",
        "description" : "",
        "operationId" : "shouldDisableDeployment",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseShouldDisableDeploymentFreezeResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/freeze/schema" : {
      "get" : {
        "tags" : [ "freeze" ],
        "summary" : "Get Freeze Schema",
        "description" : "",
        "operationId" : "getFreezeSchema",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJsonNode"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitops/clusters/{identifier}" : {
      "get" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Gets a Cluster by identifier",
        "description" : "",
        "operationId" : "getCluster",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "agentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleted",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseClusterResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Delete a Cluster by identifier",
        "description" : "",
        "operationId" : "deleteCluster",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "agentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitops/clusters" : {
      "get" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Gets cluster list ",
        "description" : "",
        "operationId" : "getClusterList",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageClusterResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Link a gitops cluster to an environment",
        "description" : "",
        "operationId" : "linkCluster",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClusterRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseClusterResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitops/clusters/listFromGitops" : {
      "get" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Gets cluster list from Gitops Service ",
        "description" : "",
        "operationId" : "getClusterListFromSource",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scoped",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageClusterFromGitops"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitops/clusters/batch" : {
      "post" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Link gitops clusters to an environment",
        "description" : "",
        "operationId" : "linkClusters",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClusterBatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseClusterBatchResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gitops/clusters/batchunlink" : {
      "post" : {
        "tags" : [ "gitopsclusters" ],
        "summary" : "Unlink gitops clusters to an environment",
        "description" : "",
        "operationId" : "unlinkClustersInBatch",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClusterBatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseClusterBatchResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifact/instance/metadata" : {
      "post" : {
        "tags" : [ "artifactinstance" ],
        "summary" : "Get instance metadata for an artifact",
        "description" : "",
        "operationId" : "getHarnessArtifactInstanceMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HarnessArtifactInstanceEnvMetadataRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseHarnessArtifactInstanceEnvMetadataResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifact/instance/detail" : {
      "get" : {
        "tags" : [ "artifactinstance" ],
        "summary" : "Get instance details for an artifact",
        "description" : "",
        "operationId" : "getHarnessArtifactInstanceDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "registry",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "artifact",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "environmentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageHarnessArtifactInstanceDetailResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/iac-tf-module/terraform-module-async-task-array" : {
      "post" : {
        "tags" : [ "iac-tf-module" ],
        "summary" : "Create task that gets terraform module of given repo",
        "description" : "",
        "operationId" : "createTerraformModuleAsyncTaskArray",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gitTag",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "path",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "system",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Response"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/iac-tf-module/terraform-module-async-task" : {
      "post" : {
        "tags" : [ "iac-tf-module" ],
        "summary" : "Create task that gets terraform module of given repo",
        "description" : "",
        "operationId" : "createTerraformModuleAsyncTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gitTag",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "path",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "system",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Response"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/iac-tf-module/list-tags-async-task" : {
      "post" : {
        "tags" : [ "iac-tf-module" ],
        "summary" : "Send list tags",
        "description" : "",
        "operationId" : "sendListTags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "system",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Response"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instanceng/stage-instance-info" : {
      "get" : {
        "tags" : [ "instanceng" ],
        "summary" : "Get instance info deployed in previous steps of stage",
        "description" : "",
        "operationId" : "getStageInstanceInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pipelineExecutionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stageExecutionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListStepExecutionInstanceInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instanceng/stage-instance-info/v2" : {
      "get" : {
        "tags" : [ "instanceng" ],
        "summary" : "Get instance info deployed in previous steps of stage",
        "description" : "",
        "operationId" : "getStageInstanceInfoV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pipelineExecutionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stageExecutionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stepFqn",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListStepExecutionInstanceInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instanceng" : {
      "get" : {
        "tags" : [ "instanceng" ],
        "summary" : "Get instance NG data",
        "description" : "",
        "operationId" : "getInstanceNGData",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instanceInfoPodName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instanceInfoNamespace",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOptionalHarnessServiceInfoNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancestats/duplicates" : {
      "get" : {
        "tags" : [ "instancestats" ],
        "summary" : "Gets list of duplicate instances",
        "description" : "",
        "operationId" : "getDuplicateInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListDuplicateInstanceStat"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancesync/gitops" : {
      "post" : {
        "tags" : [ "gitOpsInstanceSync" ],
        "summary" : "Process Gitops instances",
        "description" : "",
        "operationId" : "processGitOpsInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "agentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/GitOpsInstanceRequest"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "gitOpsInstanceSync" ],
        "summary" : "Delete instances",
        "description" : "",
        "operationId" : "deleteGitOpsInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/GitOpsInstanceRequest"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDeleteInstancesRequest"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancesync/response" : {
      "post" : {
        "tags" : [ "instancesync" ],
        "summary" : "Get instance sync perpetual task response",
        "description" : "",
        "operationId" : "getInstanceSyncPerpetualTaskResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "perpetualTaskId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateResponseData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancesync/v3/response" : {
      "post" : {
        "tags" : [ "instancesync" ],
        "summary" : "Get instance sync perpetual task v2 response",
        "description" : "",
        "operationId" : "getInstanceSyncPerpetualTaskV2Response",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "perpetualTaskId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InstanceSyncResponseV2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancesync/v2/response" : {
      "post" : {
        "tags" : [ "instancesync" ],
        "summary" : "Get instance sync perpetual task response",
        "description" : "",
        "operationId" : "getInstanceSyncPerpetualTaskResponseV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "perpetualTaskId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DelegateResponseData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancesync/invalidTaskResponse" : {
      "post" : {
        "tags" : [ "instancesync" ],
        "summary" : "Get details of invalid perpetual task",
        "description" : "",
        "operationId" : "processInvalidPerpetualTaskResponse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InvalidPerpetualTaskResponse"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/instancesync/task/{perpetualTaskId}/details" : {
      "get" : {
        "tags" : [ "instancesync" ],
        "summary" : "Get instance sync perpetual task details",
        "description" : "",
        "operationId" : "fetchTaskDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "perpetualTaskId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "page_size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 1000,
          "format" : "int32"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceSyncTaskDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/validate" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Validate jira credentials",
        "description" : "",
        "operationId" : "validateJiraCredentials",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/createMetadata" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Get jira issue create metadata",
        "description" : "",
        "operationId" : "getJiraIssueCreateMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectKey",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "issueType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "expand",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fetchStatus",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "ignoreComment",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJiraIssueCreateMetadataNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/updateMetadata" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Get jira issue update metadata",
        "description" : "",
        "operationId" : "getJiraIssueUpdateMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "issueKey",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJiraIssueUpdateMetadataNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/transitions" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Get issue transitions",
        "description" : "",
        "operationId" : "getIssueTransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "issueKey",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListJiraIssueTransitionNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/searchUser" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Get jira usernames for the jira connector",
        "description" : "",
        "operationId" : "jiraUserSearch",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userQuery",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListJiraUserData"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/projects" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Get jira projects",
        "description" : "",
        "operationId" : "getJiraProjects",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListJiraProjectBasicNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/statuses" : {
      "get" : {
        "tags" : [ "jira" ],
        "summary" : "Get jira statuses",
        "description" : "",
        "operationId" : "getJiraStatuses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectKey",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "issueType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "issueKey",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListJiraStatusNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oauth/create-access-token-secret" : {
      "post" : {
        "tags" : [ "oauth" ],
        "summary" : "Setup secret for oauth tokens",
        "description" : "",
        "operationId" : "configureOauth",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "secretManagerIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "harnessSecretManager"
        }, {
          "name" : "provider",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isPrivateSecret",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OauthAccessTokenDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseOauthAccessTokenResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oauth/create-access-token" : {
      "post" : {
        "tags" : [ "oauth" ],
        "summary" : "Create access token for oauth",
        "description" : "",
        "operationId" : "createAccessToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OAuthCreateTokenAPIRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestResponseOAuthAccessTokenApiResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getWorkloads" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get workloads",
        "description" : "",
        "operationId" : "getWorkloads",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "environmentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDashboardWorkloadDeployment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/customSequence" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get custom sequence for env and env groups",
        "description" : "",
        "operationId" : "getCustomSequence",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomSequenceDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "dashboard" ],
        "summary" : "Save custom sequence for env and env groups",
        "description" : "",
        "operationId" : "saveCustomSequence",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomSequenceDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceSequence"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/defaultSequence" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get default sequence for env and env groups",
        "description" : "",
        "operationId" : "DefaultSequence",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomSequenceDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/useCustomSequence" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "get the status of current sequence of env cards ",
        "description" : "",
        "operationId" : "getCustomSequenceStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSequenceToggleDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "dashboard" ],
        "summary" : "Save the status of current sequence of env cards ",
        "description" : "",
        "operationId" : "setCustomSequenceStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "useCustomSequence",
          "in" : "query",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceSequence"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/deploymentHealth" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get deployment health",
        "description" : "",
        "operationId" : "getDeploymentHealth",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseHealthDeploymentDashboard"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/deploymentFrequency" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get deployment frequency",
        "description" : "",
        "operationId" : "getDeploymentFrequency",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDeploymentsSummaryInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/failureFrequency" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get failure frequency",
        "description" : "",
        "operationId" : "getFailureFrequency",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDeploymentsSummaryPercentageInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/deploymentHealthV2" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get deployment health V2",
        "description" : "",
        "operationId" : "getDeploymentHealthV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseHealthDeploymentDashboardV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/serviceDeployments" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service deployment",
        "description" : "",
        "operationId" : "getServiceDeployments",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketSizeInDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDeploymentInfoDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/dashboard/serviceDeploymentsInfo" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service deployments info",
        "description" : "",
        "operationId" : "getServiceDeploymentsInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketSizeInDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDeploymentListInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/serviceDeploymentsInfoV2" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service deployments info v2",
        "description" : "",
        "operationId" : "getServiceDeploymentsInfoV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketSizeInDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDeploymentListInfoV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/deploymentExecution" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get deployment execution",
        "description" : "",
        "operationId" : "getDeploymentExecution",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseExecutionDeploymentInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getDeployments" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get deployments",
        "description" : "",
        "operationId" : "getDeployments",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "top",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDashboardExecutionStatusInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getWorkloadsV2" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get workloads",
        "description" : "",
        "operationId" : "getWorkloadsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "environmentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDashboardWorkloadDeploymentV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/serviceDetailsV2" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service details list v2",
        "description" : "",
        "operationId" : "getServiceDetailsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDetailsInfoDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/serviceDetailsV3" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service details list v3 with pagination",
        "description" : "",
        "operationId" : "getServiceDetailsV3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceDetailsDTOV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveServiceDeployments" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get Information about artifacts for a particular service, deployed to different environments",
        "description" : "",
        "operationId" : "getActiveServiceDeployments",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceGroupedByService"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getPipelineExecutionCount" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get pipeline execution count info",
        "description" : "",
        "operationId" : "getPipelineExecutionCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "artifactPath",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifactVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifact",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePipelineExecutionCountInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/serviceDetails" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service details list",
        "description" : "",
        "operationId" : "getServiceDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDetailsInfoDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/dashboard/getServicesGrowthTrend" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service growth trend",
        "description" : "",
        "operationId" : "getServicesGrowthTrend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "timeGroupByType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "HOUR", "DAY", "WEEK" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTimeValuePairListDTOInteger"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getServicesGrowthTrendV2" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service growth trend",
        "description" : "",
        "operationId" : "getServicesGrowthTrendV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "timeGroupByType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "HOUR", "DAY", "WEEK" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceGrowthTrendAndEnvBasedInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getInstanceCountDetailsByService" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active service instance count breakdown by env type",
        "description" : "",
        "operationId" : "getActiveServiceInstanceCountBreakdown",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceCountDetailsByEnvTypeAndServiceId"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveServiceInstanceSummary" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active service instance summary",
        "description" : "",
        "operationId" : "getActiveServiceInstanceSummary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseActiveServiceInstanceSummary"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveServiceInstanceSummaryV2" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active service instance summary v2",
        "description" : "",
        "operationId" : "getActiveServiceInstanceSummaryV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseActiveServiceInstanceSummaryV2"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/v3/getActiveServiceInstanceSummary" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active service instance summary v3",
        "description" : "",
        "operationId" : "getActiveServiceInstanceSummaryV3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseActiveServiceInstanceSummaryV3"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getInstancesByServiceEnvAndBuilds" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of buildId and instances",
        "description" : "",
        "operationId" : "getActiveInstancesByServiceIdEnvIdAndBuildIds",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "buildIds",
          "in" : "query",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clusterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineExecutionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstancesByBuildIdList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getInstanceGrowthTrend" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get instance growth trend",
        "description" : "",
        "operationId" : "getInstanceGrowthTrend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTimeValuePairListDTOInteger"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/dashboard/getInstanceCountHistory" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get instance count history",
        "description" : "",
        "operationId" : "getInstanceCountHistory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTimeValuePairListDTOEnvIdCountPair"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getDeploymentsByServiceId" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get deployments by serviceId",
        "description" : "",
        "operationId" : "getDeploymentsByServiceId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDeploymentsInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getAllDeploymentsByServiceId" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get all deployments by serviceId",
        "description" : "",
        "operationId" : "getAllDeploymentsByServiceId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDeployments"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/dashboard/getServiceHeaderInfo" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service header info",
        "description" : "",
        "operationId" : "getServiceHeaderInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Load-From-Cache",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : "false"
        }, {
          "name" : "loadFromFallbackBranch",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceHeaderInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getEnvironmentInstanceDetails" : {
      "post" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get instance count and last artifact deployment detail in each environment for a particular service",
        "description" : "",
        "operationId" : "getEnvironmentInstanceDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EnvironmentFilterProperties"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentGroupInstanceDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getArtifactInstanceDetails" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get last deployment detail in each environment for artifacts having active instances of a service",
        "description" : "",
        "operationId" : "getArtifactInstanceDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseArtifactInstanceDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getChartVersionInstanceDetails" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get last deployment detail in each environment for chart versions having active instances of a service",
        "description" : "",
        "operationId" : "getChartVersionInstanceDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseChartVersionInstanceDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getOpenTasks" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of pipelines failed and waiting for approval in 5 days",
        "description" : "",
        "operationId" : "getOpenTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseOpenTaskDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getEnvBuildInstanceCountByService" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of unique environment and build ids with instance count",
        "description" : "",
        "operationId" : "getEnvBuildInstanceCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvBuildIdAndInstanceCountInfoList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveServiceInstances" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of artifact version, last pipeline execution, environment, infrastructure with instance count",
        "description" : "",
        "operationId" : "getActiveServiceInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceGroupedByService"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveInstanceGroupedByEnvironment" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active instance count for a service grouped on environment, infrastructure, artifact",
        "description" : "",
        "operationId" : "getActiveInstanceGroupedByEnvironment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envGroupIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceGroupedByEnvironmentList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveInstanceGroupedByArtifact" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active instance count for a service grouped on artifact, environment, infrastructure",
        "description" : "",
        "operationId" : "getActiveInstanceGroupedByArtifact",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envGroupIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifact",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterOnArtifact",
          "in" : "query",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceGroupedOnArtifactList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveInstanceGroupedByChartVersion" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get active instance count for a service grouped on chart version, artifact, environment, infrastructure",
        "description" : "",
        "operationId" : "getActiveInstanceGroupedByChartVersion",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "environmentIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "envGroupIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "chartVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterOnChartVersion",
          "in" : "query",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceGroupedOnChartVersionList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getInstancesDetails" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of instances grouped by serviceId, buildId, environment, infrastructure and pipeline execution",
        "description" : "",
        "operationId" : "getInstancesDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clusterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pipelineExecutionId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "buildId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceDetailsByBuildId"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getActiveServiceInstanceDetailsGroupedByPipelineExecution" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of active instance metadata grouped by pipeline execution for a service",
        "description" : "",
        "operationId" : "getActiveServiceInstanceDetailsGroupedByPipelineExecution",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "envId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "environmentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        }, {
          "name" : "infraIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clusterIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "artifact",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "chartVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInstanceDetailGroupedByPipelineExecutionList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/getEnvArtifactDetailsByServiceId" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get list of unique environment and Artifact version filter by service_id",
        "description" : "",
        "operationId" : "getEnvArtifactDetailsByServiceId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvironmentDeploymentInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true
      }
    },
    "/dashboard/serviceDeploymentMetrics" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service deployment metrics",
        "description" : "",
        "operationId" : "getServiceDeploymentMetrics",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketSizeInDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDeploymentMetrics"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/serviceDeploymentsList" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get service deployments list",
        "description" : "",
        "operationId" : "getServiceDeploymentsList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bucketSizeInDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceDeploymentsList"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/servicesByDeployments" : {
      "get" : {
        "tags" : [ "dashboard" ],
        "summary" : "Get Most Active Services By deployment count",
        "description" : "",
        "operationId" : "servicesByDeployments",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "environmentType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageBasicServiceDeploymentMetrics"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/topProjects" : {
      "post" : {
        "tags" : [ "landingDashboards" ],
        "summary" : "Get Top Projects as per Deployments",
        "description" : "",
        "operationId" : "getTopProjects",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LandingDashboardRequestCD"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseProjectsDashboardInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/deploymentStatsSummary" : {
      "post" : {
        "tags" : [ "landingDashboards" ],
        "summary" : "Get deployment stats summary",
        "description" : "",
        "operationId" : "getDeploymentStatsSummary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "groupBy",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "DAY", "WEEK", "MONTH" ]
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LandingDashboardRequestCD"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDeploymentStatsSummary"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/activeDeploymentStats" : {
      "post" : {
        "tags" : [ "landingDashboards" ],
        "summary" : "Get active deployment stats",
        "description" : "",
        "operationId" : "getActiveDeploymentStats",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LandingDashboardRequestCD"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePipelinesExecutionDashboardInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/servicesCount" : {
      "post" : {
        "tags" : [ "landingDashboards" ],
        "summary" : "Get services count",
        "description" : "",
        "operationId" : "getServicesCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LandingDashboardRequestCD"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServicesCount"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/envCount" : {
      "post" : {
        "tags" : [ "landingDashboards" ],
        "summary" : "Get environments count",
        "description" : "",
        "operationId" : "getEnvCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LandingDashboardRequestCD"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnvCount"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/activeServices" : {
      "post" : {
        "tags" : [ "landingDashboards" ],
        "summary" : "Get Most Active Services",
        "description" : "",
        "operationId" : "getActiveServices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "DEPLOYMENTS", "INSTANCES" ]
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LandingDashboardRequestCD"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServicesDashboardInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingPage/deploymentCount" : {
      "get" : {
        "tags" : [ "landingPage" ],
        "summary" : "Get Total of Deployments",
        "description" : "",
        "operationId" : "getDeploymentCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseLandingPageDeploymentCount"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rollback/check" : {
      "post" : {
        "tags" : [ "rollback" ],
        "summary" : "Check if the post-prod-rollback is possible for the given instanceUuid",
        "description" : "",
        "operationId" : "checkIfInstanceCanBeRolledBack",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PostProdRollbackRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePostProdRollbackCheckDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rollback/trigger" : {
      "post" : {
        "tags" : [ "rollback" ],
        "summary" : "Trigger the post-prod-rollback for the given instanceUuid",
        "description" : "",
        "operationId" : "triggerRollback",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PostProdRollbackRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePostProdRollbackResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cgi/config" : {
      "get" : {
        "tags" : [ "cgi" ],
        "operationId" : "getConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "types",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringCgiTaskConfig"
            }
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/Groups" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : "Search groups by their name. Supports pagination. If nothing is passed in filter, all results will be returned.",
        "description" : "",
        "operationId" : "searchScimGroup",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "post" : {
        "tags" : [ "scim" ],
        "summary" : "Create a new group and return uuid in response",
        "description" : "",
        "operationId" : "createScimGroup",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScimGroup"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/Groups/{groupIdentifier}" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : "Fetch an existing user by uuid",
        "description" : "",
        "operationId" : "getScimGroup",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "scim" ],
        "summary" : "Update a group",
        "description" : "",
        "operationId" : "updateScimGroup",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScimGroup"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "scim" ],
        "summary" : "Delete an existing user by uuid",
        "description" : "",
        "operationId" : "deleteScimGroup",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "patch" : {
        "tags" : [ "scim" ],
        "summary" : "Update some fields of a groups by uuid. Can update members/name",
        "description" : "",
        "operationId" : "patchScimGroup",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchRequest"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/ResourceTypes" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : "Get All ResourceTypes supported by Application's SCIM 2.0 APIs.",
        "description" : "",
        "operationId" : "getResourceTypes",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/Schemas" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : " Get All Schemas supported by Application's SCIM 2.0 APIs. ",
        "description" : "",
        "operationId" : "getSchemas",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/ServiceProviderConfig" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : "Get Service Provider Configuration supported by Application's SCIM 2.0 APIs.",
        "description" : "",
        "operationId" : "getServiceProviderConfig",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/Users/{userIdentifier}" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : "Get an existing user by uuid",
        "description" : "",
        "operationId" : "getScimUser",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "scim" ],
        "summary" : "Update an existing user by uuid",
        "description" : "",
        "operationId" : "updateScimUser",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScimUser"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "scim" ],
        "summary" : "Delete an user by uuid",
        "description" : "",
        "operationId" : "deleteScimUser",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "scim" ],
        "summary" : "Update some fields of a user by uuid",
        "description" : "",
        "operationId" : "patchScimUser",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ScimUser"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scim/account/{accountIdentifier}/Users" : {
      "get" : {
        "tags" : [ "scim" ],
        "summary" : "Search users by their email address. Supports pagination. If nothing is passed in filter, all results will be returned.",
        "description" : "",
        "operationId" : "searchScimUser",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "scim" ],
        "summary" : "Create a new user",
        "description" : "",
        "operationId" : "createScimUser",
        "consumes" : [ "application/scim+json", "application/json" ],
        "produces" : [ "application/scim+json", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScimUser"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount" : {
      "get" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "List service account",
        "description" : "",
        "operationId" : "listServiceAccount",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Create service account",
        "description" : "",
        "operationId" : "createServiceAccount",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceAccountDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount/{identifier}" : {
      "put" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Update service account",
        "description" : "",
        "operationId" : "updateServiceAccount",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServiceAccountDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Delete service account",
        "description" : "",
        "operationId" : "deleteServiceAccount",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount/aggregate" : {
      "get" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "List service account",
        "description" : "",
        "operationId" : "listAggregatedServiceAccounts",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "maximum" : 100,
          "format" : "int32"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "EXCLUDE_INHERITED_SERVICE_ACCOUNTS",
          "enum" : [ "INCLUDE_INHERITED_SERVICE_ACCOUNTS", "EXCLUDE_INHERITED_SERVICE_ACCOUNTS", "INCLUDE_CHILD_SCOPE_SERVICE_ACCOUNTS" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceAccountAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount/aggregate/{identifier}" : {
      "get" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Get service account",
        "description" : "",
        "operationId" : "getAggregatedServiceAccount",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceAccountAggregateDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount/internal/{identifier}" : {
      "get" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Get service account by id",
        "description" : "",
        "operationId" : "getServiceAccountInternal",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceAccountDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount/internal" : {
      "get" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Get service account by identifier",
        "description" : "",
        "operationId" : "getServiceAccountByIdentifier",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "identifiers",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceAccountDTOInternal"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceaccount/internal/uniqueId" : {
      "post" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Get service account by uniqueId in an account",
        "description" : "",
        "operationId" : "getServiceAccountByUniqueId",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceAccountDTOInternal"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/metadata" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get ServiceNow metadata for ticketType",
        "description" : "",
        "operationId" : "getServiceNowIssueMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticketType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceNowFieldNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/getStandardTemplateReadOnlyFields" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get read-only fields for standard change templates",
        "description" : "",
        "operationId" : "getStandardTemplateReadOnlyFields",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/ticketTypesV2" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get serviceNow ticket types V2",
        "description" : "",
        "operationId" : "getServiceNowTicketTypesV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceNowTicketTypeDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/getTicketDetails" : {
      "post" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get ServiceNow issue details",
        "description" : "",
        "operationId" : "getTicketDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticketType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ticketNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseServiceNowTicketNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/createMetadata" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get ServiceNow issue create metadata",
        "description" : "",
        "operationId" : "getServiceNowIssueCreateMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticketType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceNowFieldNG"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/stagingTable" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get serviceNow staging tables",
        "description" : "",
        "operationId" : "getServiceNowStagingTables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceNowStagingTable"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/getTemplate" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get ServiceNow template metadata",
        "description" : "",
        "operationId" : "getServiceNowTemplateMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticketType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "templateName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "templateType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "Form",
          "enum" : [ "Form", "Standard" ]
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceNowTemplate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/getTemplateV2" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get ServiceNow template metadata",
        "description" : "",
        "operationId" : "getServiceNowTemplateMetadataV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticketType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "templateName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "templateType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "Form",
          "enum" : [ "Form", "Standard" ]
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchTerm",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePageServiceNowTemplate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicenow/ticketTypes" : {
      "get" : {
        "tags" : [ "servicenow" ],
        "summary" : "Get serviceNow ticket types",
        "description" : "",
        "operationId" : "getServiceNowTicketTypes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connectorRef",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "branch",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "getDefaultFromOtherRepo",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "parentEntityConnectorRef",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityRepoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityAccountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityOrgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentEntityProjectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repoName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListServiceNowTicketTypeDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/canny/boards" : {
      "get" : {
        "tags" : [ "canny" ],
        "summary" : "Get a list of boards available on Canny",
        "description" : "",
        "operationId" : "getCannyBoards",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCannyBoardsResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/canny/categories" : {
      "get" : {
        "tags" : [ "canny" ],
        "summary" : "Get a list of categories available for a board",
        "description" : "",
        "operationId" : "getCannyCategories",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCannyCategoriesResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/canny/postV2" : {
      "post" : {
        "tags" : [ "canny" ],
        "summary" : "create Canny Post for given user",
        "description" : "",
        "operationId" : "createCannyPostV2",
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "email",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "title",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "details",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "boardId",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryId",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCannyPostResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/canny/post" : {
      "post" : {
        "tags" : [ "canny" ],
        "summary" : "create Canny Post for given user",
        "description" : "",
        "operationId" : "createCannyPost",
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "email",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "title",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "details",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "boardId",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCannyPostResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/AccessControlCheckError"
            }
          }
        }
      }
    },
    "/trial-signup/generate-yaml" : {
      "get" : {
        "tags" : [ "trial-signup" ],
        "summary" : "generate yaml",
        "description" : "",
        "operationId" : "generateYaml",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connectorIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repo",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yamlVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/trial-signup/provision" : {
      "put" : {
        "tags" : [ "trial-signup" ],
        "summary" : "Provision resources for signup",
        "description" : "",
        "operationId" : "provisionResourcesForCI",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSetupStatus"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/trial-signup/delegate-install-status" : {
      "get" : {
        "tags" : [ "trial-signup" ],
        "summary" : "Provision resources for signup",
        "description" : "",
        "operationId" : "getDelegateInstallStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseDelegateStatus"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/trial-signup/create-scm-connector" : {
      "post" : {
        "tags" : [ "trial-signup" ],
        "summary" : "Creates default scm Connector",
        "description" : "",
        "operationId" : "createDefaultScmConnector",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScmConnectorDTO"
          }
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseScmConnectorResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tunnel" : {
      "get" : {
        "tags" : [ "tunnel" ],
        "summary" : "Get the tunnel",
        "description" : "",
        "operationId" : "getTunnel",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseTunnelResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tunnel" ],
        "summary" : "Register the tunnel",
        "description" : "",
        "operationId" : "registerTunnel",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TunnelRegisterRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tunnel" ],
        "summary" : "Delete the tunnel",
        "description" : "",
        "operationId" : "deleteTunnel",
        "consumes" : [ "application/json", "application/yaml" ],
        "produces" : [ "application/json", "application/yaml" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/source-code-manager" : {
      "get" : {
        "tags" : [ "source-code-manager" ],
        "summary" : "get source code manager information",
        "description" : "",
        "operationId" : "getSourceCodeManagers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListSourceCodeManagerDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "source-code-manager" ],
        "summary" : "save source code manager",
        "description" : "",
        "operationId" : "saveSourceCodeManagers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SourceCodeManagerDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSourceCodeManagerDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/source-code-manager/{identifier}" : {
      "put" : {
        "tags" : [ "source-code-manager" ],
        "summary" : "update source code manager",
        "description" : "",
        "operationId" : "updateSourceCodeManagers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SourceCodeManagerDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSourceCodeManagerDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "source-code-manager" ],
        "summary" : "delete source code manager",
        "description" : "",
        "operationId" : "deleteSourceCodeManagers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook" : {
      "post" : {
        "tags" : [ "webhook" ],
        "summary" : "accept webhook event",
        "description" : "",
        "operationId" : "webhookEndpoint",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/json", "application/yaml", "text/plain", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "webhookIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/payload" : {
      "get" : {
        "tags" : [ "webhook" ],
        "summary" : "return webhook payload data as stream",
        "description" : "",
        "operationId" : "payload",
        "consumes" : [ "application/json", "application/yaml", "text/plain" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "uuid",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StreamingOutput"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/settings/{identifier}" : {
      "get" : {
        "tags" : [ "settings" ],
        "summary" : "Resolves and gets a setting value by Identifier",
        "description" : "",
        "operationId" : "getSettingValue",
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSettingValueResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/settings" : {
      "get" : {
        "tags" : [ "settings" ],
        "summary" : "Get list of settings",
        "description" : "",
        "operationId" : "getSettingsList",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CE", "CV", "CF", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS", "SCIM", "GIT_EXPERIENCE", "CONNECTORS", "EULA", "NOTIFICATIONS", "SUPPLY_CHAIN_ASSURANCE", "USER", "MODULES_VISIBILITY" ]
        }, {
          "name" : "group",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeParentScopes",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListSettingResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "settings" ],
        "summary" : "Updates the settings",
        "description" : "",
        "operationId" : "updateSettingValue",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SettingRequestDTO"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListSettingUpdateResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-settings/{identifier}" : {
      "get" : {
        "tags" : [ "user-settings" ],
        "summary" : "Resolves and gets a user setting value by Identifier",
        "description" : "",
        "operationId" : "getUserSettingValue",
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSettingValueResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-settings" : {
      "get" : {
        "tags" : [ "user-settings" ],
        "summary" : "Get list of user settings",
        "description" : "",
        "operationId" : "getUserSettingsList",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListUserSettingResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user-settings" ],
        "summary" : "Updates the user settings",
        "description" : "",
        "operationId" : "updateUserSettingValue",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UserSettingRequestDTO"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListUserSettingUpdateResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-settings/get-user-preferences" : {
      "get" : {
        "tags" : [ "user-settings" ],
        "summary" : "Get list of user preferences ",
        "description" : "",
        "operationId" : "getUserPreferencesList",
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapStringString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/userInfo" : {
      "get" : {
        "tags" : [ "signup" ],
        "summary" : "Returns UserInfo from User email",
        "description" : "",
        "operationId" : "userInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseUserInfoFromClearBitDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/complete/{token}" : {
      "put" : {
        "tags" : [ "signup" ],
        "operationId" : "completeSignupInvite",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "referer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gaClientId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "visitorToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/oauth" : {
      "post" : {
        "tags" : [ "signup" ],
        "operationId" : "signupOAuth",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OAuthSignupDTO"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/verify-notification" : {
      "post" : {
        "tags" : [ "signup" ],
        "summary" : "Resend user verification email",
        "description" : "",
        "operationId" : "resendVerifyEmail",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/send-telemetry" : {
      "post" : {
        "tags" : [ "signup" ],
        "summary" : "Send telemetry event on user signup",
        "description" : "",
        "operationId" : "sendSignupTelemetry",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SignupTelemetryDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/marketplace" : {
      "post" : {
        "tags" : [ "signup" ],
        "operationId" : "marketplaceSignup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SignupDTO"
          }
        }, {
          "name" : "inviteId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "marketPlaceToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/community" : {
      "post" : {
        "tags" : [ "signup" ],
        "operationId" : "communitySignup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SignupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/ds/verify/{token}" : {
      "get" : {
        "tags" : [ "signup" ],
        "operationId" : "verifySignupInvite",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "referer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gaClientId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "visitorToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/ds/account/create/{email}" : {
      "put" : {
        "tags" : [ "signup" ],
        "operationId" : "createAccountAndUserInCluster",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AccountDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/ds/complete/{token}" : {
      "put" : {
        "tags" : [ "signup" ],
        "operationId" : "cleanUpVerificationTokenAndSendTelemetry",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CleanupSignupDTO"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "referer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gaClientId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "visitorToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseUserInfo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/verify/{token}" : {
      "post" : {
        "tags" : [ "signup" ],
        "operationId" : "verifyToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseVerifyTokenResponseDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup" : {
      "post" : {
        "tags" : [ "signup" ],
        "operationId" : "signup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SignupDTO"
          }
        }, {
          "name" : "captchaToken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseVoid"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/credit-cards/{identifier}/is-valid" : {
      "get" : {
        "tags" : [ "credit-cards" ],
        "summary" : "Checks validity of a credit card",
        "description" : "",
        "operationId" : "is valid",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreditCardValidationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/credit-cards/has-valid-card" : {
      "get" : {
        "tags" : [ "credit-cards" ],
        "summary" : "Checks for a valid credit card",
        "description" : "",
        "operationId" : "has a valid card",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseAccountCreditCardValidationResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/credit-cards" : {
      "post" : {
        "tags" : [ "credit-cards" ],
        "summary" : "Saves non-sensitive credit card information",
        "description" : "",
        "operationId" : "save card",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreditCardDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreditCardResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/credit-cards/{identifier}" : {
      "delete" : {
        "tags" : [ "credit-cards" ],
        "summary" : "Deletes credit card information",
        "description" : "",
        "operationId" : "delete card",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCreditCardResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/credit-cards/default" : {
      "get" : {
        "tags" : [ "credit-cards" ],
        "summary" : "Gets the default card for the customer",
        "description" : "",
        "operationId" : "getDefaultCard",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCardDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Lists the subscriptions",
        "description" : "",
        "operationId" : "listSubscriptions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseListSubscriptionDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Creates a subscription",
        "description" : "",
        "operationId" : "createSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSubscriptionDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Retrieves a subscription",
        "description" : "",
        "operationId" : "retrieveSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSubscriptionDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Updates a subscription",
        "description" : "",
        "operationId" : "updateSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseSubscriptionDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Cancel a subscription",
        "description" : "",
        "operationId" : "cancelSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseVoid"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/invoices/preview" : {
      "post" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Retrieves the upcoming Invoice details",
        "description" : "",
        "operationId" : "retrieveUpcomingInvoice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseInvoiceDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/customers" : {
      "post" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Creates the customer",
        "description" : "",
        "operationId" : "createCustomer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomerDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomerDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/customer" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Retrieves the customer",
        "description" : "",
        "operationId" : "retrieveCustomer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomerDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Updates the customer",
        "description" : "",
        "operationId" : "updateCustomer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CustomerDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomerDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/billing" : {
      "put" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Updates the customer's billing information",
        "description" : "",
        "operationId" : "updateBilling",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StripeBillingDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseCustomerDetailDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/recommendation" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Retrieves subscription recommendation",
        "description" : "",
        "operationId" : "retrieveRecommendation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "numberOfMAUs",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "numberOfUsers",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseEnumMapUsageKeyLong"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/prices" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Retrieves product prices",
        "description" : "",
        "operationId" : "retrieveProductPrices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "moduleType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePriceCollectionDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/client-secret" : {
      "post" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Creates a client secret for the Stripe customer",
        "description" : "",
        "operationId" : "createClientSecret",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "billingEmail",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseString"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/payment_methods" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Lists all payment methods for the customer",
        "description" : "",
        "operationId" : "listPaymentMethods",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponsePaymentMethodCollectionDTO"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/exists" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "operationId" : "checkSubscriptionExists",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseBoolean"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/sync_event" : {
      "post" : {
        "tags" : [ "subscriptions" ],
        "operationId" : "syncStripeEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseVoid"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/pay_invoice" : {
      "post" : {
        "tags" : [ "subscriptions" ],
        "operationId" : "payInvoice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "invoiceId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/RestResponseVoid"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/recommendation-rc" : {
      "post" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Retrieves subscription recommendation",
        "description" : "",
        "operationId" : "retrieveRecommendation-rc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RecommendationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseMapUsageKeyLong"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-schema" : {
      "get" : {
        "tags" : [ "yaml-schema" ],
        "summary" : "Get Yaml Schema",
        "description" : "",
        "operationId" : "getYamlSchema",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        }, {
          "name" : "subtype",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        }, {
          "name" : "identifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accountIdentifier",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJsonNode"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-snippet/{identifier}" : {
      "get" : {
        "tags" : [ "yaml-snippet" ],
        "summary" : "Get Yaml Snippet",
        "description" : "",
        "operationId" : "getYamlSnippet",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orgIdentifier",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseJsonNode"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-snippet" : {
      "get" : {
        "tags" : [ "yaml-snippet" ],
        "summary" : "Get Yaml Snippet Metadata",
        "description" : "",
        "operationId" : "getYamlSnippetMetadata",
        "consumes" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "produces" : [ "application/json", "text/yaml", "text/html", "text/plain" ],
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "k8s", "git", "docker", "connector", "secretmanager", "secret", "secretText", "secretFile", "sshKey", "service", "infra", "steps", "pipeline", "http", "splunk", "appdynamics", "vault", "azurekeyvault", "local", "gcpkms", "gcp", "aws", "awskms", "awssecretmanager", "artifactory", "jira", "nexus", "github", "gitlab", "bitbucket", "ceaws", "ceazure", "cek8s", "codecommit", "httphelmrepo", "newrelic", "gcpcloudcost", "prometheus", "datadog", "sumologic", "dynatrace", "pagerduty", "customhealth", "servicenow", "errortracking", "azure", "pdc", "azurerepo", "ocihelmrepo" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResponseYamlSnippets"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Failure"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AccountDTO" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "accountType" : {
          "type" : "string"
        },
        "accountStatus" : {
          "type" : "string"
        },
        "cluster" : {
          "type" : "string"
        },
        "defaultExperience" : {
          "type" : "string",
          "enum" : [ "NG", "CG" ]
        },
        "authenticationMechanism" : {
          "type" : "string",
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        },
        "serviceAccountConfig" : {
          "$ref" : "#/definitions/ServiceAccountConfig"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expiryTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ringName" : {
          "type" : "string"
        },
        "subdomainURL" : {
          "type" : "string"
        },
        "sessionTimeoutInMinutes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "publicAccessEnabled" : {
          "type" : "boolean"
        },
        "absoluteSessionTimeoutInMinutes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "crossGenerationAccessEnabled" : {
          "type" : "boolean"
        },
        "cannyUsernameAbbreviationEnabled" : {
          "type" : "boolean"
        },
        "twoFactorAdminEnforced" : {
          "type" : "boolean"
        },
        "oauthEnabled" : {
          "type" : "boolean"
        },
        "nextGenEnabled" : {
          "type" : "boolean"
        },
        "harnessSupportAccessAllowed" : {
          "type" : "boolean"
        },
        "productLed" : {
          "type" : "boolean"
        }
      }
    },
    "Response" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseAccountDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AccountDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceAccountConfig" : {
      "type" : "object",
      "properties" : {
        "apiKeyLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "tokenLimit" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Failure" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "code" : {
          "type" : "string",
          "enum" : [ "DEFAULT_ERROR_CODE", "INVALID_ARGUMENT", "INVALID_EMAIL", "DOMAIN_NOT_ALLOWED_TO_REGISTER", "COMMNITY_EDITION_NOT_FOUND", "DEPLOY_MODE_IS_NOT_ON_PREM", "USER_ALREADY_REGISTERED", "USER_INVITATION_DOES_NOT_EXIST", "USER_DOES_NOT_EXIST", "USER_INVITE_OPERATION_FAILED", "USER_DISABLED", "ACCOUNT_DOES_NOT_EXIST", "INACTIVE_ACCOUNT", "ACCOUNT_MIGRATED", "ACCOUNT_MIGRATED_TO_NEXT_GEN", "USER_DOMAIN_NOT_ALLOWED", "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED", "RESOURCE_NOT_FOUND", "INVALID_FORMAT", "ROLE_DOES_NOT_EXIST", "EMAIL_NOT_VERIFIED", "EMAIL_VERIFICATION_TOKEN_NOT_FOUND", "INVALID_TOKEN", "REVOKED_TOKEN", "INVALID_CAPTCHA_TOKEN", "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS", "EXPIRED_TOKEN", "INVALID_AGENT_MTLS_AUTHORITY", "TOKEN_ALREADY_REFRESHED_ONCE", "ACCESS_DENIED", "NG_ACCESS_DENIED", "INVALID_CREDENTIAL", "INVALID_CREDENTIALS_THIRD_PARTY", "INVALID_KEY", "INVALID_CONNECTOR_TYPE", "INVALID_KEYPATH", "INVALID_VARIABLE", "UNKNOWN_HOST", "UNREACHABLE_HOST", "INVALID_PORT", "SSH_SESSION_TIMEOUT", "ALGORITHM_NEGOTIATION_ERROR", "SOCKET_CONNECTION_ERROR", "CONNECTION_ERROR", "SOCKET_CONNECTION_TIMEOUT", "WINRM_COMMAND_EXECUTION_TIMEOUT", "CONNECTION_TIMEOUT", "SSH_CONNECTION_ERROR", "USER_GROUP_ERROR", "INVALID_EXECUTION_ID", "ERROR_IN_GETTING_CHANNEL_STREAMS", "UNEXPECTED", "UNKNOWN_ERROR", "UNKNOWN_EXECUTOR_TYPE_ERROR", "DUPLICATE_STATE_NAMES", "TRANSITION_NOT_LINKED", "TRANSITION_TO_INCORRECT_STATE", "TRANSITION_TYPE_NULL", "STATES_WITH_DUP_TRANSITIONS", "BARRIERS_NOT_RUNNING_CONCURRENTLY", "NON_FORK_STATES", "NON_REPEAT_STATES", "INITIAL_STATE_NOT_DEFINED", "FILE_INTEGRITY_CHECK_FAILED", "INVALID_URL", "FILE_DOWNLOAD_FAILED", "PLATFORM_SOFTWARE_DELETE_ERROR", "INVALID_CSV_FILE", "INVALID_REQUEST", "SCHEMA_VALIDATION_FAILED", "FILTER_CREATION_ERROR", "INVALID_YAML_ERROR", "PLAN_CREATION_ERROR", "INVALID_INFRA_STATE", "PIPELINE_ALREADY_TRIGGERED", "NON_EXISTING_PIPELINE", "DUPLICATE_COMMAND_NAMES", "INVALID_PIPELINE", "COMMAND_DOES_NOT_EXIST", "DUPLICATE_ARTIFACTSTREAM_NAMES", "DUPLICATE_HOST_NAMES", "STATE_NOT_FOR_TYPE", "STATE_MACHINE_ISSUE", "STATE_DISCONTINUE_FAILED", "STATE_PAUSE_FAILED", "PAUSE_ALL_ALREADY", "RESUME_ALL_ALREADY", "ROLLBACK_ALREADY", "ABORT_ALL_ALREADY", "EXPIRE_ALL_ALREADY", "RETRY_FAILED", "UNKNOWN_ARTIFACT_TYPE", "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE", "INIT_TIMEOUT", "LICENSE_EXPIRED", "NOT_LICENSED", "REQUEST_TIMEOUT", "SCM_REQUEST_TIMEOUT", "WORKFLOW_ALREADY_TRIGGERED", "JENKINS_ERROR", "INVALID_ARTIFACT_SOURCE", "INVALID_ARTIFACT_SERVER", "INVALID_CLOUD_PROVIDER", "UPDATE_NOT_ALLOWED", "DELETE_NOT_ALLOWED", "APPDYNAMICS_CONFIGURATION_ERROR", "APM_CONFIGURATION_ERROR", "SPLUNK_CONFIGURATION_ERROR", "ELK_CONFIGURATION_ERROR", "LOGZ_CONFIGURATION_ERROR", "SUMO_CONFIGURATION_ERROR", "INSTANA_CONFIGURATION_ERROR", "APPDYNAMICS_ERROR", "STACKDRIVER_ERROR", "STACKDRIVER_CONFIGURATION_ERROR", "NEWRELIC_CONFIGURATION_ERROR", "NEWRELIC_ERROR", "DYNA_TRACE_CONFIGURATION_ERROR", "DYNA_TRACE_ERROR", "CLOUDWATCH_ERROR", "CLOUDWATCH_CONFIGURATION_ERROR", "PROMETHEUS_CONFIGURATION_ERROR", "DATA_DOG_CONFIGURATION_ERROR", "SERVICE_GUARD_CONFIGURATION_ERROR", "ENCRYPTION_NOT_CONFIGURED", "UNAVAILABLE_DELEGATES", "WORKFLOW_EXECUTION_IN_PROGRESS", "PIPELINE_EXECUTION_IN_PROGRESS", "AWS_ACCESS_DENIED", "AWS_CLUSTER_NOT_FOUND", "AWS_SERVICE_NOT_FOUND", "IMAGE_NOT_FOUND", "ILLEGAL_ARGUMENT", "IMAGE_TAG_NOT_FOUND", "DELEGATE_NOT_AVAILABLE", "INVALID_YAML_PAYLOAD", "AUTHENTICATION_ERROR", "AUTHORIZATION_ERROR", "UNRECOGNIZED_YAML_FIELDS", "COULD_NOT_MAP_BEFORE_YAML", "MISSING_BEFORE_YAML", "MISSING_YAML", "NON_EMPTY_DELETIONS", "GENERAL_YAML_ERROR", "GENERAL_YAML_INFO", "YAML_GIT_SYNC_ERROR", "GIT_CONNECTION_ERROR", "GIT_ERROR", "ARTIFACT_SERVER_ERROR", "ENCRYPT_DECRYPT_ERROR", "SECRET_MANAGEMENT_ERROR", "SECRET_NOT_FOUND", "KMS_OPERATION_ERROR", "GCP_KMS_OPERATION_ERROR", "VAULT_OPERATION_ERROR", "AWS_SECRETS_MANAGER_OPERATION_ERROR", "AZURE_KEY_VAULT_OPERATION_ERROR", "AZURE_KEY_VAULT_INTERRUPT_ERROR", "UNSUPPORTED_OPERATION_EXCEPTION", "FEATURE_UNAVAILABLE", "GENERAL_ERROR", "BASELINE_CONFIGURATION_ERROR", "SAML_IDP_CONFIGURATION_NOT_AVAILABLE", "INVALID_AUTHENTICATION_MECHANISM", "INVALID_SAML_CONFIGURATION", "INVALID_OAUTH_CONFIGURATION", "INVALID_LDAP_CONFIGURATION", "USER_GROUP_SYNC_FAILURE", "USER_GROUP_ALREADY_EXIST", "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION", "EXPLANATION", "HINT", "NOT_WHITELISTED_IP", "INVALID_TOTP_TOKEN", "EMAIL_FAILED", "SSL_HANDSHAKE_FAILED", "NO_APPS_ASSIGNED", "INVALID_INFRA_CONFIGURATION", "TEMPLATES_LINKED", "USER_HAS_NO_PERMISSIONS", "USER_NOT_AUTHORIZED", "USER_ALREADY_PRESENT", "EMAIL_ERROR", "INVALID_USAGE_RESTRICTION", "USAGE_RESTRICTION_ERROR", "STATE_EXECUTION_INSTANCE_NOT_FOUND", "DELEGATE_TASK_RETRY", "KUBERNETES_API_TASK_EXCEPTION", "KUBERNETES_TASK_EXCEPTION", "KUBERNETES_YAML_ERROR", "SAVE_FILE_INTO_GCP_STORAGE_FAILED", "READ_FILE_FROM_GCP_STORAGE_FAILED", "FILE_NOT_FOUND_ERROR", "USAGE_LIMITS_EXCEEDED", "EVENT_PUBLISH_FAILED", "CUSTOM_APPROVAL_ERROR", "JIRA_ERROR", "EXPRESSION_EVALUATION_FAILED", "KUBERNETES_VALUES_ERROR", "KUBERNETES_CLUSTER_ERROR", "INCORRECT_SIGN_IN_MECHANISM", "OAUTH_LOGIN_FAILED", "INVALID_TERRAFORM_TARGETS_REQUEST", "TERRAFORM_EXECUTION_ERROR", "FILE_READ_FAILED", "FILE_SIZE_EXCEEDS_LIMIT", "CLUSTER_NOT_FOUND", "MARKETPLACE_TOKEN_NOT_FOUND", "INVALID_MARKETPLACE_TOKEN", "INVALID_TICKETING_SERVER", "SERVICENOW_ERROR", "PASSWORD_EXPIRED", "USER_LOCKED", "PASSWORD_STRENGTH_CHECK_FAILED", "ACCOUNT_DISABLED", "INVALID_ACCOUNT_PERMISSION", "PAGERDUTY_ERROR", "HEALTH_ERROR", "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED", "DOMAIN_WHITELIST_FILTER_CHECK_FAILED", "INVALID_DASHBOARD_UPDATE_REQUEST", "DUPLICATE_FIELD", "INVALID_AZURE_VAULT_CONFIGURATION", "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS", "INVALID_ROLLBACK", "DATA_COLLECTION_ERROR", "SUMO_DATA_COLLECTION_ERROR", "DEPLOYMENT_GOVERNANCE_ERROR", "BATCH_PROCESSING_ERROR", "GRAPHQL_ERROR", "FILE_CREATE_ERROR", "ILLEGAL_STATE", "GIT_DIFF_COMMIT_NOT_IN_ORDER", "FAILED_TO_ACQUIRE_PERSISTENT_LOCK", "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK", "POD_NOT_FOUND_ERROR", "COMMAND_EXECUTION_ERROR", "REGISTRY_EXCEPTION", "ENGINE_INTERRUPT_PROCESSING_EXCEPTION", "ENGINE_IO_EXCEPTION", "ENGINE_OUTCOME_EXCEPTION", "ENGINE_SWEEPING_OUTPUT_EXCEPTION", "CACHE_NOT_FOUND_EXCEPTION", "ENGINE_ENTITY_UPDATE_EXCEPTION", "SHELL_EXECUTION_EXCEPTION", "TEMPLATE_NOT_FOUND", "AZURE_SERVICE_EXCEPTION", "AZURE_CLIENT_EXCEPTION", "GIT_UNSEEN_REMOTE_HEAD_COMMIT", "TIMEOUT_ENGINE_EXCEPTION", "NO_AVAILABLE_DELEGATES", "NO_GLOBAL_DELEGATE_ACCOUNT", "NO_INSTALLED_DELEGATES", "DUPLICATE_DELEGATE_EXCEPTION", "GCP_MARKETPLACE_EXCEPTION", "MISSING_DEFAULT_GOOGLE_CREDENTIALS", "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS", "OPTIMISTIC_LOCKING_EXCEPTION", "NG_PIPELINE_EXECUTION_EXCEPTION", "NG_PIPELINE_CREATE_EXCEPTION", "RESOURCE_NOT_FOUND_EXCEPTION", "PMS_INITIALIZE_SDK_EXCEPTION", "UNEXPECTED_SNIPPET_EXCEPTION", "UNEXPECTED_SCHEMA_EXCEPTION", "CONNECTOR_VALIDATION_EXCEPTION", "TIMESCALE_NOT_AVAILABLE", "MIGRATION_EXCEPTION", "REQUEST_PROCESSING_INTERRUPTED", "SECRET_MANAGER_ID_NOT_FOUND", "GCP_SECRET_MANAGER_OPERATION_ERROR", "GCP_SECRET_OPERATION_ERROR", "GIT_OPERATION_ERROR", "TASK_FAILURE_ERROR", "INSTANCE_STATS_PROCESS_ERROR", "INSTANCE_STATS_MIGRATION_ERROR", "DEPLOYMENT_MIGRATION_ERROR", "CG_LICENSE_USAGE_ERROR", "INSTANCE_STATS_AGGREGATION_ERROR", "UNRESOLVED_EXPRESSIONS_ERROR", "KRYO_HANDLER_NOT_FOUND_ERROR", "DELEGATE_ERROR_HANDLER_EXCEPTION", "DELEGATE_SERVICE_DRIVER_EXCEPTION", "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION", "UNEXPECTED_TYPE_ERROR", "EXCEPTION_HANDLER_NOT_FOUND", "CONNECTOR_NOT_FOUND_EXCEPTION", "GCP_SERVER_ERROR", "HTTP_RESPONSE_EXCEPTION", "SCM_NOT_FOUND_ERROR", "SCM_CONFLICT_ERROR", "SCM_CONFLICT_ERROR_V2", "SCM_UNPROCESSABLE_ENTITY", "PROCESS_EXECUTION_EXCEPTION", "SCM_UNAUTHORIZED", "SCM_BAD_REQUEST", "SCM_INTERNAL_SERVER_ERROR", "DATA", "CONTEXT", "PR_CREATION_ERROR", "URL_NOT_REACHABLE", "URL_NOT_PROVIDED", "ENGINE_EXPRESSION_EVALUATION_ERROR", "ENGINE_FUNCTOR_ERROR", "JIRA_CLIENT_ERROR", "SCM_NOT_MODIFIED", "APPROVAL_STEP_NG_ERROR", "BUCKET_SERVER_ERROR", "GIT_SYNC_ERROR", "TEMPLATE_EXCEPTION", "TEMPLATE_ALREADY_EXISTS_EXCEPTION", "ENTITY_REFERENCE_EXCEPTION", "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION", "INVALID_INPUT_SET", "INVALID_OVERLAY_INPUT_SET", "RESOURCE_ALREADY_EXISTS", "INVALID_JSON_PAYLOAD", "POLICY_EVALUATION_FAILURE", "POLICY_SET_ERROR", "INVALID_ARTIFACTORY_REGISTRY_REQUEST", "INVALID_NEXUS_REGISTRY_REQUEST", "ENTITY_NOT_FOUND", "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST", "AZURE_AUTHENTICATION_ERROR", "AZURE_CONFIG_ERROR", "DATA_PROCESSING_ERROR", "INVALID_AZURE_AKS_REQUEST", "AWS_IAM_ERROR", "AWS_CF_ERROR", "AWS_INSTANCE_ERROR", "AWS_VPC_ERROR", "AWS_TAG_ERROR", "AWS_ASG_ERROR", "AWS_LOAD_BALANCER_ERROR", "SCM_INTERNAL_SERVER_ERROR_V2", "SCM_FAILED_DEPENDENCY_ERROR", "SCM_UNAUTHORIZED_ERROR_V2", "TOO_MANY_REQUESTS", "INVALID_IDENTIFIER_REF", "SPOTINST_NULL_ERROR", "SPOTNIST_REST_EXCEPTION", "SCM_UNEXPECTED_ERROR", "DUPLICATE_FILE_IMPORT", "AZURE_APP_SERVICES_TASK_EXCEPTION", "AZURE_ARM_TASK_EXCEPTION", "AZURE_BP_TASK_EXCEPTION", "MEDIA_NOT_SUPPORTED", "AWS_ECS_ERROR", "AWS_APPLICATION_AUTO_SCALING", "AWS_ECS_SERVICE_NOT_ACTIVE", "AWS_ECS_CLIENT_ERROR", "AWS_STS_ERROR", "FREEZE_EXCEPTION", "MISSING_EXCEPTION", "DELEGATE_TASK_EXPIRED", "DELEGATE_TASK_VALIDATION_FAILED", "MONGO_EXECUTION_TIMEOUT_EXCEPTION", "DELEGATE_NOT_REGISTERED", "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE", "APPROVAL_REJECTION", "TERRAGRUNT_EXECUTION_ERROR", "ADFS_ERROR", "TERRAFORM_CLOUD_ERROR", "CLUSTER_CREDENTIALS_NOT_FOUND", "SCM_API_ERROR", "INTERNAL_SERVER_ERROR", "SCM_FORBIDDEN", "AWS_EKS_ERROR", "OPA_POLICY_EVALUATION_ERROR", "USER_MARKED_FAILURE", "SSH_RETRY", "HTTP_CLIENT_ERROR_RESPONSE", "HTTP_INTERNAL_SERVER_ERROR", "HTTP_BAD_GATEWAY", "HTTP_SERVICE_UNAVAILABLE", "HTTP_GATEWAY_TIMEOUT", "HTTP_SERVER_ERROR_RESPONSE", "PIPELINE_UPDATE_EXCEPTION", "SERVICENOW_REFRESH_TOKEN_ERROR", "PARAMETER_FIELD_CAST_ERROR", "ABORT_ALL_ALREADY_NG", "WEBHOOK_EXCEPTION", "INVALID_OIDC_CONFIGURATION", "INVALID_CREDENTIALS", "INVALID_OR_PRIVATE_REPO", "BARRIER_FAILED_ERROR", "ELASTICSEARCH_NOT_AVAILABLE", "OBJECT_STORE_NOT_AVAILABLE", "NO_ELIGIBLE_RUNNERS", "NO_AVAILABLE_RUNNERS" ]
        },
        "message" : {
          "type" : "string"
        },
        "correlationId" : {
          "type" : "string"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError" : {
      "type" : "object",
      "properties" : {
        "fieldId" : {
          "type" : "string"
        },
        "error" : {
          "type" : "string"
        }
      }
    },
    "CacheResponseMetadata" : {
      "type" : "object",
      "required" : [ "cacheState", "isSyncEnabled", "lastUpdatedAt", "ttlLeft" ],
      "properties" : {
        "cacheState" : {
          "type" : "string",
          "enum" : [ "VALID_CACHE", "STALE_CACHE", "UNKNOWN" ]
        },
        "ttlLeft" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "isSyncEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "ConnectorValidationErrorMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "taskId" : {
            "type" : "string"
          },
          "delegateId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EntityGitDetails" : {
      "type" : "object",
      "properties" : {
        "objectId" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "repoIdentifier" : {
          "type" : "string"
        },
        "rootFolder" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "fileUrl" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "parentEntityConnectorRef" : {
          "type" : "string"
        },
        "parentEntityRepoName" : {
          "type" : "string"
        },
        "isHarnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "EntityValidityDetails" : {
      "type" : "object",
      "properties" : {
        "valid" : {
          "type" : "boolean"
        },
        "invalidYaml" : {
          "type" : "string"
        }
      }
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "code" : {
          "type" : "string",
          "enum" : [ "DEFAULT_ERROR_CODE", "INVALID_ARGUMENT", "INVALID_EMAIL", "DOMAIN_NOT_ALLOWED_TO_REGISTER", "COMMNITY_EDITION_NOT_FOUND", "DEPLOY_MODE_IS_NOT_ON_PREM", "USER_ALREADY_REGISTERED", "USER_INVITATION_DOES_NOT_EXIST", "USER_DOES_NOT_EXIST", "USER_INVITE_OPERATION_FAILED", "USER_DISABLED", "ACCOUNT_DOES_NOT_EXIST", "INACTIVE_ACCOUNT", "ACCOUNT_MIGRATED", "ACCOUNT_MIGRATED_TO_NEXT_GEN", "USER_DOMAIN_NOT_ALLOWED", "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED", "RESOURCE_NOT_FOUND", "INVALID_FORMAT", "ROLE_DOES_NOT_EXIST", "EMAIL_NOT_VERIFIED", "EMAIL_VERIFICATION_TOKEN_NOT_FOUND", "INVALID_TOKEN", "REVOKED_TOKEN", "INVALID_CAPTCHA_TOKEN", "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS", "EXPIRED_TOKEN", "INVALID_AGENT_MTLS_AUTHORITY", "TOKEN_ALREADY_REFRESHED_ONCE", "ACCESS_DENIED", "NG_ACCESS_DENIED", "INVALID_CREDENTIAL", "INVALID_CREDENTIALS_THIRD_PARTY", "INVALID_KEY", "INVALID_CONNECTOR_TYPE", "INVALID_KEYPATH", "INVALID_VARIABLE", "UNKNOWN_HOST", "UNREACHABLE_HOST", "INVALID_PORT", "SSH_SESSION_TIMEOUT", "ALGORITHM_NEGOTIATION_ERROR", "SOCKET_CONNECTION_ERROR", "CONNECTION_ERROR", "SOCKET_CONNECTION_TIMEOUT", "WINRM_COMMAND_EXECUTION_TIMEOUT", "CONNECTION_TIMEOUT", "SSH_CONNECTION_ERROR", "USER_GROUP_ERROR", "INVALID_EXECUTION_ID", "ERROR_IN_GETTING_CHANNEL_STREAMS", "UNEXPECTED", "UNKNOWN_ERROR", "UNKNOWN_EXECUTOR_TYPE_ERROR", "DUPLICATE_STATE_NAMES", "TRANSITION_NOT_LINKED", "TRANSITION_TO_INCORRECT_STATE", "TRANSITION_TYPE_NULL", "STATES_WITH_DUP_TRANSITIONS", "BARRIERS_NOT_RUNNING_CONCURRENTLY", "NON_FORK_STATES", "NON_REPEAT_STATES", "INITIAL_STATE_NOT_DEFINED", "FILE_INTEGRITY_CHECK_FAILED", "INVALID_URL", "FILE_DOWNLOAD_FAILED", "PLATFORM_SOFTWARE_DELETE_ERROR", "INVALID_CSV_FILE", "INVALID_REQUEST", "SCHEMA_VALIDATION_FAILED", "FILTER_CREATION_ERROR", "INVALID_YAML_ERROR", "PLAN_CREATION_ERROR", "INVALID_INFRA_STATE", "PIPELINE_ALREADY_TRIGGERED", "NON_EXISTING_PIPELINE", "DUPLICATE_COMMAND_NAMES", "INVALID_PIPELINE", "COMMAND_DOES_NOT_EXIST", "DUPLICATE_ARTIFACTSTREAM_NAMES", "DUPLICATE_HOST_NAMES", "STATE_NOT_FOR_TYPE", "STATE_MACHINE_ISSUE", "STATE_DISCONTINUE_FAILED", "STATE_PAUSE_FAILED", "PAUSE_ALL_ALREADY", "RESUME_ALL_ALREADY", "ROLLBACK_ALREADY", "ABORT_ALL_ALREADY", "EXPIRE_ALL_ALREADY", "RETRY_FAILED", "UNKNOWN_ARTIFACT_TYPE", "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE", "INIT_TIMEOUT", "LICENSE_EXPIRED", "NOT_LICENSED", "REQUEST_TIMEOUT", "SCM_REQUEST_TIMEOUT", "WORKFLOW_ALREADY_TRIGGERED", "JENKINS_ERROR", "INVALID_ARTIFACT_SOURCE", "INVALID_ARTIFACT_SERVER", "INVALID_CLOUD_PROVIDER", "UPDATE_NOT_ALLOWED", "DELETE_NOT_ALLOWED", "APPDYNAMICS_CONFIGURATION_ERROR", "APM_CONFIGURATION_ERROR", "SPLUNK_CONFIGURATION_ERROR", "ELK_CONFIGURATION_ERROR", "LOGZ_CONFIGURATION_ERROR", "SUMO_CONFIGURATION_ERROR", "INSTANA_CONFIGURATION_ERROR", "APPDYNAMICS_ERROR", "STACKDRIVER_ERROR", "STACKDRIVER_CONFIGURATION_ERROR", "NEWRELIC_CONFIGURATION_ERROR", "NEWRELIC_ERROR", "DYNA_TRACE_CONFIGURATION_ERROR", "DYNA_TRACE_ERROR", "CLOUDWATCH_ERROR", "CLOUDWATCH_CONFIGURATION_ERROR", "PROMETHEUS_CONFIGURATION_ERROR", "DATA_DOG_CONFIGURATION_ERROR", "SERVICE_GUARD_CONFIGURATION_ERROR", "ENCRYPTION_NOT_CONFIGURED", "UNAVAILABLE_DELEGATES", "WORKFLOW_EXECUTION_IN_PROGRESS", "PIPELINE_EXECUTION_IN_PROGRESS", "AWS_ACCESS_DENIED", "AWS_CLUSTER_NOT_FOUND", "AWS_SERVICE_NOT_FOUND", "IMAGE_NOT_FOUND", "ILLEGAL_ARGUMENT", "IMAGE_TAG_NOT_FOUND", "DELEGATE_NOT_AVAILABLE", "INVALID_YAML_PAYLOAD", "AUTHENTICATION_ERROR", "AUTHORIZATION_ERROR", "UNRECOGNIZED_YAML_FIELDS", "COULD_NOT_MAP_BEFORE_YAML", "MISSING_BEFORE_YAML", "MISSING_YAML", "NON_EMPTY_DELETIONS", "GENERAL_YAML_ERROR", "GENERAL_YAML_INFO", "YAML_GIT_SYNC_ERROR", "GIT_CONNECTION_ERROR", "GIT_ERROR", "ARTIFACT_SERVER_ERROR", "ENCRYPT_DECRYPT_ERROR", "SECRET_MANAGEMENT_ERROR", "SECRET_NOT_FOUND", "KMS_OPERATION_ERROR", "GCP_KMS_OPERATION_ERROR", "VAULT_OPERATION_ERROR", "AWS_SECRETS_MANAGER_OPERATION_ERROR", "AZURE_KEY_VAULT_OPERATION_ERROR", "AZURE_KEY_VAULT_INTERRUPT_ERROR", "UNSUPPORTED_OPERATION_EXCEPTION", "FEATURE_UNAVAILABLE", "GENERAL_ERROR", "BASELINE_CONFIGURATION_ERROR", "SAML_IDP_CONFIGURATION_NOT_AVAILABLE", "INVALID_AUTHENTICATION_MECHANISM", "INVALID_SAML_CONFIGURATION", "INVALID_OAUTH_CONFIGURATION", "INVALID_LDAP_CONFIGURATION", "USER_GROUP_SYNC_FAILURE", "USER_GROUP_ALREADY_EXIST", "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION", "EXPLANATION", "HINT", "NOT_WHITELISTED_IP", "INVALID_TOTP_TOKEN", "EMAIL_FAILED", "SSL_HANDSHAKE_FAILED", "NO_APPS_ASSIGNED", "INVALID_INFRA_CONFIGURATION", "TEMPLATES_LINKED", "USER_HAS_NO_PERMISSIONS", "USER_NOT_AUTHORIZED", "USER_ALREADY_PRESENT", "EMAIL_ERROR", "INVALID_USAGE_RESTRICTION", "USAGE_RESTRICTION_ERROR", "STATE_EXECUTION_INSTANCE_NOT_FOUND", "DELEGATE_TASK_RETRY", "KUBERNETES_API_TASK_EXCEPTION", "KUBERNETES_TASK_EXCEPTION", "KUBERNETES_YAML_ERROR", "SAVE_FILE_INTO_GCP_STORAGE_FAILED", "READ_FILE_FROM_GCP_STORAGE_FAILED", "FILE_NOT_FOUND_ERROR", "USAGE_LIMITS_EXCEEDED", "EVENT_PUBLISH_FAILED", "CUSTOM_APPROVAL_ERROR", "JIRA_ERROR", "EXPRESSION_EVALUATION_FAILED", "KUBERNETES_VALUES_ERROR", "KUBERNETES_CLUSTER_ERROR", "INCORRECT_SIGN_IN_MECHANISM", "OAUTH_LOGIN_FAILED", "INVALID_TERRAFORM_TARGETS_REQUEST", "TERRAFORM_EXECUTION_ERROR", "FILE_READ_FAILED", "FILE_SIZE_EXCEEDS_LIMIT", "CLUSTER_NOT_FOUND", "MARKETPLACE_TOKEN_NOT_FOUND", "INVALID_MARKETPLACE_TOKEN", "INVALID_TICKETING_SERVER", "SERVICENOW_ERROR", "PASSWORD_EXPIRED", "USER_LOCKED", "PASSWORD_STRENGTH_CHECK_FAILED", "ACCOUNT_DISABLED", "INVALID_ACCOUNT_PERMISSION", "PAGERDUTY_ERROR", "HEALTH_ERROR", "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED", "DOMAIN_WHITELIST_FILTER_CHECK_FAILED", "INVALID_DASHBOARD_UPDATE_REQUEST", "DUPLICATE_FIELD", "INVALID_AZURE_VAULT_CONFIGURATION", "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS", "INVALID_ROLLBACK", "DATA_COLLECTION_ERROR", "SUMO_DATA_COLLECTION_ERROR", "DEPLOYMENT_GOVERNANCE_ERROR", "BATCH_PROCESSING_ERROR", "GRAPHQL_ERROR", "FILE_CREATE_ERROR", "ILLEGAL_STATE", "GIT_DIFF_COMMIT_NOT_IN_ORDER", "FAILED_TO_ACQUIRE_PERSISTENT_LOCK", "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK", "POD_NOT_FOUND_ERROR", "COMMAND_EXECUTION_ERROR", "REGISTRY_EXCEPTION", "ENGINE_INTERRUPT_PROCESSING_EXCEPTION", "ENGINE_IO_EXCEPTION", "ENGINE_OUTCOME_EXCEPTION", "ENGINE_SWEEPING_OUTPUT_EXCEPTION", "CACHE_NOT_FOUND_EXCEPTION", "ENGINE_ENTITY_UPDATE_EXCEPTION", "SHELL_EXECUTION_EXCEPTION", "TEMPLATE_NOT_FOUND", "AZURE_SERVICE_EXCEPTION", "AZURE_CLIENT_EXCEPTION", "GIT_UNSEEN_REMOTE_HEAD_COMMIT", "TIMEOUT_ENGINE_EXCEPTION", "NO_AVAILABLE_DELEGATES", "NO_GLOBAL_DELEGATE_ACCOUNT", "NO_INSTALLED_DELEGATES", "DUPLICATE_DELEGATE_EXCEPTION", "GCP_MARKETPLACE_EXCEPTION", "MISSING_DEFAULT_GOOGLE_CREDENTIALS", "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS", "OPTIMISTIC_LOCKING_EXCEPTION", "NG_PIPELINE_EXECUTION_EXCEPTION", "NG_PIPELINE_CREATE_EXCEPTION", "RESOURCE_NOT_FOUND_EXCEPTION", "PMS_INITIALIZE_SDK_EXCEPTION", "UNEXPECTED_SNIPPET_EXCEPTION", "UNEXPECTED_SCHEMA_EXCEPTION", "CONNECTOR_VALIDATION_EXCEPTION", "TIMESCALE_NOT_AVAILABLE", "MIGRATION_EXCEPTION", "REQUEST_PROCESSING_INTERRUPTED", "SECRET_MANAGER_ID_NOT_FOUND", "GCP_SECRET_MANAGER_OPERATION_ERROR", "GCP_SECRET_OPERATION_ERROR", "GIT_OPERATION_ERROR", "TASK_FAILURE_ERROR", "INSTANCE_STATS_PROCESS_ERROR", "INSTANCE_STATS_MIGRATION_ERROR", "DEPLOYMENT_MIGRATION_ERROR", "CG_LICENSE_USAGE_ERROR", "INSTANCE_STATS_AGGREGATION_ERROR", "UNRESOLVED_EXPRESSIONS_ERROR", "KRYO_HANDLER_NOT_FOUND_ERROR", "DELEGATE_ERROR_HANDLER_EXCEPTION", "DELEGATE_SERVICE_DRIVER_EXCEPTION", "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION", "UNEXPECTED_TYPE_ERROR", "EXCEPTION_HANDLER_NOT_FOUND", "CONNECTOR_NOT_FOUND_EXCEPTION", "GCP_SERVER_ERROR", "HTTP_RESPONSE_EXCEPTION", "SCM_NOT_FOUND_ERROR", "SCM_CONFLICT_ERROR", "SCM_CONFLICT_ERROR_V2", "SCM_UNPROCESSABLE_ENTITY", "PROCESS_EXECUTION_EXCEPTION", "SCM_UNAUTHORIZED", "SCM_BAD_REQUEST", "SCM_INTERNAL_SERVER_ERROR", "DATA", "CONTEXT", "PR_CREATION_ERROR", "URL_NOT_REACHABLE", "URL_NOT_PROVIDED", "ENGINE_EXPRESSION_EVALUATION_ERROR", "ENGINE_FUNCTOR_ERROR", "JIRA_CLIENT_ERROR", "SCM_NOT_MODIFIED", "APPROVAL_STEP_NG_ERROR", "BUCKET_SERVER_ERROR", "GIT_SYNC_ERROR", "TEMPLATE_EXCEPTION", "TEMPLATE_ALREADY_EXISTS_EXCEPTION", "ENTITY_REFERENCE_EXCEPTION", "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION", "INVALID_INPUT_SET", "INVALID_OVERLAY_INPUT_SET", "RESOURCE_ALREADY_EXISTS", "INVALID_JSON_PAYLOAD", "POLICY_EVALUATION_FAILURE", "POLICY_SET_ERROR", "INVALID_ARTIFACTORY_REGISTRY_REQUEST", "INVALID_NEXUS_REGISTRY_REQUEST", "ENTITY_NOT_FOUND", "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST", "AZURE_AUTHENTICATION_ERROR", "AZURE_CONFIG_ERROR", "DATA_PROCESSING_ERROR", "INVALID_AZURE_AKS_REQUEST", "AWS_IAM_ERROR", "AWS_CF_ERROR", "AWS_INSTANCE_ERROR", "AWS_VPC_ERROR", "AWS_TAG_ERROR", "AWS_ASG_ERROR", "AWS_LOAD_BALANCER_ERROR", "SCM_INTERNAL_SERVER_ERROR_V2", "SCM_FAILED_DEPENDENCY_ERROR", "SCM_UNAUTHORIZED_ERROR_V2", "TOO_MANY_REQUESTS", "INVALID_IDENTIFIER_REF", "SPOTINST_NULL_ERROR", "SPOTNIST_REST_EXCEPTION", "SCM_UNEXPECTED_ERROR", "DUPLICATE_FILE_IMPORT", "AZURE_APP_SERVICES_TASK_EXCEPTION", "AZURE_ARM_TASK_EXCEPTION", "AZURE_BP_TASK_EXCEPTION", "MEDIA_NOT_SUPPORTED", "AWS_ECS_ERROR", "AWS_APPLICATION_AUTO_SCALING", "AWS_ECS_SERVICE_NOT_ACTIVE", "AWS_ECS_CLIENT_ERROR", "AWS_STS_ERROR", "FREEZE_EXCEPTION", "MISSING_EXCEPTION", "DELEGATE_TASK_EXPIRED", "DELEGATE_TASK_VALIDATION_FAILED", "MONGO_EXECUTION_TIMEOUT_EXCEPTION", "DELEGATE_NOT_REGISTERED", "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE", "APPROVAL_REJECTION", "TERRAGRUNT_EXECUTION_ERROR", "ADFS_ERROR", "TERRAFORM_CLOUD_ERROR", "CLUSTER_CREDENTIALS_NOT_FOUND", "SCM_API_ERROR", "INTERNAL_SERVER_ERROR", "SCM_FORBIDDEN", "AWS_EKS_ERROR", "OPA_POLICY_EVALUATION_ERROR", "USER_MARKED_FAILURE", "SSH_RETRY", "HTTP_CLIENT_ERROR_RESPONSE", "HTTP_INTERNAL_SERVER_ERROR", "HTTP_BAD_GATEWAY", "HTTP_SERVICE_UNAVAILABLE", "HTTP_GATEWAY_TIMEOUT", "HTTP_SERVER_ERROR_RESPONSE", "PIPELINE_UPDATE_EXCEPTION", "SERVICENOW_REFRESH_TOKEN_ERROR", "PARAMETER_FIELD_CAST_ERROR", "ABORT_ALL_ALREADY_NG", "WEBHOOK_EXCEPTION", "INVALID_OIDC_CONFIGURATION", "INVALID_CREDENTIALS", "INVALID_OR_PRIVATE_REPO", "BARRIER_FAILED_ERROR", "ELASTICSEARCH_NOT_AVAILABLE", "OBJECT_STORE_NOT_AVAILABLE", "NO_ELIGIBLE_RUNNERS", "NO_AVAILABLE_RUNNERS" ]
        },
        "message" : {
          "type" : "string"
        },
        "correlationId" : {
          "type" : "string"
        },
        "detailedMessage" : {
          "type" : "string"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        },
        "metadata" : {
          "$ref" : "#/definitions/ErrorMetadataDTO"
        }
      }
    },
    "ErrorMetadata" : {
      "type" : "object",
      "properties" : {
        "errorCode" : {
          "type" : "string",
          "enum" : [ "DEFAULT_ERROR_CODE", "INVALID_ARGUMENT", "INVALID_EMAIL", "DOMAIN_NOT_ALLOWED_TO_REGISTER", "COMMNITY_EDITION_NOT_FOUND", "DEPLOY_MODE_IS_NOT_ON_PREM", "USER_ALREADY_REGISTERED", "USER_INVITATION_DOES_NOT_EXIST", "USER_DOES_NOT_EXIST", "USER_INVITE_OPERATION_FAILED", "USER_DISABLED", "ACCOUNT_DOES_NOT_EXIST", "INACTIVE_ACCOUNT", "ACCOUNT_MIGRATED", "ACCOUNT_MIGRATED_TO_NEXT_GEN", "USER_DOMAIN_NOT_ALLOWED", "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED", "RESOURCE_NOT_FOUND", "INVALID_FORMAT", "ROLE_DOES_NOT_EXIST", "EMAIL_NOT_VERIFIED", "EMAIL_VERIFICATION_TOKEN_NOT_FOUND", "INVALID_TOKEN", "REVOKED_TOKEN", "INVALID_CAPTCHA_TOKEN", "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS", "EXPIRED_TOKEN", "INVALID_AGENT_MTLS_AUTHORITY", "TOKEN_ALREADY_REFRESHED_ONCE", "ACCESS_DENIED", "NG_ACCESS_DENIED", "INVALID_CREDENTIAL", "INVALID_CREDENTIALS_THIRD_PARTY", "INVALID_KEY", "INVALID_CONNECTOR_TYPE", "INVALID_KEYPATH", "INVALID_VARIABLE", "UNKNOWN_HOST", "UNREACHABLE_HOST", "INVALID_PORT", "SSH_SESSION_TIMEOUT", "ALGORITHM_NEGOTIATION_ERROR", "SOCKET_CONNECTION_ERROR", "CONNECTION_ERROR", "SOCKET_CONNECTION_TIMEOUT", "WINRM_COMMAND_EXECUTION_TIMEOUT", "CONNECTION_TIMEOUT", "SSH_CONNECTION_ERROR", "USER_GROUP_ERROR", "INVALID_EXECUTION_ID", "ERROR_IN_GETTING_CHANNEL_STREAMS", "UNEXPECTED", "UNKNOWN_ERROR", "UNKNOWN_EXECUTOR_TYPE_ERROR", "DUPLICATE_STATE_NAMES", "TRANSITION_NOT_LINKED", "TRANSITION_TO_INCORRECT_STATE", "TRANSITION_TYPE_NULL", "STATES_WITH_DUP_TRANSITIONS", "BARRIERS_NOT_RUNNING_CONCURRENTLY", "NON_FORK_STATES", "NON_REPEAT_STATES", "INITIAL_STATE_NOT_DEFINED", "FILE_INTEGRITY_CHECK_FAILED", "INVALID_URL", "FILE_DOWNLOAD_FAILED", "PLATFORM_SOFTWARE_DELETE_ERROR", "INVALID_CSV_FILE", "INVALID_REQUEST", "SCHEMA_VALIDATION_FAILED", "FILTER_CREATION_ERROR", "INVALID_YAML_ERROR", "PLAN_CREATION_ERROR", "INVALID_INFRA_STATE", "PIPELINE_ALREADY_TRIGGERED", "NON_EXISTING_PIPELINE", "DUPLICATE_COMMAND_NAMES", "INVALID_PIPELINE", "COMMAND_DOES_NOT_EXIST", "DUPLICATE_ARTIFACTSTREAM_NAMES", "DUPLICATE_HOST_NAMES", "STATE_NOT_FOR_TYPE", "STATE_MACHINE_ISSUE", "STATE_DISCONTINUE_FAILED", "STATE_PAUSE_FAILED", "PAUSE_ALL_ALREADY", "RESUME_ALL_ALREADY", "ROLLBACK_ALREADY", "ABORT_ALL_ALREADY", "EXPIRE_ALL_ALREADY", "RETRY_FAILED", "UNKNOWN_ARTIFACT_TYPE", "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE", "INIT_TIMEOUT", "LICENSE_EXPIRED", "NOT_LICENSED", "REQUEST_TIMEOUT", "SCM_REQUEST_TIMEOUT", "WORKFLOW_ALREADY_TRIGGERED", "JENKINS_ERROR", "INVALID_ARTIFACT_SOURCE", "INVALID_ARTIFACT_SERVER", "INVALID_CLOUD_PROVIDER", "UPDATE_NOT_ALLOWED", "DELETE_NOT_ALLOWED", "APPDYNAMICS_CONFIGURATION_ERROR", "APM_CONFIGURATION_ERROR", "SPLUNK_CONFIGURATION_ERROR", "ELK_CONFIGURATION_ERROR", "LOGZ_CONFIGURATION_ERROR", "SUMO_CONFIGURATION_ERROR", "INSTANA_CONFIGURATION_ERROR", "APPDYNAMICS_ERROR", "STACKDRIVER_ERROR", "STACKDRIVER_CONFIGURATION_ERROR", "NEWRELIC_CONFIGURATION_ERROR", "NEWRELIC_ERROR", "DYNA_TRACE_CONFIGURATION_ERROR", "DYNA_TRACE_ERROR", "CLOUDWATCH_ERROR", "CLOUDWATCH_CONFIGURATION_ERROR", "PROMETHEUS_CONFIGURATION_ERROR", "DATA_DOG_CONFIGURATION_ERROR", "SERVICE_GUARD_CONFIGURATION_ERROR", "ENCRYPTION_NOT_CONFIGURED", "UNAVAILABLE_DELEGATES", "WORKFLOW_EXECUTION_IN_PROGRESS", "PIPELINE_EXECUTION_IN_PROGRESS", "AWS_ACCESS_DENIED", "AWS_CLUSTER_NOT_FOUND", "AWS_SERVICE_NOT_FOUND", "IMAGE_NOT_FOUND", "ILLEGAL_ARGUMENT", "IMAGE_TAG_NOT_FOUND", "DELEGATE_NOT_AVAILABLE", "INVALID_YAML_PAYLOAD", "AUTHENTICATION_ERROR", "AUTHORIZATION_ERROR", "UNRECOGNIZED_YAML_FIELDS", "COULD_NOT_MAP_BEFORE_YAML", "MISSING_BEFORE_YAML", "MISSING_YAML", "NON_EMPTY_DELETIONS", "GENERAL_YAML_ERROR", "GENERAL_YAML_INFO", "YAML_GIT_SYNC_ERROR", "GIT_CONNECTION_ERROR", "GIT_ERROR", "ARTIFACT_SERVER_ERROR", "ENCRYPT_DECRYPT_ERROR", "SECRET_MANAGEMENT_ERROR", "SECRET_NOT_FOUND", "KMS_OPERATION_ERROR", "GCP_KMS_OPERATION_ERROR", "VAULT_OPERATION_ERROR", "AWS_SECRETS_MANAGER_OPERATION_ERROR", "AZURE_KEY_VAULT_OPERATION_ERROR", "AZURE_KEY_VAULT_INTERRUPT_ERROR", "UNSUPPORTED_OPERATION_EXCEPTION", "FEATURE_UNAVAILABLE", "GENERAL_ERROR", "BASELINE_CONFIGURATION_ERROR", "SAML_IDP_CONFIGURATION_NOT_AVAILABLE", "INVALID_AUTHENTICATION_MECHANISM", "INVALID_SAML_CONFIGURATION", "INVALID_OAUTH_CONFIGURATION", "INVALID_LDAP_CONFIGURATION", "USER_GROUP_SYNC_FAILURE", "USER_GROUP_ALREADY_EXIST", "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION", "EXPLANATION", "HINT", "NOT_WHITELISTED_IP", "INVALID_TOTP_TOKEN", "EMAIL_FAILED", "SSL_HANDSHAKE_FAILED", "NO_APPS_ASSIGNED", "INVALID_INFRA_CONFIGURATION", "TEMPLATES_LINKED", "USER_HAS_NO_PERMISSIONS", "USER_NOT_AUTHORIZED", "USER_ALREADY_PRESENT", "EMAIL_ERROR", "INVALID_USAGE_RESTRICTION", "USAGE_RESTRICTION_ERROR", "STATE_EXECUTION_INSTANCE_NOT_FOUND", "DELEGATE_TASK_RETRY", "KUBERNETES_API_TASK_EXCEPTION", "KUBERNETES_TASK_EXCEPTION", "KUBERNETES_YAML_ERROR", "SAVE_FILE_INTO_GCP_STORAGE_FAILED", "READ_FILE_FROM_GCP_STORAGE_FAILED", "FILE_NOT_FOUND_ERROR", "USAGE_LIMITS_EXCEEDED", "EVENT_PUBLISH_FAILED", "CUSTOM_APPROVAL_ERROR", "JIRA_ERROR", "EXPRESSION_EVALUATION_FAILED", "KUBERNETES_VALUES_ERROR", "KUBERNETES_CLUSTER_ERROR", "INCORRECT_SIGN_IN_MECHANISM", "OAUTH_LOGIN_FAILED", "INVALID_TERRAFORM_TARGETS_REQUEST", "TERRAFORM_EXECUTION_ERROR", "FILE_READ_FAILED", "FILE_SIZE_EXCEEDS_LIMIT", "CLUSTER_NOT_FOUND", "MARKETPLACE_TOKEN_NOT_FOUND", "INVALID_MARKETPLACE_TOKEN", "INVALID_TICKETING_SERVER", "SERVICENOW_ERROR", "PASSWORD_EXPIRED", "USER_LOCKED", "PASSWORD_STRENGTH_CHECK_FAILED", "ACCOUNT_DISABLED", "INVALID_ACCOUNT_PERMISSION", "PAGERDUTY_ERROR", "HEALTH_ERROR", "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED", "DOMAIN_WHITELIST_FILTER_CHECK_FAILED", "INVALID_DASHBOARD_UPDATE_REQUEST", "DUPLICATE_FIELD", "INVALID_AZURE_VAULT_CONFIGURATION", "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS", "INVALID_ROLLBACK", "DATA_COLLECTION_ERROR", "SUMO_DATA_COLLECTION_ERROR", "DEPLOYMENT_GOVERNANCE_ERROR", "BATCH_PROCESSING_ERROR", "GRAPHQL_ERROR", "FILE_CREATE_ERROR", "ILLEGAL_STATE", "GIT_DIFF_COMMIT_NOT_IN_ORDER", "FAILED_TO_ACQUIRE_PERSISTENT_LOCK", "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK", "POD_NOT_FOUND_ERROR", "COMMAND_EXECUTION_ERROR", "REGISTRY_EXCEPTION", "ENGINE_INTERRUPT_PROCESSING_EXCEPTION", "ENGINE_IO_EXCEPTION", "ENGINE_OUTCOME_EXCEPTION", "ENGINE_SWEEPING_OUTPUT_EXCEPTION", "CACHE_NOT_FOUND_EXCEPTION", "ENGINE_ENTITY_UPDATE_EXCEPTION", "SHELL_EXECUTION_EXCEPTION", "TEMPLATE_NOT_FOUND", "AZURE_SERVICE_EXCEPTION", "AZURE_CLIENT_EXCEPTION", "GIT_UNSEEN_REMOTE_HEAD_COMMIT", "TIMEOUT_ENGINE_EXCEPTION", "NO_AVAILABLE_DELEGATES", "NO_GLOBAL_DELEGATE_ACCOUNT", "NO_INSTALLED_DELEGATES", "DUPLICATE_DELEGATE_EXCEPTION", "GCP_MARKETPLACE_EXCEPTION", "MISSING_DEFAULT_GOOGLE_CREDENTIALS", "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS", "OPTIMISTIC_LOCKING_EXCEPTION", "NG_PIPELINE_EXECUTION_EXCEPTION", "NG_PIPELINE_CREATE_EXCEPTION", "RESOURCE_NOT_FOUND_EXCEPTION", "PMS_INITIALIZE_SDK_EXCEPTION", "UNEXPECTED_SNIPPET_EXCEPTION", "UNEXPECTED_SCHEMA_EXCEPTION", "CONNECTOR_VALIDATION_EXCEPTION", "TIMESCALE_NOT_AVAILABLE", "MIGRATION_EXCEPTION", "REQUEST_PROCESSING_INTERRUPTED", "SECRET_MANAGER_ID_NOT_FOUND", "GCP_SECRET_MANAGER_OPERATION_ERROR", "GCP_SECRET_OPERATION_ERROR", "GIT_OPERATION_ERROR", "TASK_FAILURE_ERROR", "INSTANCE_STATS_PROCESS_ERROR", "INSTANCE_STATS_MIGRATION_ERROR", "DEPLOYMENT_MIGRATION_ERROR", "CG_LICENSE_USAGE_ERROR", "INSTANCE_STATS_AGGREGATION_ERROR", "UNRESOLVED_EXPRESSIONS_ERROR", "KRYO_HANDLER_NOT_FOUND_ERROR", "DELEGATE_ERROR_HANDLER_EXCEPTION", "DELEGATE_SERVICE_DRIVER_EXCEPTION", "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION", "UNEXPECTED_TYPE_ERROR", "EXCEPTION_HANDLER_NOT_FOUND", "CONNECTOR_NOT_FOUND_EXCEPTION", "GCP_SERVER_ERROR", "HTTP_RESPONSE_EXCEPTION", "SCM_NOT_FOUND_ERROR", "SCM_CONFLICT_ERROR", "SCM_CONFLICT_ERROR_V2", "SCM_UNPROCESSABLE_ENTITY", "PROCESS_EXECUTION_EXCEPTION", "SCM_UNAUTHORIZED", "SCM_BAD_REQUEST", "SCM_INTERNAL_SERVER_ERROR", "DATA", "CONTEXT", "PR_CREATION_ERROR", "URL_NOT_REACHABLE", "URL_NOT_PROVIDED", "ENGINE_EXPRESSION_EVALUATION_ERROR", "ENGINE_FUNCTOR_ERROR", "JIRA_CLIENT_ERROR", "SCM_NOT_MODIFIED", "APPROVAL_STEP_NG_ERROR", "BUCKET_SERVER_ERROR", "GIT_SYNC_ERROR", "TEMPLATE_EXCEPTION", "TEMPLATE_ALREADY_EXISTS_EXCEPTION", "ENTITY_REFERENCE_EXCEPTION", "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION", "INVALID_INPUT_SET", "INVALID_OVERLAY_INPUT_SET", "RESOURCE_ALREADY_EXISTS", "INVALID_JSON_PAYLOAD", "POLICY_EVALUATION_FAILURE", "POLICY_SET_ERROR", "INVALID_ARTIFACTORY_REGISTRY_REQUEST", "INVALID_NEXUS_REGISTRY_REQUEST", "ENTITY_NOT_FOUND", "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST", "AZURE_AUTHENTICATION_ERROR", "AZURE_CONFIG_ERROR", "DATA_PROCESSING_ERROR", "INVALID_AZURE_AKS_REQUEST", "AWS_IAM_ERROR", "AWS_CF_ERROR", "AWS_INSTANCE_ERROR", "AWS_VPC_ERROR", "AWS_TAG_ERROR", "AWS_ASG_ERROR", "AWS_LOAD_BALANCER_ERROR", "SCM_INTERNAL_SERVER_ERROR_V2", "SCM_FAILED_DEPENDENCY_ERROR", "SCM_UNAUTHORIZED_ERROR_V2", "TOO_MANY_REQUESTS", "INVALID_IDENTIFIER_REF", "SPOTINST_NULL_ERROR", "SPOTNIST_REST_EXCEPTION", "SCM_UNEXPECTED_ERROR", "DUPLICATE_FILE_IMPORT", "AZURE_APP_SERVICES_TASK_EXCEPTION", "AZURE_ARM_TASK_EXCEPTION", "AZURE_BP_TASK_EXCEPTION", "MEDIA_NOT_SUPPORTED", "AWS_ECS_ERROR", "AWS_APPLICATION_AUTO_SCALING", "AWS_ECS_SERVICE_NOT_ACTIVE", "AWS_ECS_CLIENT_ERROR", "AWS_STS_ERROR", "FREEZE_EXCEPTION", "MISSING_EXCEPTION", "DELEGATE_TASK_EXPIRED", "DELEGATE_TASK_VALIDATION_FAILED", "MONGO_EXECUTION_TIMEOUT_EXCEPTION", "DELEGATE_NOT_REGISTERED", "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE", "APPROVAL_REJECTION", "TERRAGRUNT_EXECUTION_ERROR", "ADFS_ERROR", "TERRAFORM_CLOUD_ERROR", "CLUSTER_CREDENTIALS_NOT_FOUND", "SCM_API_ERROR", "INTERNAL_SERVER_ERROR", "SCM_FORBIDDEN", "AWS_EKS_ERROR", "OPA_POLICY_EVALUATION_ERROR", "USER_MARKED_FAILURE", "SSH_RETRY", "HTTP_CLIENT_ERROR_RESPONSE", "HTTP_INTERNAL_SERVER_ERROR", "HTTP_BAD_GATEWAY", "HTTP_SERVICE_UNAVAILABLE", "HTTP_GATEWAY_TIMEOUT", "HTTP_SERVER_ERROR_RESPONSE", "PIPELINE_UPDATE_EXCEPTION", "SERVICENOW_REFRESH_TOKEN_ERROR", "PARAMETER_FIELD_CAST_ERROR", "ABORT_ALL_ALREADY_NG", "WEBHOOK_EXCEPTION", "INVALID_OIDC_CONFIGURATION", "INVALID_CREDENTIALS", "INVALID_OR_PRIVATE_REPO", "BARRIER_FAILED_ERROR", "ELASTICSEARCH_NOT_AVAILABLE", "OBJECT_STORE_NOT_AVAILABLE", "NO_ELIGIBLE_RUNNERS", "NO_AVAILABLE_RUNNERS" ]
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "ErrorMetadataDTO" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "ErrorNodeSummary" : {
      "type" : "object",
      "properties" : {
        "nodeInfo" : {
          "$ref" : "#/definitions/NodeInfo"
        },
        "templateInfo" : {
          "$ref" : "#/definitions/TemplateInfo"
        },
        "templateResponse" : {
          "$ref" : "#/definitions/TemplateResponse"
        },
        "childrenErrorNodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorNodeSummary"
          }
        }
      }
    },
    "FilterCreatorErrorResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "errorMetadataList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ErrorMetadata"
            }
          }
        }
      } ]
    },
    "GitErrorMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "branch" : {
            "type" : "string"
          },
          "repo" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GovernanceMetadata" : {
      "type" : "object"
    },
    "GovernanceMetadataErrorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "governanceMetadata" : {
            "$ref" : "#/definitions/GovernanceMetadata"
          }
        }
      } ]
    },
    "InputSetError" : {
      "type" : "object",
      "properties" : {
        "fieldName" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "identifierOfErrorSource" : {
          "type" : "string"
        }
      }
    },
    "InputSetErrorResponse" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InputSetError"
          }
        }
      }
    },
    "InputSetErrorWrapper" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "errorPipelineYaml" : {
            "type" : "string"
          },
          "uuidToErrorResponseMap" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/InputSetErrorResponse"
            }
          },
          "invalidInputSetReferences" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "InvalidFieldsDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "NodeErrorInfo" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "fqn" : {
          "type" : "string"
        }
      }
    },
    "NodeInfo" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "localFqn" : {
          "type" : "string"
        }
      }
    },
    "OverlayInputSetErrorWrapper" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "invalidReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ResponseMessage" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "enum" : [ "DEFAULT_ERROR_CODE", "INVALID_ARGUMENT", "INVALID_EMAIL", "DOMAIN_NOT_ALLOWED_TO_REGISTER", "COMMNITY_EDITION_NOT_FOUND", "DEPLOY_MODE_IS_NOT_ON_PREM", "USER_ALREADY_REGISTERED", "USER_INVITATION_DOES_NOT_EXIST", "USER_DOES_NOT_EXIST", "USER_INVITE_OPERATION_FAILED", "USER_DISABLED", "ACCOUNT_DOES_NOT_EXIST", "INACTIVE_ACCOUNT", "ACCOUNT_MIGRATED", "ACCOUNT_MIGRATED_TO_NEXT_GEN", "USER_DOMAIN_NOT_ALLOWED", "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED", "RESOURCE_NOT_FOUND", "INVALID_FORMAT", "ROLE_DOES_NOT_EXIST", "EMAIL_NOT_VERIFIED", "EMAIL_VERIFICATION_TOKEN_NOT_FOUND", "INVALID_TOKEN", "REVOKED_TOKEN", "INVALID_CAPTCHA_TOKEN", "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS", "EXPIRED_TOKEN", "INVALID_AGENT_MTLS_AUTHORITY", "TOKEN_ALREADY_REFRESHED_ONCE", "ACCESS_DENIED", "NG_ACCESS_DENIED", "INVALID_CREDENTIAL", "INVALID_CREDENTIALS_THIRD_PARTY", "INVALID_KEY", "INVALID_CONNECTOR_TYPE", "INVALID_KEYPATH", "INVALID_VARIABLE", "UNKNOWN_HOST", "UNREACHABLE_HOST", "INVALID_PORT", "SSH_SESSION_TIMEOUT", "ALGORITHM_NEGOTIATION_ERROR", "SOCKET_CONNECTION_ERROR", "CONNECTION_ERROR", "SOCKET_CONNECTION_TIMEOUT", "WINRM_COMMAND_EXECUTION_TIMEOUT", "CONNECTION_TIMEOUT", "SSH_CONNECTION_ERROR", "USER_GROUP_ERROR", "INVALID_EXECUTION_ID", "ERROR_IN_GETTING_CHANNEL_STREAMS", "UNEXPECTED", "UNKNOWN_ERROR", "UNKNOWN_EXECUTOR_TYPE_ERROR", "DUPLICATE_STATE_NAMES", "TRANSITION_NOT_LINKED", "TRANSITION_TO_INCORRECT_STATE", "TRANSITION_TYPE_NULL", "STATES_WITH_DUP_TRANSITIONS", "BARRIERS_NOT_RUNNING_CONCURRENTLY", "NON_FORK_STATES", "NON_REPEAT_STATES", "INITIAL_STATE_NOT_DEFINED", "FILE_INTEGRITY_CHECK_FAILED", "INVALID_URL", "FILE_DOWNLOAD_FAILED", "PLATFORM_SOFTWARE_DELETE_ERROR", "INVALID_CSV_FILE", "INVALID_REQUEST", "SCHEMA_VALIDATION_FAILED", "FILTER_CREATION_ERROR", "INVALID_YAML_ERROR", "PLAN_CREATION_ERROR", "INVALID_INFRA_STATE", "PIPELINE_ALREADY_TRIGGERED", "NON_EXISTING_PIPELINE", "DUPLICATE_COMMAND_NAMES", "INVALID_PIPELINE", "COMMAND_DOES_NOT_EXIST", "DUPLICATE_ARTIFACTSTREAM_NAMES", "DUPLICATE_HOST_NAMES", "STATE_NOT_FOR_TYPE", "STATE_MACHINE_ISSUE", "STATE_DISCONTINUE_FAILED", "STATE_PAUSE_FAILED", "PAUSE_ALL_ALREADY", "RESUME_ALL_ALREADY", "ROLLBACK_ALREADY", "ABORT_ALL_ALREADY", "EXPIRE_ALL_ALREADY", "RETRY_FAILED", "UNKNOWN_ARTIFACT_TYPE", "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE", "INIT_TIMEOUT", "LICENSE_EXPIRED", "NOT_LICENSED", "REQUEST_TIMEOUT", "SCM_REQUEST_TIMEOUT", "WORKFLOW_ALREADY_TRIGGERED", "JENKINS_ERROR", "INVALID_ARTIFACT_SOURCE", "INVALID_ARTIFACT_SERVER", "INVALID_CLOUD_PROVIDER", "UPDATE_NOT_ALLOWED", "DELETE_NOT_ALLOWED", "APPDYNAMICS_CONFIGURATION_ERROR", "APM_CONFIGURATION_ERROR", "SPLUNK_CONFIGURATION_ERROR", "ELK_CONFIGURATION_ERROR", "LOGZ_CONFIGURATION_ERROR", "SUMO_CONFIGURATION_ERROR", "INSTANA_CONFIGURATION_ERROR", "APPDYNAMICS_ERROR", "STACKDRIVER_ERROR", "STACKDRIVER_CONFIGURATION_ERROR", "NEWRELIC_CONFIGURATION_ERROR", "NEWRELIC_ERROR", "DYNA_TRACE_CONFIGURATION_ERROR", "DYNA_TRACE_ERROR", "CLOUDWATCH_ERROR", "CLOUDWATCH_CONFIGURATION_ERROR", "PROMETHEUS_CONFIGURATION_ERROR", "DATA_DOG_CONFIGURATION_ERROR", "SERVICE_GUARD_CONFIGURATION_ERROR", "ENCRYPTION_NOT_CONFIGURED", "UNAVAILABLE_DELEGATES", "WORKFLOW_EXECUTION_IN_PROGRESS", "PIPELINE_EXECUTION_IN_PROGRESS", "AWS_ACCESS_DENIED", "AWS_CLUSTER_NOT_FOUND", "AWS_SERVICE_NOT_FOUND", "IMAGE_NOT_FOUND", "ILLEGAL_ARGUMENT", "IMAGE_TAG_NOT_FOUND", "DELEGATE_NOT_AVAILABLE", "INVALID_YAML_PAYLOAD", "AUTHENTICATION_ERROR", "AUTHORIZATION_ERROR", "UNRECOGNIZED_YAML_FIELDS", "COULD_NOT_MAP_BEFORE_YAML", "MISSING_BEFORE_YAML", "MISSING_YAML", "NON_EMPTY_DELETIONS", "GENERAL_YAML_ERROR", "GENERAL_YAML_INFO", "YAML_GIT_SYNC_ERROR", "GIT_CONNECTION_ERROR", "GIT_ERROR", "ARTIFACT_SERVER_ERROR", "ENCRYPT_DECRYPT_ERROR", "SECRET_MANAGEMENT_ERROR", "SECRET_NOT_FOUND", "KMS_OPERATION_ERROR", "GCP_KMS_OPERATION_ERROR", "VAULT_OPERATION_ERROR", "AWS_SECRETS_MANAGER_OPERATION_ERROR", "AZURE_KEY_VAULT_OPERATION_ERROR", "AZURE_KEY_VAULT_INTERRUPT_ERROR", "UNSUPPORTED_OPERATION_EXCEPTION", "FEATURE_UNAVAILABLE", "GENERAL_ERROR", "BASELINE_CONFIGURATION_ERROR", "SAML_IDP_CONFIGURATION_NOT_AVAILABLE", "INVALID_AUTHENTICATION_MECHANISM", "INVALID_SAML_CONFIGURATION", "INVALID_OAUTH_CONFIGURATION", "INVALID_LDAP_CONFIGURATION", "USER_GROUP_SYNC_FAILURE", "USER_GROUP_ALREADY_EXIST", "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION", "EXPLANATION", "HINT", "NOT_WHITELISTED_IP", "INVALID_TOTP_TOKEN", "EMAIL_FAILED", "SSL_HANDSHAKE_FAILED", "NO_APPS_ASSIGNED", "INVALID_INFRA_CONFIGURATION", "TEMPLATES_LINKED", "USER_HAS_NO_PERMISSIONS", "USER_NOT_AUTHORIZED", "USER_ALREADY_PRESENT", "EMAIL_ERROR", "INVALID_USAGE_RESTRICTION", "USAGE_RESTRICTION_ERROR", "STATE_EXECUTION_INSTANCE_NOT_FOUND", "DELEGATE_TASK_RETRY", "KUBERNETES_API_TASK_EXCEPTION", "KUBERNETES_TASK_EXCEPTION", "KUBERNETES_YAML_ERROR", "SAVE_FILE_INTO_GCP_STORAGE_FAILED", "READ_FILE_FROM_GCP_STORAGE_FAILED", "FILE_NOT_FOUND_ERROR", "USAGE_LIMITS_EXCEEDED", "EVENT_PUBLISH_FAILED", "CUSTOM_APPROVAL_ERROR", "JIRA_ERROR", "EXPRESSION_EVALUATION_FAILED", "KUBERNETES_VALUES_ERROR", "KUBERNETES_CLUSTER_ERROR", "INCORRECT_SIGN_IN_MECHANISM", "OAUTH_LOGIN_FAILED", "INVALID_TERRAFORM_TARGETS_REQUEST", "TERRAFORM_EXECUTION_ERROR", "FILE_READ_FAILED", "FILE_SIZE_EXCEEDS_LIMIT", "CLUSTER_NOT_FOUND", "MARKETPLACE_TOKEN_NOT_FOUND", "INVALID_MARKETPLACE_TOKEN", "INVALID_TICKETING_SERVER", "SERVICENOW_ERROR", "PASSWORD_EXPIRED", "USER_LOCKED", "PASSWORD_STRENGTH_CHECK_FAILED", "ACCOUNT_DISABLED", "INVALID_ACCOUNT_PERMISSION", "PAGERDUTY_ERROR", "HEALTH_ERROR", "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED", "DOMAIN_WHITELIST_FILTER_CHECK_FAILED", "INVALID_DASHBOARD_UPDATE_REQUEST", "DUPLICATE_FIELD", "INVALID_AZURE_VAULT_CONFIGURATION", "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS", "INVALID_ROLLBACK", "DATA_COLLECTION_ERROR", "SUMO_DATA_COLLECTION_ERROR", "DEPLOYMENT_GOVERNANCE_ERROR", "BATCH_PROCESSING_ERROR", "GRAPHQL_ERROR", "FILE_CREATE_ERROR", "ILLEGAL_STATE", "GIT_DIFF_COMMIT_NOT_IN_ORDER", "FAILED_TO_ACQUIRE_PERSISTENT_LOCK", "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK", "POD_NOT_FOUND_ERROR", "COMMAND_EXECUTION_ERROR", "REGISTRY_EXCEPTION", "ENGINE_INTERRUPT_PROCESSING_EXCEPTION", "ENGINE_IO_EXCEPTION", "ENGINE_OUTCOME_EXCEPTION", "ENGINE_SWEEPING_OUTPUT_EXCEPTION", "CACHE_NOT_FOUND_EXCEPTION", "ENGINE_ENTITY_UPDATE_EXCEPTION", "SHELL_EXECUTION_EXCEPTION", "TEMPLATE_NOT_FOUND", "AZURE_SERVICE_EXCEPTION", "AZURE_CLIENT_EXCEPTION", "GIT_UNSEEN_REMOTE_HEAD_COMMIT", "TIMEOUT_ENGINE_EXCEPTION", "NO_AVAILABLE_DELEGATES", "NO_GLOBAL_DELEGATE_ACCOUNT", "NO_INSTALLED_DELEGATES", "DUPLICATE_DELEGATE_EXCEPTION", "GCP_MARKETPLACE_EXCEPTION", "MISSING_DEFAULT_GOOGLE_CREDENTIALS", "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS", "OPTIMISTIC_LOCKING_EXCEPTION", "NG_PIPELINE_EXECUTION_EXCEPTION", "NG_PIPELINE_CREATE_EXCEPTION", "RESOURCE_NOT_FOUND_EXCEPTION", "PMS_INITIALIZE_SDK_EXCEPTION", "UNEXPECTED_SNIPPET_EXCEPTION", "UNEXPECTED_SCHEMA_EXCEPTION", "CONNECTOR_VALIDATION_EXCEPTION", "TIMESCALE_NOT_AVAILABLE", "MIGRATION_EXCEPTION", "REQUEST_PROCESSING_INTERRUPTED", "SECRET_MANAGER_ID_NOT_FOUND", "GCP_SECRET_MANAGER_OPERATION_ERROR", "GCP_SECRET_OPERATION_ERROR", "GIT_OPERATION_ERROR", "TASK_FAILURE_ERROR", "INSTANCE_STATS_PROCESS_ERROR", "INSTANCE_STATS_MIGRATION_ERROR", "DEPLOYMENT_MIGRATION_ERROR", "CG_LICENSE_USAGE_ERROR", "INSTANCE_STATS_AGGREGATION_ERROR", "UNRESOLVED_EXPRESSIONS_ERROR", "KRYO_HANDLER_NOT_FOUND_ERROR", "DELEGATE_ERROR_HANDLER_EXCEPTION", "DELEGATE_SERVICE_DRIVER_EXCEPTION", "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION", "UNEXPECTED_TYPE_ERROR", "EXCEPTION_HANDLER_NOT_FOUND", "CONNECTOR_NOT_FOUND_EXCEPTION", "GCP_SERVER_ERROR", "HTTP_RESPONSE_EXCEPTION", "SCM_NOT_FOUND_ERROR", "SCM_CONFLICT_ERROR", "SCM_CONFLICT_ERROR_V2", "SCM_UNPROCESSABLE_ENTITY", "PROCESS_EXECUTION_EXCEPTION", "SCM_UNAUTHORIZED", "SCM_BAD_REQUEST", "SCM_INTERNAL_SERVER_ERROR", "DATA", "CONTEXT", "PR_CREATION_ERROR", "URL_NOT_REACHABLE", "URL_NOT_PROVIDED", "ENGINE_EXPRESSION_EVALUATION_ERROR", "ENGINE_FUNCTOR_ERROR", "JIRA_CLIENT_ERROR", "SCM_NOT_MODIFIED", "APPROVAL_STEP_NG_ERROR", "BUCKET_SERVER_ERROR", "GIT_SYNC_ERROR", "TEMPLATE_EXCEPTION", "TEMPLATE_ALREADY_EXISTS_EXCEPTION", "ENTITY_REFERENCE_EXCEPTION", "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION", "INVALID_INPUT_SET", "INVALID_OVERLAY_INPUT_SET", "RESOURCE_ALREADY_EXISTS", "INVALID_JSON_PAYLOAD", "POLICY_EVALUATION_FAILURE", "POLICY_SET_ERROR", "INVALID_ARTIFACTORY_REGISTRY_REQUEST", "INVALID_NEXUS_REGISTRY_REQUEST", "ENTITY_NOT_FOUND", "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST", "AZURE_AUTHENTICATION_ERROR", "AZURE_CONFIG_ERROR", "DATA_PROCESSING_ERROR", "INVALID_AZURE_AKS_REQUEST", "AWS_IAM_ERROR", "AWS_CF_ERROR", "AWS_INSTANCE_ERROR", "AWS_VPC_ERROR", "AWS_TAG_ERROR", "AWS_ASG_ERROR", "AWS_LOAD_BALANCER_ERROR", "SCM_INTERNAL_SERVER_ERROR_V2", "SCM_FAILED_DEPENDENCY_ERROR", "SCM_UNAUTHORIZED_ERROR_V2", "TOO_MANY_REQUESTS", "INVALID_IDENTIFIER_REF", "SPOTINST_NULL_ERROR", "SPOTNIST_REST_EXCEPTION", "SCM_UNEXPECTED_ERROR", "DUPLICATE_FILE_IMPORT", "AZURE_APP_SERVICES_TASK_EXCEPTION", "AZURE_ARM_TASK_EXCEPTION", "AZURE_BP_TASK_EXCEPTION", "MEDIA_NOT_SUPPORTED", "AWS_ECS_ERROR", "AWS_APPLICATION_AUTO_SCALING", "AWS_ECS_SERVICE_NOT_ACTIVE", "AWS_ECS_CLIENT_ERROR", "AWS_STS_ERROR", "FREEZE_EXCEPTION", "MISSING_EXCEPTION", "DELEGATE_TASK_EXPIRED", "DELEGATE_TASK_VALIDATION_FAILED", "MONGO_EXECUTION_TIMEOUT_EXCEPTION", "DELEGATE_NOT_REGISTERED", "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE", "APPROVAL_REJECTION", "TERRAGRUNT_EXECUTION_ERROR", "ADFS_ERROR", "TERRAFORM_CLOUD_ERROR", "CLUSTER_CREDENTIALS_NOT_FOUND", "SCM_API_ERROR", "INTERNAL_SERVER_ERROR", "SCM_FORBIDDEN", "AWS_EKS_ERROR", "OPA_POLICY_EVALUATION_ERROR", "USER_MARKED_FAILURE", "SSH_RETRY", "HTTP_CLIENT_ERROR_RESPONSE", "HTTP_INTERNAL_SERVER_ERROR", "HTTP_BAD_GATEWAY", "HTTP_SERVICE_UNAVAILABLE", "HTTP_GATEWAY_TIMEOUT", "HTTP_SERVER_ERROR_RESPONSE", "PIPELINE_UPDATE_EXCEPTION", "SERVICENOW_REFRESH_TOKEN_ERROR", "PARAMETER_FIELD_CAST_ERROR", "ABORT_ALL_ALREADY_NG", "WEBHOOK_EXCEPTION", "INVALID_OIDC_CONFIGURATION", "INVALID_CREDENTIALS", "INVALID_OR_PRIVATE_REPO", "BARRIER_FAILED_ERROR", "ELASTICSEARCH_NOT_AVAILABLE", "OBJECT_STORE_NOT_AVAILABLE", "NO_ELIGIBLE_RUNNERS", "NO_AVAILABLE_RUNNERS" ]
        },
        "level" : {
          "type" : "string",
          "enum" : [ "INFO", "ERROR" ]
        },
        "message" : {
          "type" : "string"
        },
        "exception" : {
          "$ref" : "#/definitions/Throwable"
        },
        "failureTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "EXPIRED", "DELEGATE_PROVISIONING", "CONNECTIVITY", "AUTHENTICATION", "VERIFICATION_FAILURE", "APPLICATION_ERROR", "AUTHORIZATION_ERROR", "TIMEOUT_ERROR", "POLICY_EVALUATION_FAILURE", "INPUT_TIMEOUT_FAILURE", "APPROVAL_REJECTION", "DELEGATE_RESTART", "USER_MARKED_FAILURE" ]
          }
        },
        "additionalInfo" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "SampleErrorMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "sampleMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ScmErrorMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "conflictCommitId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "StackTraceElement" : {
      "type" : "object",
      "properties" : {
        "classLoaderName" : {
          "type" : "string"
        },
        "moduleName" : {
          "type" : "string"
        },
        "moduleVersion" : {
          "type" : "string"
        },
        "methodName" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        },
        "lineNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "nativeMethod" : {
          "type" : "boolean"
        },
        "className" : {
          "type" : "string"
        }
      }
    },
    "TemplateInfo" : {
      "type" : "object",
      "properties" : {
        "templateIdentifier" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string"
        },
        "templateEntityType" : {
          "type" : "string",
          "enum" : [ "Step", "Stage", "Pipeline", "CustomDeployment", "MonitoredService", "SecretManager", "ArtifactSource", "StepGroup", "Workspace" ]
        }
      }
    },
    "TemplateInputsErrorDTO" : {
      "type" : "object",
      "properties" : {
        "fieldName" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "identifierOfErrorSource" : {
          "type" : "string"
        }
      }
    },
    "TemplateInputsErrorMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "errorYaml" : {
            "type" : "string"
          },
          "errorMap" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/TemplateInputsErrorDTO"
            }
          }
        }
      } ]
    },
    "TemplateResponse" : {
      "type" : "object",
      "required" : [ "accountId", "identifier", "name" ],
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "yaml" : {
          "type" : "string"
        },
        "mergedYaml" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string"
        },
        "templateEntityType" : {
          "type" : "string",
          "enum" : [ "Step", "Stage", "Pipeline", "CustomDeployment", "MonitoredService", "SecretManager", "ArtifactSource", "StepGroup", "Workspace" ]
        },
        "childType" : {
          "type" : "string"
        },
        "templateScope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails" : {
          "$ref" : "#/definitions/EntityValidityDetails"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "connectorRef" : {
          "type" : "string"
        },
        "icon" : {
          "type" : "string"
        },
        "cacheResponseMetadata" : {
          "$ref" : "#/definitions/CacheResponseMetadata"
        },
        "yamlVersion" : {
          "type" : "string"
        },
        "bulkReconcileUUID" : {
          "type" : "string"
        },
        "stableTemplate" : {
          "type" : "boolean"
        }
      }
    },
    "Throwable" : {
      "type" : "object",
      "properties" : {
        "cause" : {
          "$ref" : "#/definitions/Throwable"
        },
        "stackTrace" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StackTraceElement"
          }
        },
        "message" : {
          "type" : "string"
        },
        "suppressed" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Throwable"
          }
        },
        "localizedMessage" : {
          "type" : "string"
        }
      }
    },
    "ValidateTemplateInputsResponseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "validYaml" : {
            "type" : "boolean"
          },
          "errorNodeSummary" : {
            "$ref" : "#/definitions/ErrorNodeSummary"
          }
        }
      } ]
    },
    "YamlSchemaErrorDTO" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "messageWithFQN" : {
          "type" : "string"
        },
        "stageInfo" : {
          "$ref" : "#/definitions/NodeErrorInfo"
        },
        "stepInfo" : {
          "$ref" : "#/definitions/NodeErrorInfo"
        },
        "fqn" : {
          "type" : "string"
        },
        "hintMessage" : {
          "type" : "string"
        }
      }
    },
    "YamlSchemaErrorWrapperDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ErrorMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "schemaErrors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/YamlSchemaErrorDTO"
            }
          }
        }
      } ]
    },
    "RestResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "object"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseBoolean" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "boolean"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ResponseBoolean" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "boolean"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentGroupResponse" : {
      "type" : "object",
      "properties" : {
        "envGroup" : {
          "$ref" : "#/definitions/EnvironmentGroupResponseDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "EnvironmentGroupResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "deleted" : {
          "type" : "boolean"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "envIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "envResponse" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentResponse"
          }
        },
        "yaml" : {
          "type" : "string"
        },
        "gitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        }
      }
    },
    "EnvironmentResponse" : {
      "type" : "object",
      "properties" : {
        "environment" : {
          "$ref" : "#/definitions/EnvironmentResponseDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "entityValidityDetails" : {
          "$ref" : "#/definitions/EntityValidityDetails"
        }
      }
    },
    "EnvironmentResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        },
        "deleted" : {
          "type" : "boolean"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "yaml" : {
          "type" : "string"
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        },
        "cacheResponseMetadataDTO" : {
          "$ref" : "#/definitions/CacheResponseMetadata"
        }
      }
    },
    "ResponseEnvironmentGroupResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentGroupResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentGroupRequestDTO" : {
      "type" : "object",
      "required" : [ "yaml" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "color" : {
          "type" : "string"
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentGroupDeleteResponse" : {
      "type" : "object",
      "properties" : {
        "deleted" : {
          "type" : "boolean"
        },
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnvironmentGroupDeleteResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentGroupDeleteResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "PageEnvironmentGroupResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentGroupResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageEnvironmentGroupResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageEnvironmentGroupResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AuditFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "scopes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceScopeDTO"
            }
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceDTO"
            }
          },
          "includeChildScopes" : {
            "type" : "boolean"
          },
          "modules" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
            }
          },
          "actions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CREATE", "UPDATE", "RESTORE", "DELETE", "FORCE_DELETE", "UPSERT", "INVITE", "RESEND_INVITE", "REVOKE_INVITE", "ADD_COLLABORATOR", "REMOVE_COLLABORATOR", "CREATE_TOKEN", "REVOKE_TOKEN", "LOGIN", "LOGIN2FA", "UNSUCCESSFUL_LOGIN", "ADD_MEMBERSHIP", "REMOVE_MEMBERSHIP", "ERROR_BUDGET_RESET", "START", "END", "STAGE_START", "STAGE_END", "PAUSE", "RESUME", "ABORT", "TIMEOUT", "SIGNED_EULA", "ROLE_ASSIGNMENT_CREATED", "ROLE_ASSIGNMENT_UPDATED", "ROLE_ASSIGNMENT_DELETED", "MOVE", "ENABLED", "DISABLED", "DISMISS_ANOMALY", "RERUN", "BYPASS", "STABLE_VERSION_CHANGED" ]
            }
          },
          "environments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Environment"
            }
          },
          "principals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Principal"
            }
          },
          "staticFilter" : {
            "type" : "string",
            "enum" : [ "EXCLUDE_LOGIN_EVENTS", "EXCLUDE_SYSTEM_EVENTS" ]
          },
          "startTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "endTime" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "CcmConnectorFilter" : {
      "type" : "object",
      "properties" : {
        "featuresEnabled" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "BILLING", "OPTIMIZATION", "VISIBILITY", "GOVERNANCE", "COMMITMENT_ORCHESTRATOR", "CLUSTER_ORCHESTRATOR" ]
          }
        },
        "featuresDisabled" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "BILLING", "OPTIMIZATION", "VISIBILITY", "GOVERNANCE", "COMMITMENT_ORCHESTRATOR", "CLUSTER_ORCHESTRATOR" ]
          }
        },
        "awsAccountId" : {
          "type" : "string"
        },
        "awsAccountIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "azureSubscriptionId" : {
          "type" : "string"
        },
        "azureTenantId" : {
          "type" : "string"
        },
        "gcpProjectId" : {
          "type" : "string"
        },
        "k8sConnectorRef" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ConnectorFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "connectorNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "connectorIdentifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
            }
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CLOUD_PROVIDER", "SECRET_MANAGER", "CLOUD_COST", "ARTIFACTORY", "CODE_REPO", "MONITORING", "TICKETING", "DATABASE" ]
            }
          },
          "connectivityStatuses" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "SUCCESS", "FAILURE", "PARTIAL", "UNKNOWN", "PENDING" ]
            }
          },
          "inheritingCredentialsFromDelegate" : {
            "type" : "boolean"
          },
          "connectorConnectivityModes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "DELEGATE", "MANAGER" ]
            }
          },
          "ccmConnectorFilter" : {
            "$ref" : "#/definitions/CcmConnectorFilter"
          },
          "connectorIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ConnectorInternalFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
            }
          },
          "connectivityStatuses" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "SUCCESS", "FAILURE", "PARTIAL", "UNKNOWN", "PENDING" ]
            }
          },
          "ccmConnectorFilter" : {
            "$ref" : "#/definitions/CcmConnectorFilter"
          },
          "accountIdentifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DelegateFilterProperties" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "CONNECTED", "DISCONNECTED", "ENABLED", "WAITING_FOR_APPROVAL", "DISABLED", "DELETED" ]
        },
        "description" : {
          "type" : "string"
        },
        "hostName" : {
          "type" : "string"
        },
        "delegateName" : {
          "type" : "string"
        },
        "delegateType" : {
          "type" : "string"
        },
        "delegateGroupIdentifier" : {
          "type" : "string"
        },
        "delegateTags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "delegateInstanceFilter" : {
          "type" : "string",
          "enum" : [ "EXPIRED", "AVAILABLE" ]
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }
      }
    },
    "DelegateProfileFilterProperties" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "approvalRequired" : {
          "type" : "boolean"
        },
        "selectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }
      }
    },
    "EmbeddedUserDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        }
      }
    },
    "Environment" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "envGroupIdentifier" : {
          "type" : "string"
        },
        "envGroupName" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentFilterProperties" : {
      "type" : "object",
      "properties" : {
        "environmentNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "environmentTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "PreProduction", "Production" ]
          }
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }
      }
    },
    "EnvironmentGroupFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "envGroupName" : {
            "type" : "string"
          },
          "envIdentifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "envGroupTags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGTag"
            }
          }
        }
      } ]
    },
    "FilesFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "fileUsage" : {
            "type" : "string",
            "enum" : [ "MANIFEST_FILE", "CONFIG", "SCRIPT" ]
          },
          "createdBy" : {
            "$ref" : "#/definitions/EmbeddedUserDetailsDTO"
          },
          "referencedBy" : {
            "$ref" : "#/definitions/ReferencedByDTO"
          }
        }
      } ]
    },
    "FilterProperties" : {
      "type" : "object",
      "discriminator" : "filterType",
      "properties" : {
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }
      }
    },
    "InputSetFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "inputSetIdsWithPipelineIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "NGTag" : {
      "type" : "object",
      "required" : [ "key" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "OverrideFilterProperties" : {
      "type" : "object",
      "properties" : {
        "environmentRefs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "serviceRefs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "infraIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }
      }
    },
    "PipelineFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "pipelineTags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGTag"
            }
          },
          "pipelineIdentifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "moduleProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Principal" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "USER", "SERVICE", "API_KEY", "SERVICE_ACCOUNT" ]
        },
        "name" : {
          "type" : "string"
        },
        "jwtclaims" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ReferencedByDTO" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResourceDTO" : {
      "type" : "object",
      "required" : [ "identifier", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ORGANIZATION", "PROJECT", "USER_GROUP", "SECRET", "CERTIFICATE", "STREAMING_DESTINATION", "RESOURCE_GROUP", "USER", "ROLE", "PIPELINE", "TRIGGER", "TEMPLATE", "INPUT_SET", "DELEGATE_CONFIGURATION", "DELEGATE_GROUPS", "SERVICE", "ENVIRONMENT", "ENVIRONMENT_GROUP", "DELEGATE", "SERVICE_ACCOUNT", "CONNECTOR", "API_KEY", "TOKEN", "DELEGATE_TOKEN", "DASHBOARD", "DASHBOARD_FOLDER", "GOVERNANCE_POLICY", "GOVERNANCE_POLICY_SET", "VARIABLE", "CHAOS_HUB", "MONITORED_SERVICE", "CHAOS_INFRASTRUCTURE", "CHAOS_EXPERIMENT", "CHAOS_GAMEDAY", "CHAOS_PROBE", "STO_TARGET", "STO_EXEMPTION", "SERVICE_LEVEL_OBJECTIVE", "PERSPECTIVE", "PERSPECTIVE_BUDGET", "PERSPECTIVE_REPORT", "COST_CATEGORY", "COMMITMENT_ORCHESTRATOR_SETUP", "COMMITMENT_ACTIONS", "SMTP", "PERSPECTIVE_FOLDER", "AUTOSTOPPING_RULE", "AUTOSTOPPING_LB", "AUTOSTOPPING_STARTSTOP", "SETTING", "NG_LOGIN_SETTINGS", "DEPLOYMENT_FREEZE", "CLOUD_ASSET_GOVERNANCE_RULE", "CLOUD_ASSET_GOVERNANCE_RULE_SET", "CLOUD_ASSET_GOVERNANCE_RULE_ENFORCEMENT", "TARGET_GROUP", "FEATURE_FLAG", "FEATURE_FLAG_STALE_CONFIG", "NG_ACCOUNT_DETAILS", "BUDGET_GROUP", "IP_ALLOWLIST_CONFIG", "NETWORK_MAP", "CET_AGENT_TOKEN", "CET_CRITICAL_EVENT", "CHAOS_SECURITY_GOVERNANCE", "END_USER_LICENSE_AGREEMENT", "WORKSPACE", "IAC_MODULE", "SEI_CONFIGURATION_SETTINGS", "SEI_COLLECTIONS", "SEI_INSIGHTS", "CET_SAVED_FILTER", "GITOPS_AGENT", "GITOPS_REPOSITORY", "GITOPS_CLUSTER", "GITOPS_CREDENTIAL_TEMPLATE", "GITOPS_REPOSITORY_CERTIFICATE", "GITOPS_GNUPG_KEY", "GITOPS_PROJECT_MAPPING", "GITOPS_APPLICATION", "CODE_REPOSITORY", "CODE_REPOSITORY_SETTINGS", "CODE_BRANCH_RULE", "MODULE_LICENSE", "IDP_BACKSTAGE_CATALOG_ENTITY", "IDP_BACKSTAGE_SCAFFOLDER_TASK", "IDP_APP_CONFIGS", "IDP_CONFIG_ENV_VARIABLES", "IDP_PROXY_HOST", "IDP_SCORECARDS", "IDP_CHECKS", "IDP_ALLOW_LIST", "IDP_OAUTH_CONFIG", "IDP_CATALOG_CONNECTOR", "IDP_GIT_INTEGRATIONS", "IDP_PERMISSIONS", "SERVICE_DISCOVERY_AGENT", "APPLICATION_MAP", "IDP_LAYOUT", "IDP_PLUGINS", "NOTIFICATION_CHANNEL", "NOTIFICATION_RULE", "IDP_CATALOG_CUSTOM_PROPERTIES", "CLOUD_ASSET_GOVERNANCE_RULE_EVALUATION", "ARTIFACT_REGISTRY_UPSTREAM_PROXY", "ARTIFACT_REGISTRY" ]
        },
        "identifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResourceScopeDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "SecretFilterProperties" : {
      "type" : "object",
      "properties" : {
        "secretName" : {
          "type" : "string"
        },
        "secretIdentifier" : {
          "type" : "string"
        },
        "secretTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SecretFile", "SecretText", "SSHKey", "WinRmCredentials" ]
          }
        },
        "secretManagerIdentifiers" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "searchTerm" : {
          "type" : "string"
        },
        "includeSecretsFromEverySubScope" : {
          "type" : "boolean"
        },
        "includeAllSecretsAccessibleAtScope" : {
          "type" : "boolean"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "Connector", "Secret", "DelegateProfile", "Delegate", "PipelineSetup", "PipelineExecution", "Deployment", "Audit", "Template", "Trigger", "EnvironmentGroup", "FileStore", "CCMRecommendation", "Anomaly", "Environment", "RuleExecution", "Override", "InputSet", "Webhook" ]
        }
      }
    },
    "TemplateFilterProperties" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterProperties"
      }, {
        "type" : "object",
        "properties" : {
          "templateNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "templateIdentifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "templateEntityTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Step", "Stage", "Pipeline", "CustomDeployment", "MonitoredService", "SecretManager", "ArtifactSource", "StepGroup", "Workspace" ]
            }
          },
          "childTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listingScope" : {
            "$ref" : "#/definitions/TemplateScope"
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TemplateScope" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseString" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "string"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StrategyParameters" : {
      "type" : "object",
      "properties" : {
        "instances" : {
          "type" : "integer",
          "format" : "int32"
        },
        "unitType" : {
          "type" : "string",
          "enum" : [ "COUNT", "PERCENTAGE" ]
        },
        "phases" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "artifactType" : {
          "type" : "string",
          "enum" : [ "JAR", "WAR", "TAR", "ZIP", "NUGET", "DOCKER", "RPM", "AWS_LAMBDA", "AWS_CODEDEPLOY", "PCF", "AMI", "AZURE_MACHINE_IMAGE", "AZURE_WEBAPP", "IIS", "OTHER", "IIS_APP", "IIS_VirtualDirectory" ]
        },
        "shiftTraffic" : {
          "type" : "boolean"
        },
        "multiPhases" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListServiceDefinitionType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseStepCategory" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/StepCategory"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StepCategory" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "stepsData" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StepData"
          }
        },
        "stepCategories" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StepCategory"
          }
        }
      }
    },
    "StepData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "MergePR", "RevertPR", "GitOpsSync", "GitOpsGetAppDetails", "UpdateGitOpsApp", "APPLY", "SCALE", "STAGE_DEPLOYMENT", "K8sRollingDeploy", "K8sRollingRollback", "HelmDeploy", "HelmRollback", "HelmCanaryDeploy", "K8sBGSwapServices", "K8sDelete", "K8sCanaryDelete", "K8sCanaryDeploy", "K8sTrafficRouting", "K8sPatch", "K8sRollout", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "CreateStack", "DeleteStack", "RollbackStack", "SHELL_SCRIPT_PROVISIONER", "TerraformCloudRun", "TerraformCloudRollback", "JIRA", "SERVICENOW", "EMAIL", "BARRIERS", "NEW_RELIC_DEPLOYMENT_MAKER", "TEMPLATIZED_SECRET_MANAGER", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "EcsRunTask", "Command", "JenkinsBuild", "AzureCreateARMResource", "AzureCreateBPResource", "AzureARMRollback", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "ElastigroupDeploy", "ElastigroupRollback", "ElastigroupSetup", "TerragruntPlan", "TerragruntApply", "TerragruntDestroy", "TerragruntRollback", "AsgCanaryDeploy", "AsgCanaryDelete", "BasicAppSetup", "BGAppSetup", "CanaryAppSetup", "TanzuCommand", "SwapRollback", "SwapRoutes", "AppResize", "AppRollback", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgRollingDeploy", "AsgRollingRollback", "TasRollingDeploy", "TasRollingRollback", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "DownloadManifests", "AwsSamBuild", "AwsSamRollback", "AwsLambdaRollback", "BambooBuild", "RouteMapping", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "ServerlessAwsLambdaDeployV2", "ServerlessAwsLambdaPackageV2", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "AwsCdkRollback", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "AsgShiftTraffic", "DownloadAwsS3", "DownloadHarnessStore", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "DBSchemaApply", "DBSchemaRollback", "AzureFunctionDeploy", "AzureFunctionRollback", "LiquibaseCommand", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob" ]
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapServiceDefinitionTypeListExecutionStrategyType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Basic", "Canary", "BlueGreen", "Rolling", "Default", "GitOps" ]
            }
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CDStageSummaryResponseDTO" : {
      "type" : "object",
      "properties" : {
        "Service" : {
          "type" : "string"
        },
        "Environment" : {
          "type" : "string"
        },
        "Infrastructure Definition" : {
          "type" : "string"
        },
        "Services" : {
          "type" : "string"
        },
        "Environments" : {
          "type" : "string"
        },
        "Infrastructure Definitions" : {
          "type" : "string"
        },
        "Environment Group" : {
          "type" : "string"
        },
        "Artifact Display Name" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapStringCDStageSummaryResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CDStageSummaryResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "LicenseDateUsageDTO" : {
      "type" : "object",
      "properties" : {
        "licenseUsage" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "licenseUsageBreakdown" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/LicenseUsageBreakdown"
          }
        },
        "reportType" : {
          "type" : "string",
          "enum" : [ "DAILY", "MONTHLY" ]
        },
        "licenseType" : {
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }
      }
    },
    "LicenseUsageBreakdown" : {
      "type" : "object",
      "properties" : {
        "serviceDeploymentLicenseCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gitopsLicenseCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pipelineExecutionLicenseCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalLicenseCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseLicenseDateUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/LicenseDateUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "LicenseDateUsageParams" : {
      "type" : "object",
      "properties" : {
        "fromDate" : {
          "type" : "string"
        },
        "toDate" : {
          "type" : "string"
        },
        "reportType" : {
          "type" : "string",
          "enum" : [ "DAILY", "MONTHLY" ]
        }
      }
    },
    "CDLicenseUsageV1V2VersionsDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cdLicenseUsageV2" : {
          "$ref" : "#/definitions/CDLicenseUsageV2DTO"
        },
        "cdServiceUsageV1" : {
          "$ref" : "#/definitions/ServiceUsageDTO"
        },
        "cdServiceInstanceUsageV1" : {
          "$ref" : "#/definitions/ServiceInstanceUsageDTO"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CDLicenseUsageV2DTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "serviceDeploymentUsage" : {
          "$ref" : "#/definitions/CDUsageDataDTO"
        },
        "gitopsUsage" : {
          "$ref" : "#/definitions/CDUsageDataDTO"
        },
        "pipelineExecutionUsage" : {
          "$ref" : "#/definitions/CDUsageDataDTO"
        },
        "cdLicenseType" : {
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }
      }
    },
    "CDUsageDataDTO" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "displayName" : {
          "type" : "string"
        },
        "references" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CDUsageReferenceDTO"
          }
        }
      }
    },
    "CDUsageReferenceDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "count" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "ReferenceDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseCDLicenseUsageV1V2VersionsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CDLicenseUsageV1V2VersionsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceInstanceUsageDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "activeServices" : {
          "$ref" : "#/definitions/UsageDataDTO"
        },
        "activeServiceInstances" : {
          "$ref" : "#/definitions/UsageDataDTO"
        },
        "cdLicenseType" : {
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        }
      }
    },
    "ServiceUsageDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "activeServices" : {
          "$ref" : "#/definitions/UsageDataDTO"
        },
        "activeServiceInstances" : {
          "$ref" : "#/definitions/UsageDataDTO"
        },
        "cdLicenseType" : {
          "type" : "string",
          "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
        },
        "serviceLicenses" : {
          "$ref" : "#/definitions/UsageDataDTO"
        }
      }
    },
    "UsageDataDTO" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "displayName" : {
          "type" : "string"
        },
        "references" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ReferenceDTO"
          }
        }
      }
    },
    "PageServiceResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceResponse" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "$ref" : "#/definitions/ServiceResponseDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "entityValidityDetails" : {
          "$ref" : "#/definitions/EntityValidityDetails"
        }
      }
    },
    "ServiceResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "deleted" : {
          "type" : "boolean"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "yaml" : {
          "type" : "string"
        },
        "v2Service" : {
          "type" : "boolean"
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        },
        "cacheResponseMetadataDTO" : {
          "$ref" : "#/definitions/CacheResponseMetadata"
        }
      }
    },
    "PagePipelineExecutionUsageDTO" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PipelineExecutionUsageDTO"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "Pageable" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "paged" : {
          "type" : "boolean"
        },
        "unpaged" : {
          "type" : "boolean"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PipelineExecutionUsageDTO" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "orgName" : {
          "type" : "string"
        },
        "projectName" : {
          "type" : "string"
        },
        "executionCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastExecuted" : {
          "type" : "integer",
          "format" : "int64"
        },
        "serviceInstancesConsumed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "serviceLicensesConsumed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponsePagePipelineExecutionUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PagePipelineExecutionUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Sort" : {
      "type" : "object",
      "properties" : {
        "empty" : {
          "type" : "boolean"
        },
        "unsorted" : {
          "type" : "boolean"
        },
        "sorted" : {
          "type" : "boolean"
        }
      }
    },
    "PipelineExecutionUsageFilterParams" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "PageServiceDeploymentUsageDTO" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDeploymentUsageDTO"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePageServiceDeploymentUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceDeploymentUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeploymentUsageDTO" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "orgName" : {
          "type" : "string"
        },
        "projectName" : {
          "type" : "string"
        },
        "instanceCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastDeployed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "licensesConsumed" : {
          "type" : "number",
          "format" : "double"
        },
        "deploymentType" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ServiceDeploymentUsageFilterParams" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "deploymentType" : {
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        }
      }
    },
    "DataPoint" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseUsageTimeline" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UsageTimeline"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UsageTimeline" : {
      "type" : "object",
      "properties" : {
        "points" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DataPoint"
          }
        }
      }
    },
    "GitopsUsageTimelineParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UsageTimelineParams"
      }, {
        "type" : "object",
        "properties" : {
          "orgIdentifier" : {
            "type" : "string"
          },
          "projectIdentifier" : {
            "type" : "string"
          },
          "gitopsApplicationName" : {
            "type" : "string"
          },
          "agentIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PipelineExecutionUsageTimelineParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UsageTimelineParams"
      }, {
        "type" : "object",
        "properties" : {
          "orgIdentifier" : {
            "type" : "string"
          },
          "projectIdentifier" : {
            "type" : "string"
          },
          "pipelineIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServiceDeploymentUsageTimelineParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UsageTimelineParams"
      }, {
        "type" : "object",
        "properties" : {
          "orgIdentifier" : {
            "type" : "string"
          },
          "projectIdentifier" : {
            "type" : "string"
          },
          "serviceIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UsageTimelineParams" : {
      "type" : "object",
      "discriminator" : "usageType"
    },
    "ResponseCDLicenseUsageV2DTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CDLicenseUsageV2DTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitopsUsageDTO" : {
      "type" : "object",
      "required" : [ "agentIdentifier", "appName" ],
      "properties" : {
        "appName" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgName" : {
          "type" : "string"
        },
        "projectName" : {
          "type" : "string"
        },
        "instanceCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastDeployed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "licensesConsumed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PageGitopsUsageDTO" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitopsUsageDTO"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePageGitopsUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageGitopsUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitopsUsageFilterParams" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "appName" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        }
      }
    },
    "AppDynamicsConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "accountname", "controllerUrl" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "accountname" : {
            "type" : "string"
          },
          "controllerUrl" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "clientSecretRef" : {
            "type" : "string"
          },
          "clientId" : {
            "type" : "string"
          },
          "authType" : {
            "type" : "string",
            "enum" : [ "UsernamePassword", "ApiClientToken" ]
          }
        }
      } ]
    },
    "ArtifactoryAuthCredentials" : {
      "type" : "object"
    },
    "ArtifactoryAuthentication" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ArtifactoryAuthCredentials"
        }
      }
    },
    "ArtifactoryConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "artifactoryServerUrl" ],
        "properties" : {
          "artifactoryServerUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/ArtifactoryAuthentication"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ArtifactoryUsernamePasswordAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactoryAuthCredentials"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsCodeCommitAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "HTTPS" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AwsCodeCommitCredentialsDTO"
        }
      }
    },
    "AwsCodeCommitConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/AwsCodeCommitAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Repo", "Region" ]
          }
        }
      } ]
    },
    "AwsCodeCommitCredentialsDTO" : {
      "type" : "object"
    },
    "AwsCodeCommitHttpsCredentialsDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsCodeCommitCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "AWSCredentials" ]
          },
          "spec" : {
            "$ref" : "#/definitions/AwsCodeCommitHttpsCredentialsSpecDTO"
          }
        }
      } ]
    },
    "AwsCodeCommitHttpsCredentialsSpecDTO" : {
      "type" : "object"
    },
    "AwsCodeCommitSecretKeyAccessKeyDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsCodeCommitHttpsCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "secretKeyRef" ],
        "properties" : {
          "accessKey" : {
            "type" : "string"
          },
          "accessKeyRef" : {
            "type" : "string"
          },
          "secretKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/AwsCredential"
          },
          "awsSdkClientBackOffStrategyOverride" : {
            "$ref" : "#/definitions/AwsSdkClientBackoffStrategy"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AwsCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "crossAccountAccess" : {
          "$ref" : "#/definitions/CrossAccountAccess"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "InheritFromDelegate", "ManualConfig", "Irsa", "OidcAuthentication" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AwsCredentialSpec"
        },
        "region" : {
          "type" : "string"
        }
      }
    },
    "AwsCredentialSpec" : {
      "type" : "object"
    },
    "AwsCurAttributes" : {
      "type" : "object",
      "required" : [ "reportName", "s3BucketName" ],
      "properties" : {
        "reportName" : {
          "type" : "string"
        },
        "s3BucketName" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string"
        },
        "s3Prefix" : {
          "type" : "string"
        }
      }
    },
    "AwsEqualJitterBackoffStrategy" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSdkClientBackOffStrategySpec"
      }, {
        "type" : "object",
        "properties" : {
          "baseDelay" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxBackoffTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsFixedDelayBackoffStrategy" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSdkClientBackOffStrategySpec"
      }, {
        "type" : "object",
        "properties" : {
          "fixedBackoff" : {
            "type" : "integer",
            "format" : "int64"
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsFullJitterBackoffStrategy" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSdkClientBackOffStrategySpec"
      }, {
        "type" : "object",
        "properties" : {
          "baseDelay" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxBackoffTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsKmsConnectorCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AssumeIAMRole", "AssumeSTSRole", "ManualConfig", "OidcAuthentication" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AwsKmsCredentialSpec"
        }
      }
    },
    "AwsKmsConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential", "kmsArn", "region" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/AwsKmsConnectorCredential"
          },
          "kmsArn" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "awsOidcTokenExchangeDetailsForDelegate" : {
            "$ref" : "#/definitions/AwsOidcTokenExchangeDetailsForDelegate"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AwsKmsCredentialSpec" : {
      "type" : "object"
    },
    "AwsKmsCredentialSpecAssumeIAM" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsKmsCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "delegateSelectors" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          }
        }
      } ]
    },
    "AwsKmsCredentialSpecAssumeSTS" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsKmsCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "delegateSelectors", "roleArn" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          },
          "roleArn" : {
            "type" : "string"
          },
          "externalName" : {
            "type" : "string"
          },
          "assumeStsRoleDuration" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsKmsCredentialSpecManualConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsKmsCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "accessKey", "secretKey" ],
        "properties" : {
          "accessKey" : {
            "type" : "string"
          },
          "secretKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsManualConfigSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "secretKeyRef" ],
        "properties" : {
          "accessKey" : {
            "type" : "string"
          },
          "accessKeyRef" : {
            "type" : "string"
          },
          "secretKeyRef" : {
            "type" : "string"
          },
          "sessionTokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsOidcSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSecretManagerCredentialSpec"
      }, {
        "type" : "object",
        "properties" : {
          "iamRoleArn" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsOidcTokenExchangeDetailsForDelegate" : {
      "type" : "object",
      "properties" : {
        "oidcIdToken" : {
          "type" : "string"
        },
        "idTokenExpiryTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AwsSMCredentialSpecAssumeIAM" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSecretManagerCredentialSpec"
      }, {
        "type" : "object"
      } ]
    },
    "AwsSMCredentialSpecAssumeSTS" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSecretManagerCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "roleArn" ],
        "properties" : {
          "roleArn" : {
            "type" : "string"
          },
          "externalId" : {
            "type" : "string"
          },
          "assumeStsRoleDuration" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsSMCredentialSpecManualConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSecretManagerCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "secretKey" ],
        "properties" : {
          "accessKey" : {
            "type" : "string"
          },
          "accessKeyPlainText" : {
            "type" : "string"
          },
          "secretKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSdkClientBackOffStrategySpec" : {
      "type" : "object"
    },
    "AwsSdkClientBackoffStrategy" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "FixedDelayBackoffStrategy", "EqualJitterBackoffStrategy", "FullJitterBackoffStrategy" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AwsSdkClientBackOffStrategySpec"
        }
      }
    },
    "AwsSecretManagerCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AssumeIAMRole", "AssumeSTSRole", "ManualConfig", "OidcAuthentication" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AwsSecretManagerCredentialSpec"
        }
      }
    },
    "AwsSecretManagerCredentialSpec" : {
      "type" : "object"
    },
    "AwsSecretManagerDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential", "region" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/AwsSecretManagerCredential"
          },
          "region" : {
            "type" : "string"
          },
          "secretNamePrefix" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "awsOidcTokenExchangeDetailsForDelegate" : {
            "$ref" : "#/definitions/AwsOidcTokenExchangeDetailsForDelegate"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "usePutSecret" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AzureArtifactsAuthentication" : {
      "type" : "object",
      "required" : [ "spec" ],
      "properties" : {
        "spec" : {
          "$ref" : "#/definitions/AzureArtifactsHttpCredentials"
        }
      }
    },
    "AzureArtifactsConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "auth", "azureArtifactsUrl" ],
        "properties" : {
          "azureArtifactsUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/AzureArtifactsAuthentication"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AzureArtifactsHttpCredentials" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "PersonalAccessToken" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AzureArtifactsUsernameToken"
        }
      }
    },
    "AzureArtifactsUsernameToken" : {
      "type" : "object",
      "required" : [ "tokenRef" ],
      "properties" : {
        "tokenRef" : {
          "type" : "string"
        }
      }
    },
    "AzureAuthCredentialDTO" : {
      "type" : "object"
    },
    "AzureAuthDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Secret", "Certificate" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AzureAuthCredentialDTO"
        }
      }
    },
    "AzureClientKeyCertDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "certificateRef" ],
        "properties" : {
          "certificateRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureClientSecretKeyDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "secretRef" ],
        "properties" : {
          "secretRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "azureEnvironmentType", "credential" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/AzureCredential"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "azureEnvironmentType" : {
            "type" : "string",
            "enum" : [ "AZURE", "AZURE_US_GOVERNMENT" ]
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AzureCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "InheritFromDelegate", "ManualConfig" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AzureCredentialSpec"
        }
      }
    },
    "AzureCredentialSpec" : {
      "type" : "object"
    },
    "AzureInheritFromDelegateDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "auth" ],
        "properties" : {
          "auth" : {
            "readOnly" : true,
            "$ref" : "#/definitions/AzureMSIAuth"
          }
        }
      } ]
    },
    "AzureKeyVaultConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "subscription", "vaultName" ],
        "properties" : {
          "clientId" : {
            "type" : "string"
          },
          "secretKey" : {
            "type" : "string"
          },
          "tenantId" : {
            "type" : "string"
          },
          "vaultName" : {
            "type" : "string"
          },
          "subscription" : {
            "type" : "string"
          },
          "vaultConfiguredManually" : {
            "type" : "boolean"
          },
          "azureEnvironmentType" : {
            "type" : "string",
            "enum" : [ "AZURE", "AZURE_US_GOVERNMENT" ]
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "useManagedIdentity" : {
            "type" : "boolean"
          },
          "azureManagedIdentityType" : {
            "type" : "string",
            "enum" : [ "SystemAssignedManagedIdentity", "UserAssignedManagedIdentity" ]
          },
          "managedClientId" : {
            "type" : "string"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "enablePurge" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AzureMSIAuth" : {
      "type" : "object"
    },
    "AzureManualDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "applicationId", "auth", "tenantId" ],
        "properties" : {
          "applicationId" : {
            "type" : "string",
            "readOnly" : true
          },
          "tenantId" : {
            "type" : "string"
          },
          "auth" : {
            "readOnly" : true,
            "$ref" : "#/definitions/AzureAuthDTO"
          }
        }
      } ]
    },
    "AzureRepoApiAccess" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Token" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AzureRepoApiAccessSpecDTO"
        }
      }
    },
    "AzureRepoApiAccessSpecDTO" : {
      "type" : "object"
    },
    "AzureRepoAuthentication" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Http", "Ssh" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AzureRepoCredentialsDTO"
        }
      }
    },
    "AzureRepoConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "validationRepo" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/AzureRepoAuthentication"
          },
          "apiAccess" : {
            "$ref" : "#/definitions/AzureRepoApiAccess"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Project", "Repo" ]
          }
        }
      } ]
    },
    "AzureRepoCredentialsDTO" : {
      "type" : "object"
    },
    "AzureRepoHttpCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureRepoCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UsernameToken" ]
          },
          "spec" : {
            "$ref" : "#/definitions/AzureRepoHttpCredentialsSpecDTO"
          }
        }
      } ]
    },
    "AzureRepoHttpCredentialsSpecDTO" : {
      "type" : "object"
    },
    "AzureRepoSshCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureRepoCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "sshKeyRef" ],
        "properties" : {
          "sshKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureRepoTokenSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureRepoApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureRepoUsernameToken" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureRepoHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureSystemAssignedMSIAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureAuthCredentialDTO"
      }, {
        "type" : "object"
      } ]
    },
    "AzureUserAssignedMSIAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "clientId" ],
        "properties" : {
          "clientId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BambooAuthCredentialsDTO" : {
      "type" : "object"
    },
    "BambooAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous", "Bearer Token(HTTP Header)" ]
        },
        "spec" : {
          "$ref" : "#/definitions/BambooAuthCredentialsDTO"
        }
      }
    },
    "BambooConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "bambooUrl" ],
        "properties" : {
          "bambooUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/BambooAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "BambooUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BambooAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BillingExportSpec" : {
      "type" : "object",
      "required" : [ "containerName", "directoryName", "reportName", "storageAccountName", "subscriptionId" ],
      "properties" : {
        "storageAccountName" : {
          "type" : "string"
        },
        "containerName" : {
          "type" : "string"
        },
        "directoryName" : {
          "type" : "string"
        },
        "reportName" : {
          "type" : "string"
        },
        "subscriptionId" : {
          "type" : "string"
        },
        "billingType" : {
          "type" : "string",
          "enum" : [ "ACTUAL", "AMORTIZED" ]
        }
      }
    },
    "BitbucketApiAccess" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernameToken", "OAuth" ]
        },
        "spec" : {
          "$ref" : "#/definitions/BitbucketApiAccessSpecDTO"
        }
      }
    },
    "BitbucketApiAccessSpecDTO" : {
      "type" : "object"
    },
    "BitbucketAuthentication" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Http", "Ssh" ]
        },
        "spec" : {
          "$ref" : "#/definitions/BitbucketCredentialsDTO"
        }
      }
    },
    "BitbucketConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "validationRepo" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/BitbucketAuthentication"
          },
          "apiAccess" : {
            "$ref" : "#/definitions/BitbucketApiAccess"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Account", "Repo", "Project" ]
          }
        }
      } ]
    },
    "BitbucketCredentialsDTO" : {
      "type" : "object"
    },
    "BitbucketHttpCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BitbucketCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UsernamePassword" ]
          },
          "spec" : {
            "$ref" : "#/definitions/BitbucketHttpCredentialsSpecDTO"
          }
        }
      } ]
    },
    "BitbucketHttpCredentialsSpecDTO" : {
      "type" : "object"
    },
    "BitbucketOauth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BitbucketApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "refreshTokenRef", "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          },
          "refreshTokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BitbucketSshCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BitbucketCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "sshKeyRef" ],
        "properties" : {
          "sshKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BitbucketUsernamePassword" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BitbucketHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BitbucketUsernameTokenApiAccess" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BitbucketApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CEAwsConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "crossAccountAccess" ],
        "properties" : {
          "crossAccountAccess" : {
            "$ref" : "#/definitions/CrossAccountAccess"
          },
          "curAttributes" : {
            "$ref" : "#/definitions/AwsCurAttributes"
          },
          "awsAccountId" : {
            "type" : "string"
          },
          "isAWSGovCloudAccount" : {
            "type" : "boolean"
          },
          "featuresEnabled" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BILLING", "OPTIMIZATION", "VISIBILITY", "GOVERNANCE", "COMMITMENT_ORCHESTRATOR", "CLUSTER_ORCHESTRATOR" ]
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "CEAzureConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "subscriptionId", "tenantId" ],
        "properties" : {
          "featuresEnabled" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BILLING", "OPTIMIZATION", "VISIBILITY", "GOVERNANCE", "COMMITMENT_ORCHESTRATOR", "CLUSTER_ORCHESTRATOR" ]
            }
          },
          "tenantId" : {
            "type" : "string"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "billingExportSpec" : {
            "$ref" : "#/definitions/BillingExportSpec"
          },
          "billingExportSpec2" : {
            "$ref" : "#/definitions/BillingExportSpec"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "CEKubernetesClusterConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "connectorRef" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "featuresEnabled" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BILLING", "OPTIMIZATION", "VISIBILITY", "GOVERNANCE", "COMMITMENT_ORCHESTRATOR", "CLUSTER_ORCHESTRATOR" ]
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ConnectorActivityDetails" : {
      "type" : "object",
      "properties" : {
        "lastActivityTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ConnectorConfigDTO" : {
      "type" : "object",
      "discriminator" : "connectorType"
    },
    "ConnectorConnectivityDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "PARTIAL", "UNKNOWN", "PENDING" ]
        },
        "errorSummary" : {
          "type" : "string"
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorDetail"
          }
        },
        "testedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastTestedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastConnectedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastAlertSent" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ConnectorInfoDTO" : {
      "type" : "object",
      "required" : [ "identifier", "name", "spec", "type" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ConnectorConfigDTO"
        }
      }
    },
    "ConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "connector" : {
          "$ref" : "#/definitions/ConnectorInfoDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "$ref" : "#/definitions/ConnectorConnectivityDetails"
        },
        "activityDetails" : {
          "$ref" : "#/definitions/ConnectorActivityDetails"
        },
        "harnessManaged" : {
          "type" : "boolean"
        },
        "gitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails" : {
          "$ref" : "#/definitions/EntityValidityDetails"
        },
        "governanceMetadata" : {
          "$ref" : "#/definitions/GovernanceMetadata"
        },
        "isFavorite" : {
          "type" : "boolean"
        }
      }
    },
    "CrossAccountAccess" : {
      "type" : "object",
      "required" : [ "crossAccountRoleArn" ],
      "properties" : {
        "crossAccountRoleArn" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        }
      }
    },
    "CustomHealthConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "baseURL", "method" ],
        "properties" : {
          "baseURL" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CustomHealthKeyAndValue"
            }
          },
          "params" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CustomHealthKeyAndValue"
            }
          },
          "method" : {
            "type" : "string",
            "enum" : [ "GET", "POST" ]
          },
          "validationBody" : {
            "type" : "string"
          },
          "validationPath" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "CustomHealthKeyAndValue" : {
      "type" : "object",
      "required" : [ "key" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "encryptedValueRef" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "valueEncrypted" : {
          "type" : "boolean"
        }
      }
    },
    "CustomSecretManager" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "template" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "onDelegate" : {
            "type" : "boolean"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          },
          "workingDirectory" : {
            "type" : "string"
          },
          "template" : {
            "$ref" : "#/definitions/TemplateLinkConfigForCustomSecretManager"
          },
          "timeout" : {
            "type" : "integer",
            "format" : "int64",
            "minimum" : 1,
            "maximum" : 3600
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "DatadogConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "apiKeyRef", "applicationKeyRef", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "applicationKeyRef" : {
            "type" : "string"
          },
          "apiKeyRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "DockerAuthCredentialsDTO" : {
      "type" : "object"
    },
    "DockerAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous" ]
        },
        "spec" : {
          "$ref" : "#/definitions/DockerAuthCredentialsDTO"
        }
      }
    },
    "DockerConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "dockerRegistryUrl", "providerType" ],
        "properties" : {
          "dockerRegistryUrl" : {
            "type" : "string"
          },
          "providerType" : {
            "type" : "string",
            "enum" : [ "DockerHub", "Harbor", "Quay", "Other" ]
          },
          "auth" : {
            "$ref" : "#/definitions/DockerAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "DockerUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DockerAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DynatraceConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "apiTokenRef", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "apiTokenRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ELKConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "string"
          },
          "apiKeyId" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "apiKeyRef" : {
            "type" : "string"
          },
          "authType" : {
            "type" : "string",
            "enum" : [ "UsernamePassword", "ApiClientToken", "None", "Bearer Token(HTTP Header)" ]
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ErrorDetail" : {
      "type" : "object",
      "properties" : {
        "reason" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "code" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ErrorTrackingConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "apiKeyRef", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "apiKeyRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "GcpBillingExportSpec" : {
      "type" : "object",
      "required" : [ "datasetId", "tableId" ],
      "properties" : {
        "datasetId" : {
          "type" : "string"
        },
        "tableId" : {
          "type" : "string"
        }
      }
    },
    "GcpCloudCostConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "projectId", "serviceAccountEmail" ],
        "properties" : {
          "featuresEnabled" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BILLING", "OPTIMIZATION", "VISIBILITY", "GOVERNANCE", "COMMITMENT_ORCHESTRATOR", "CLUSTER_ORCHESTRATOR" ]
            }
          },
          "projectId" : {
            "type" : "string"
          },
          "serviceAccountEmail" : {
            "type" : "string"
          },
          "billingExportSpec" : {
            "$ref" : "#/definitions/GcpBillingExportSpec"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "GcpConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/GcpConnectorCredential"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "GcpConnectorCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "InheritFromDelegate", "ManualConfig", "OidcAuthentication" ]
        },
        "spec" : {
          "$ref" : "#/definitions/GcpCredentialSpec"
        }
      }
    },
    "GcpCredentialSpec" : {
      "type" : "object"
    },
    "GcpKmsConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "keyName", "keyRing", "projectId", "region" ],
        "properties" : {
          "projectId" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "keyRing" : {
            "type" : "string"
          },
          "keyName" : {
            "type" : "string"
          },
          "credentials" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "oidcDetails" : {
            "$ref" : "#/definitions/GcpOidcDetails"
          },
          "gcpOidcTokenExchangeDetailsForDelegate" : {
            "$ref" : "#/definitions/GcpOidcTokenExchangeDetailsForDelegate"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "GcpManualDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GcpCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "secretKeyRef" ],
        "properties" : {
          "secretKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GcpOidcDetails" : {
      "type" : "object",
      "properties" : {
        "workloadPoolId" : {
          "type" : "string"
        },
        "providerId" : {
          "type" : "string"
        },
        "gcpProjectId" : {
          "type" : "string"
        },
        "serviceAccountEmail" : {
          "type" : "string"
        }
      }
    },
    "GcpOidcTokenExchangeDetailsForDelegate" : {
      "type" : "object",
      "properties" : {
        "oidcIdToken" : {
          "type" : "string"
        },
        "oidcAccessTokenStsEndpoint" : {
          "type" : "string"
        },
        "oidcAccessTokenIamSaEndpoint" : {
          "type" : "string"
        },
        "gcpServiceAccountEmail" : {
          "type" : "string"
        },
        "oidcWorkloadAccessTokenRequestStructure" : {
          "$ref" : "#/definitions/OidcWorkloadAccessTokenRequest"
        },
        "oidcChartmuseumGcpConfigStructure" : {
          "$ref" : "#/definitions/OidcChartmuseumGcpConfig"
        },
        "idTokenExpiryTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "GcpSecretManager" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "properties" : {
          "credentialsRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "assumeCredentialsOnDelegate" : {
            "type" : "boolean"
          },
          "credential" : {
            "$ref" : "#/definitions/GcpConnectorCredential"
          },
          "gcpOidcTokenExchangeDetailsForDelegate" : {
            "$ref" : "#/definitions/GcpOidcTokenExchangeDetailsForDelegate"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "GitAuthenticationDTO" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "GitConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "connectionType", "spec", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "validationRepo" : {
            "type" : "string"
          },
          "branchName" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "isAnonymous" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Http", "Ssh" ]
          },
          "connectionType" : {
            "type" : "string",
            "enum" : [ "Account", "Repo", "Project" ]
          },
          "spec" : {
            "$ref" : "#/definitions/GitAuthenticationDTO"
          }
        }
      } ]
    },
    "GitHTTPAuthenticationDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitAuthenticationDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitSSHAuthenticationDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitAuthenticationDTO"
      }, {
        "type" : "object",
        "required" : [ "sshKeyRef" ],
        "properties" : {
          "sshKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubApiAccess" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "GithubApp", "Token", "OAuth" ]
        },
        "spec" : {
          "$ref" : "#/definitions/GithubApiAccessSpecDTO"
        }
      }
    },
    "GithubApiAccessSpecDTO" : {
      "type" : "object"
    },
    "GithubApp" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "privateKeyRef" ],
        "properties" : {
          "installationId" : {
            "type" : "string"
          },
          "applicationId" : {
            "type" : "string"
          },
          "installationIdRef" : {
            "type" : "string"
          },
          "applicationIdRef" : {
            "type" : "string"
          },
          "privateKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubAppSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "privateKeyRef" ],
        "properties" : {
          "installationId" : {
            "type" : "string"
          },
          "applicationId" : {
            "type" : "string"
          },
          "installationIdRef" : {
            "type" : "string"
          },
          "applicationIdRef" : {
            "type" : "string"
          },
          "privateKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubAuthentication" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Http", "Ssh" ]
        },
        "spec" : {
          "$ref" : "#/definitions/GithubCredentialsDTO"
        }
      }
    },
    "GithubConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "validationRepo" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/GithubAuthentication"
          },
          "apiAccess" : {
            "$ref" : "#/definitions/GithubApiAccess"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Account", "Repo", "Project" ]
          }
        }
      } ]
    },
    "GithubCredentialsDTO" : {
      "type" : "object"
    },
    "GithubHttpCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UsernamePassword", "UsernameToken", "OAuth", "GithubApp", "Anonymous" ]
          },
          "spec" : {
            "$ref" : "#/definitions/GithubHttpCredentialsSpecDTO"
          }
        }
      } ]
    },
    "GithubHttpCredentialsSpecDTO" : {
      "type" : "object"
    },
    "GithubOauth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubSshCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "sshKeyRef" ],
        "properties" : {
          "sshKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubTokenSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubUsernamePassword" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubUsernameToken" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GithubHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabApiAccess" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Token", "OAuth" ]
        },
        "spec" : {
          "$ref" : "#/definitions/GitlabApiAccessSpecDTO"
        }
      }
    },
    "GitlabApiAccessSpecDTO" : {
      "type" : "object"
    },
    "GitlabAuthentication" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Http", "Ssh" ]
        },
        "spec" : {
          "$ref" : "#/definitions/GitlabCredentialsDTO"
        }
      }
    },
    "GitlabConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "validationRepo" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/GitlabAuthentication"
          },
          "apiAccess" : {
            "$ref" : "#/definitions/GitlabApiAccess"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "proxy" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Account", "Repo", "Project" ]
          }
        }
      } ]
    },
    "GitlabCredentialsDTO" : {
      "type" : "object"
    },
    "GitlabHttpCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UsernamePassword", "UsernameToken", "Kerberos", "OAuth" ]
          },
          "spec" : {
            "$ref" : "#/definitions/GitlabHttpCredentialsSpecDTO"
          }
        }
      } ]
    },
    "GitlabHttpCredentialsSpecDTO" : {
      "type" : "object"
    },
    "GitlabKerberos" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "kerberosKeyRef" ],
        "properties" : {
          "kerberosKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabOauth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "refreshTokenRef", "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          },
          "refreshTokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabSshCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "sshKeyRef" ],
        "properties" : {
          "sshKeyRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabTokenSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          },
          "apiUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabUsernamePassword" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabUsernameToken" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitlabHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessApiAccess" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Token", "Jwt_Token" ]
        },
        "spec" : {
          "$ref" : "#/definitions/HarnessApiAccessSpecDTO"
        }
      }
    },
    "HarnessApiAccessSpecDTO" : {
      "type" : "object"
    },
    "HarnessAuthentication" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Http", "Ssh" ]
        },
        "spec" : {
          "$ref" : "#/definitions/HarnessHttpCredentials"
        }
      }
    },
    "HarnessConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication", "type", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "validationRepo" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/HarnessAuthentication"
          },
          "apiAccess" : {
            "$ref" : "#/definitions/HarnessApiAccess"
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Account", "Repo", "Project" ]
          }
        }
      } ]
    },
    "HarnessHttpCredentials" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernameToken" ]
        },
        "spec" : {
          "$ref" : "#/definitions/HarnessHttpCredentialsSpecDTO"
        }
      }
    },
    "HarnessHttpCredentialsSpecDTO" : {
      "type" : "object"
    },
    "HarnessJWTTokenSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HarnessApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessTokenSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HarnessApiAccessSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessUsernameToken" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HarnessHttpCredentialsSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HostDTO" : {
      "type" : "object",
      "required" : [ "hostname" ],
      "properties" : {
        "hostname" : {
          "type" : "string"
        },
        "hostAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "HttpHelmAuthCredentialsDTO" : {
      "type" : "object"
    },
    "HttpHelmAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous" ]
        },
        "spec" : {
          "$ref" : "#/definitions/HttpHelmAuthCredentialsDTO"
        }
      }
    },
    "HttpHelmConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "helmRepoUrl" ],
        "properties" : {
          "helmRepoUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/HttpHelmAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "HttpHelmUsernamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HttpHelmAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JDBCAuthCredentialsDTO" : {
      "type" : "object"
    },
    "JDBCAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword" ]
        },
        "spec" : {
          "$ref" : "#/definitions/JDBCAuthCredentialsDTO"
        }
      }
    },
    "JDBCConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/JDBCAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "JDBCUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JDBCAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JenkinsAuthCredentialsDTO" : {
      "type" : "object"
    },
    "JenkinsAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous", "Bearer Token(HTTP Header)" ]
        },
        "spec" : {
          "$ref" : "#/definitions/JenkinsAuthCredentialsDTO"
        }
      }
    },
    "JenkinsBearerTokenDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JenkinsAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "tokenRef" ],
        "properties" : {
          "tokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JenkinsConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "jenkinsUrl" ],
        "properties" : {
          "jenkinsUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/JenkinsAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "JenkinsUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JenkinsAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JiraAuthCredentialsDTO" : {
      "type" : "object"
    },
    "JiraAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "PersonalAccessToken" ]
        },
        "spec" : {
          "$ref" : "#/definitions/JiraAuthCredentialsDTO"
        }
      }
    },
    "JiraConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "auth", "jiraUrl" ],
        "properties" : {
          "jiraUrl" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "auth" : {
            "$ref" : "#/definitions/JiraAuthenticationDTO"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "JiraPATDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JiraAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "patRef" ],
        "properties" : {
          "patRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JiraUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JiraAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "KubernetesAuthCredentialDTO" : {
      "type" : "object"
    },
    "KubernetesAuthDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "ClientKeyCert", "ServiceAccount", "OpenIdConnect" ]
        },
        "spec" : {
          "$ref" : "#/definitions/KubernetesAuthCredentialDTO"
        }
      }
    },
    "KubernetesClientKeyCertDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/KubernetesAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "clientCertRef", "clientKeyRef" ],
        "properties" : {
          "caCertRef" : {
            "type" : "string"
          },
          "clientCertRef" : {
            "type" : "string"
          },
          "clientKeyRef" : {
            "type" : "string"
          },
          "clientKeyPassphraseRef" : {
            "type" : "string"
          },
          "clientKeyAlgo" : {
            "type" : "string"
          }
        }
      } ]
    },
    "KubernetesClusterConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/KubernetesCredentialDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "KubernetesClusterDetailsDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/KubernetesCredentialSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "auth", "masterUrl" ],
        "properties" : {
          "masterUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/KubernetesAuthDTO"
          }
        }
      } ]
    },
    "KubernetesCredentialDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "InheritFromDelegate", "ManualConfig" ]
        },
        "spec" : {
          "$ref" : "#/definitions/KubernetesCredentialSpecDTO"
        }
      }
    },
    "KubernetesCredentialSpecDTO" : {
      "type" : "object"
    },
    "KubernetesOpenIdConnectDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/KubernetesAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "oidcClientIdRef", "oidcPasswordRef" ],
        "properties" : {
          "oidcIssuerUrl" : {
            "type" : "string"
          },
          "oidcUsername" : {
            "type" : "string"
          },
          "oidcUsernameRef" : {
            "type" : "string"
          },
          "oidcClientIdRef" : {
            "type" : "string"
          },
          "oidcPasswordRef" : {
            "type" : "string"
          },
          "oidcSecretRef" : {
            "type" : "string"
          },
          "oidcScopes" : {
            "type" : "string"
          }
        }
      } ]
    },
    "KubernetesServiceAccountDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/KubernetesAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "serviceAccountTokenRef" ],
        "properties" : {
          "serviceAccountTokenRef" : {
            "type" : "string"
          },
          "caCertRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "KubernetesUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/KubernetesAuthCredentialDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "LocalConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "properties" : {
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "NameValuePairWithDefault" : {
      "type" : "object",
      "required" : [ "type", "value" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "useAsDefault" : {
          "type" : "boolean"
        }
      }
    },
    "NewRelicConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "apiKeyRef", "newRelicAccountId", "url" ],
        "properties" : {
          "newRelicAccountId" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "apiKeyRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "NexusAuthCredentials" : {
      "type" : "object"
    },
    "NexusAuthentication" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous" ]
        },
        "spec" : {
          "$ref" : "#/definitions/NexusAuthCredentials"
        }
      }
    },
    "NexusConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "nexusServerUrl", "version" ],
        "properties" : {
          "nexusServerUrl" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/NexusAuthentication"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "NexusUsernamePasswordAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NexusAuthCredentials"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OciHelmAuthCredentialsDTO" : {
      "type" : "object"
    },
    "OciHelmAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "Anonymous" ]
        },
        "spec" : {
          "$ref" : "#/definitions/OciHelmAuthCredentialsDTO"
        }
      }
    },
    "OciHelmConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "helmRepoUrl" ],
        "properties" : {
          "helmRepoUrl" : {
            "type" : "string"
          },
          "auth" : {
            "$ref" : "#/definitions/OciHelmAuthenticationDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "OciHelmUsernamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/OciHelmAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OidcAccessTokenOptions" : {
      "type" : "object",
      "properties" : {
        "userProject" : {
          "type" : "string"
        }
      }
    },
    "OidcChartmuseumGcpConfig" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "audience" : {
          "type" : "string"
        },
        "subject_token_type" : {
          "type" : "string"
        },
        "token_url" : {
          "type" : "string"
        },
        "service_account_impersonation_url" : {
          "type" : "string"
        }
      }
    },
    "OidcWorkloadAccessTokenRequest" : {
      "type" : "object",
      "properties" : {
        "audience" : {
          "type" : "string"
        },
        "grant_type" : {
          "type" : "string"
        },
        "requested_token_type" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string"
        },
        "subject_token_type" : {
          "type" : "string"
        },
        "subject_token" : {
          "type" : "string"
        },
        "options" : {
          "$ref" : "#/definitions/OidcAccessTokenOptions"
        }
      }
    },
    "PagerDutyConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "apiTokenRef" ],
        "properties" : {
          "apiTokenRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "PhysicalDataCenterConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HostDTO"
            }
          }
        }
      } ]
    },
    "PrometheusConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CustomHealthKeyAndValue"
            }
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "RancherConnectorBearerTokenAuthenticationDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RancherConnectorConfigAuthenticationSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RancherConnectorConfigAuthCredentialsDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "BearerToken" ]
        },
        "spec" : {
          "$ref" : "#/definitions/RancherConnectorConfigAuthenticationSpecDTO"
        }
      }
    },
    "RancherConnectorConfigAuthDTO" : {
      "type" : "object",
      "required" : [ "auth", "rancherUrl" ],
      "properties" : {
        "rancherUrl" : {
          "type" : "string"
        },
        "auth" : {
          "$ref" : "#/definitions/RancherConnectorConfigAuthCredentialsDTO"
        }
      }
    },
    "RancherConnectorConfigAuthenticationSpecDTO" : {
      "type" : "object"
    },
    "RancherConnectorConfigDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ManualConfig" ]
        },
        "spec" : {
          "$ref" : "#/definitions/RancherConnectorConfigAuthDTO"
        }
      }
    },
    "RancherConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "credential" : {
            "$ref" : "#/definitions/RancherConnectorConfigDTO"
          }
        }
      } ]
    },
    "ResponseConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ConnectorResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowADFSDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceNowAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "adfsUrl", "certificateRef", "clientIdRef", "privateKeyRef", "resourceIdRef" ],
        "properties" : {
          "certificateRef" : {
            "type" : "string"
          },
          "privateKeyRef" : {
            "type" : "string"
          },
          "clientIdRef" : {
            "type" : "string"
          },
          "resourceIdRef" : {
            "type" : "string"
          },
          "adfsUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServiceNowAuthCredentialsDTO" : {
      "type" : "object"
    },
    "ServiceNowAuthenticationDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "UsernamePassword", "AdfsClientCredentialsWithCertificate", "RefreshTokenGrantType" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ServiceNowAuthCredentialsDTO"
        }
      }
    },
    "ServiceNowConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "auth", "serviceNowUrl" ],
        "properties" : {
          "serviceNowUrl" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "auth" : {
            "$ref" : "#/definitions/ServiceNowAuthenticationDTO"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ServiceNowRefreshTokenDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceNowAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "clientIdRef", "refreshTokenRef", "tokenUrl" ],
        "properties" : {
          "tokenUrl" : {
            "type" : "string"
          },
          "refreshTokenRef" : {
            "type" : "string"
          },
          "clientIdRef" : {
            "type" : "string"
          },
          "clientSecretRef" : {
            "type" : "string"
          },
          "scope" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServiceNowUserNamePasswordDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceNowAuthCredentialsDTO"
      }, {
        "type" : "object",
        "required" : [ "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SignalFXConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "apiTokenRef", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "apiTokenRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "SplunkConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "accountId", "splunkUrl" ],
        "properties" : {
          "splunkUrl" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "accountId" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "tokenRef" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "UsernamePassword", "Anonymous", "Bearer Token(HTTP Header)", "HEC Token" ]
          }
        }
      } ]
    },
    "SpotConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/SpotCredential"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "SpotCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "PermanentTokenConfig" ]
        },
        "spec" : {
          "$ref" : "#/definitions/SpotCredentialSpec"
        }
      }
    },
    "SpotCredentialSpec" : {
      "type" : "object"
    },
    "SpotPermanentTokenConfigSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SpotCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "apiTokenRef" ],
        "properties" : {
          "spotAccountId" : {
            "type" : "string"
          },
          "spotAccountIdRef" : {
            "type" : "string"
          },
          "apiTokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SumoLogicConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "accessIdRef", "accessKeyRef", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "accessIdRef" : {
            "type" : "string"
          },
          "accessKeyRef" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TasConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential" ],
        "properties" : {
          "credential" : {
            "$ref" : "#/definitions/TasCredential"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TasCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ManualConfig" ]
        },
        "spec" : {
          "$ref" : "#/definitions/TasCredentialSpec"
        }
      }
    },
    "TasCredentialSpec" : {
      "type" : "object"
    },
    "TasManualDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TasCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "endpointUrl", "passwordRef" ],
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "endpointUrl" : {
            "type" : "string",
            "readOnly" : true
          },
          "usernameRef" : {
            "type" : "string"
          },
          "passwordRef" : {
            "type" : "string"
          },
          "refreshTokenRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TemplateLinkConfigForCustomSecretManager" : {
      "type" : "object",
      "required" : [ "templateRef", "versionLabel" ],
      "properties" : {
        "templateRef" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string",
          "pattern" : "^[0-9a-zA-Z][^\\s/&]{0,63}$"
        },
        "templateInputs" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NameValuePairWithDefault"
            }
          }
        }
      }
    },
    "TerraformCloudConnector" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "credential", "terraformCloudUrl" ],
        "properties" : {
          "terraformCloudUrl" : {
            "type" : "string"
          },
          "credential" : {
            "$ref" : "#/definitions/TerraformCloudCredential"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executeOnDelegate" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TerraformCloudCredential" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ApiToken" ]
        },
        "spec" : {
          "$ref" : "#/definitions/TerraformCloudCredentialSpec"
        }
      }
    },
    "TerraformCloudCredentialSpec" : {
      "type" : "object"
    },
    "TerraformCloudTokenCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "apiToken" ],
        "properties" : {
          "apiToken" : {
            "type" : "string",
            "readOnly" : true
          }
        }
      } ]
    },
    "VaultConnectorDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ConnectorConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "renewalIntervalMinutes", "vaultUrl" ],
        "properties" : {
          "authToken" : {
            "type" : "string"
          },
          "basePath" : {
            "type" : "string"
          },
          "vaultUrl" : {
            "type" : "string"
          },
          "renewalIntervalMinutes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "secretEngineManuallyConfigured" : {
            "type" : "boolean"
          },
          "secretEngineName" : {
            "type" : "string"
          },
          "appRoleId" : {
            "type" : "string"
          },
          "appRolePath" : {
            "type" : "string"
          },
          "secretId" : {
            "type" : "string"
          },
          "secretEngineVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "namespace" : {
            "type" : "string"
          },
          "sinkPath" : {
            "type" : "string"
          },
          "useVaultAgent" : {
            "type" : "boolean"
          },
          "useAwsIam" : {
            "type" : "boolean"
          },
          "awsRegion" : {
            "type" : "string"
          },
          "vaultAwsIamRole" : {
            "type" : "string"
          },
          "useK8sAuth" : {
            "type" : "boolean"
          },
          "vaultK8sAuthRole" : {
            "type" : "string"
          },
          "serviceAccountTokenPath" : {
            "type" : "string"
          },
          "k8sAuthEndpoint" : {
            "type" : "string"
          },
          "renewAppRoleToken" : {
            "type" : "boolean"
          },
          "enableCache" : {
            "type" : "boolean"
          },
          "ignoreTestConnection" : {
            "type" : "boolean"
          },
          "readOnly" : {
            "type" : "boolean"
          },
          "default" : {
            "type" : "boolean"
          },
          "accessType" : {
            "type" : "string",
            "enum" : [ "APP_ROLE", "TOKEN", "VAULT_AGENT", "AWS_IAM", "K8s_AUTH" ]
          },
          "ngCertificateRef" : {
            "type" : "string"
          },
          "xvaultAwsIamServerId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Connector" : {
      "type" : "object",
      "properties" : {
        "connector" : {
          "$ref" : "#/definitions/ConnectorInfoDTO"
        }
      }
    },
    "PageConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectorResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageConnectorResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ConnectorsTestRegisterRequest" : {
      "type" : "object",
      "properties" : {
        "preFlightRequestId" : {
          "type" : "string"
        },
        "connectorRefs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseConnectorsTestRegisterRequest" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ConnectorsTestRegisterRequest"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ConnectorValidationResult" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "PARTIAL", "UNKNOWN", "PENDING" ]
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ErrorDetail"
          }
        },
        "errorSummary" : {
          "type" : "string"
        },
        "testedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "delegateId" : {
          "type" : "string"
        },
        "taskId" : {
          "type" : "string"
        }
      }
    },
    "ResponseConnectorValidationResult" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ConnectorValidationResult"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ConnectorCatalogueItem" : {
      "type" : "object",
      "properties" : {
        "category" : {
          "type" : "string",
          "enum" : [ "CLOUD_PROVIDER", "SECRET_MANAGER", "CLOUD_COST", "ARTIFACTORY", "CODE_REPO", "MONITORING", "TICKETING", "DATABASE" ]
        },
        "connectors" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
          }
        }
      }
    },
    "ConnectorCatalogueResponse" : {
      "type" : "object",
      "properties" : {
        "catalogue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectorCatalogueItem"
          }
        }
      }
    },
    "ResponseConnectorCatalogueResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ConnectorCatalogueResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CcmK8sConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "k8sConnector" : {
          "$ref" : "#/definitions/ConnectorResponse"
        },
        "ccmk8sConnector" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectorResponse"
          }
        }
      }
    },
    "PageCcmK8sConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CcmK8sConnectorResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageCcmK8sConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageCcmK8sConnectorResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ConnectorStatistics" : {
      "type" : "object",
      "properties" : {
        "typeStats" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectorTypeStatistics"
          }
        },
        "statusStats" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectorStatusStatistics"
          }
        }
      }
    },
    "ConnectorStatusStatistics" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "PARTIAL", "UNKNOWN", "PENDING" ]
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ConnectorTypeStatistics" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseConnectorStatistics" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ConnectorStatistics"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectorResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FieldValues" : {
      "type" : "object",
      "properties" : {
        "fieldValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "ResponseFieldValues" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FieldValues"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListString" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CICreditDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CreditDTO"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "CreditDTO" : {
      "type" : "object",
      "discriminator" : "moduleType",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "creditStatus" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "EXPIRED" ]
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32"
        },
        "purchaseTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expiryTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "creditType" : {
          "type" : "string",
          "enum" : [ "PAID", "FREE" ]
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "usedCredits" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseCreditDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CreditDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseVoid" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/Void"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Void" : {
      "type" : "object"
    },
    "ResponseListCreditDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CreditDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AvailabilityRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "CustomRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "DurationRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "timeUnit" : {
            "$ref" : "#/definitions/TimeUnit"
          }
        }
      } ]
    },
    "FeatureRestrictionMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "enum" : [ "TEST1", "TEST2", "TEST3", "TEST4", "TEST5", "TEST6", "TEST7", "PERSPECTIVES", "CCM_K8S_CLUSTERS", "CCM_AUTOSTOPPING_RULES", "MULTIPLE_ORGANIZATIONS", "MULTIPLE_PROJECTS", "MULTIPLE_SECRETS", "MULTIPLE_USER_GROUPS", "MULTIPLE_USERS", "MULTIPLE_SERVICE_ACCOUNTS", "MULTIPLE_VARIABLES", "MULTIPLE_CONNECTORS", "MULTIPLE_API_KEYS", "MULTIPLE_API_TOKENS", "INTEGRATED_APPROVALS_WITH_HARNESS_UI", "INTEGRATED_APPROVALS_WITH_CUSTOM_SCRIPT", "INTEGRATED_APPROVALS_WITH_JIRA", "SECRET_MANAGERS", "DEPLOYMENTS", "INITIAL_DEPLOYMENTS", "DEPLOYMENTS_PER_MONTH", "SERVICES", "BUILDS", "SAML_SUPPORT", "OAUTH_SUPPORT", "LDAP_SUPPORT", "TWO_FACTOR_AUTH_SUPPORT", "CUSTOM_ROLES", "CUSTOM_RESOURCE_GROUPS", "MAX_TOTAL_BUILDS", "MAX_BUILDS_PER_MONTH", "MAX_BUILDS_PER_DAY", "ACTIVE_COMMITTERS", "TEST_INTELLIGENCE", "TEMPLATE_SERVICE", "CACHE_SIZE_ALLOWANCE", "AUDIT_STREAMING_DESTINATION", "SRM_SERVICES", "ANALYZE_DEPLOYMENT_STEP", "TERRAFORM_APPLY", "TERRAFORM_PLAN", "TERRAFORM_DESTROY", "TERRAFORM_ROLLBACK", "INTEGRATED_APPROVALS_WITH_SERVICE_NOW", "CREATE_STACK", "DELETE_STACK", "ROLLBACK_STACK", "COMMAND", "AZURE_SLOT_DEPLOYMENT", "AZURE_TRAFFIC_SHIFT", "AZURE_SWAP_SLOT", "AZURE_WEBAPP_ROLLBACK", "JENKINS_BUILD", "AZURE_CREATE_ARM_RESOURCE", "AZURE_CREATE_BP_RESOURCE", "AZURE_ROLLBACK_ARM_RESOURCE", "SHELL_SCRIPT_PROVISION", "TERRAFORM_CLOUD_RUN", "TERRAFORM_CLOUD_ROLLBACK", "SECURITY", "DEVELOPERS", "MONTHLY_ACTIVE_USERS", "STRATEGY_MAX_CONCURRENT", "MAX_PARALLEL_STEP_IN_A_PIPELINE", "PIPELINE_EXECUTION_DATA_RETENTION_DAYS", "MAX_PIPELINE_TIMEOUT_SECONDS", "MAX_STAGE_TIMEOUT_SECONDS", "MAX_STEP_TIMEOUT_SECONDS", "MAX_CONCURRENT_ACTIVE_PIPELINE_EXECUTIONS", "MAX_CHAOS_EXPERIMENT_RUNS_PER_MONTH", "MAX_CHAOS_INFRASTRUCTURES", "TERRAGRUNT_PLAN", "TERRAGRUNT_APPLY", "TERRAGRUNT_DESTROY", "TERRAGRUNT_ROLLBACK", "SEI_MAX_NUMBER_OF_CONTRIBUTORS", "IDP_ACTIVE_DEVELOPERS", "SUCCESSFUL_APPLIES" ]
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "edition" : {
          "type" : "string",
          "enum" : [ "COMMUNITY", "FREE", "TEAM", "ENTERPRISE", "STARTUP" ]
        },
        "restrictionMetadata" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/RestrictionMetadataDTO"
          }
        }
      }
    },
    "LicenseRateLimitRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fieldName" : {
            "type" : "string"
          },
          "timeUnit" : {
            "$ref" : "#/definitions/TimeUnit"
          }
        }
      } ]
    },
    "LicenseStaticLimitRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fieldName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RateLimitRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timeUnit" : {
            "$ref" : "#/definitions/TimeUnit"
          },
          "allowedIfEqual" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ResponseListFeatureRestrictionMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FeatureRestrictionMetadataDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RestrictionMetadataDTO" : {
      "type" : "object",
      "discriminator" : "restrictionType",
      "properties" : {
        "restrictionType" : {
          "type" : "string",
          "enum" : [ "AVAILABILITY", "STATIC_LIMIT", "RATE_LIMIT", "CUSTOM", "DURATION", "LICENSE_RATE_LIMIT", "LICENSE_STATIC_LIMIT" ]
        }
      }
    },
    "StaticLimitRestrictionMetadataDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionMetadataDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "allowedIfEqual" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TimeUnit" : {
      "type" : "object",
      "properties" : {
        "unit" : {
          "type" : "string",
          "enum" : [ "NANOS", "MICROS", "MILLIS", "SECONDS", "MINUTES", "HOURS", "HALF_DAYS", "DAYS", "WEEKS", "MONTHS", "YEARS", "DECADES", "CENTURIES", "MILLENNIA", "ERAS", "FOREVER" ]
        },
        "numberOfUnits" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseFeatureRestrictionMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FeatureRestrictionMetadataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AvailabilityRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "CustomRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object"
      } ]
    },
    "DurationRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object",
        "properties" : {
          "timeUnit" : {
            "$ref" : "#/definitions/TimeUnit"
          }
        }
      } ]
    },
    "FeatureRestrictionDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "enum" : [ "TEST1", "TEST2", "TEST3", "TEST4", "TEST5", "TEST6", "TEST7", "PERSPECTIVES", "CCM_K8S_CLUSTERS", "CCM_AUTOSTOPPING_RULES", "MULTIPLE_ORGANIZATIONS", "MULTIPLE_PROJECTS", "MULTIPLE_SECRETS", "MULTIPLE_USER_GROUPS", "MULTIPLE_USERS", "MULTIPLE_SERVICE_ACCOUNTS", "MULTIPLE_VARIABLES", "MULTIPLE_CONNECTORS", "MULTIPLE_API_KEYS", "MULTIPLE_API_TOKENS", "INTEGRATED_APPROVALS_WITH_HARNESS_UI", "INTEGRATED_APPROVALS_WITH_CUSTOM_SCRIPT", "INTEGRATED_APPROVALS_WITH_JIRA", "SECRET_MANAGERS", "DEPLOYMENTS", "INITIAL_DEPLOYMENTS", "DEPLOYMENTS_PER_MONTH", "SERVICES", "BUILDS", "SAML_SUPPORT", "OAUTH_SUPPORT", "LDAP_SUPPORT", "TWO_FACTOR_AUTH_SUPPORT", "CUSTOM_ROLES", "CUSTOM_RESOURCE_GROUPS", "MAX_TOTAL_BUILDS", "MAX_BUILDS_PER_MONTH", "MAX_BUILDS_PER_DAY", "ACTIVE_COMMITTERS", "TEST_INTELLIGENCE", "TEMPLATE_SERVICE", "CACHE_SIZE_ALLOWANCE", "AUDIT_STREAMING_DESTINATION", "SRM_SERVICES", "ANALYZE_DEPLOYMENT_STEP", "TERRAFORM_APPLY", "TERRAFORM_PLAN", "TERRAFORM_DESTROY", "TERRAFORM_ROLLBACK", "INTEGRATED_APPROVALS_WITH_SERVICE_NOW", "CREATE_STACK", "DELETE_STACK", "ROLLBACK_STACK", "COMMAND", "AZURE_SLOT_DEPLOYMENT", "AZURE_TRAFFIC_SHIFT", "AZURE_SWAP_SLOT", "AZURE_WEBAPP_ROLLBACK", "JENKINS_BUILD", "AZURE_CREATE_ARM_RESOURCE", "AZURE_CREATE_BP_RESOURCE", "AZURE_ROLLBACK_ARM_RESOURCE", "SHELL_SCRIPT_PROVISION", "TERRAFORM_CLOUD_RUN", "TERRAFORM_CLOUD_ROLLBACK", "SECURITY", "DEVELOPERS", "MONTHLY_ACTIVE_USERS", "STRATEGY_MAX_CONCURRENT", "MAX_PARALLEL_STEP_IN_A_PIPELINE", "PIPELINE_EXECUTION_DATA_RETENTION_DAYS", "MAX_PIPELINE_TIMEOUT_SECONDS", "MAX_STAGE_TIMEOUT_SECONDS", "MAX_STEP_TIMEOUT_SECONDS", "MAX_CONCURRENT_ACTIVE_PIPELINE_EXECUTIONS", "MAX_CHAOS_EXPERIMENT_RUNS_PER_MONTH", "MAX_CHAOS_INFRASTRUCTURES", "TERRAGRUNT_PLAN", "TERRAGRUNT_APPLY", "TERRAGRUNT_DESTROY", "TERRAGRUNT_ROLLBACK", "SEI_MAX_NUMBER_OF_CONTRIBUTORS", "IDP_ACTIVE_DEVELOPERS", "SUCCESSFUL_APPLIES" ]
        },
        "description" : {
          "type" : "string"
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "allowed" : {
          "type" : "boolean"
        },
        "restrictionType" : {
          "type" : "string",
          "enum" : [ "AVAILABILITY", "STATIC_LIMIT", "RATE_LIMIT", "CUSTOM", "DURATION", "LICENSE_RATE_LIMIT", "LICENSE_STATIC_LIMIT" ]
        },
        "restriction" : {
          "$ref" : "#/definitions/RestrictionDTO"
        }
      }
    },
    "LicenseRateLimitRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fieldName" : {
            "type" : "string"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timeUnit" : {
            "$ref" : "#/definitions/TimeUnit"
          }
        }
      } ]
    },
    "LicenseStaticLimitRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fieldName" : {
            "type" : "string"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "RateLimitRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timeUnit" : {
            "$ref" : "#/definitions/TimeUnit"
          }
        }
      } ]
    },
    "ResponseListFeatureRestrictionDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FeatureRestrictionDetailsDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RestrictionDTO" : {
      "type" : "object",
      "discriminator" : "restrictionType"
    },
    "StaticLimitRestrictionDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RestrictionDTO"
      }, {
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "FeatureRestrictionDetailListRequestDTO" : {
      "type" : "object",
      "required" : [ "names" ],
      "properties" : {
        "names" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "TEST1", "TEST2", "TEST3", "TEST4", "TEST5", "TEST6", "TEST7", "PERSPECTIVES", "CCM_K8S_CLUSTERS", "CCM_AUTOSTOPPING_RULES", "MULTIPLE_ORGANIZATIONS", "MULTIPLE_PROJECTS", "MULTIPLE_SECRETS", "MULTIPLE_USER_GROUPS", "MULTIPLE_USERS", "MULTIPLE_SERVICE_ACCOUNTS", "MULTIPLE_VARIABLES", "MULTIPLE_CONNECTORS", "MULTIPLE_API_KEYS", "MULTIPLE_API_TOKENS", "INTEGRATED_APPROVALS_WITH_HARNESS_UI", "INTEGRATED_APPROVALS_WITH_CUSTOM_SCRIPT", "INTEGRATED_APPROVALS_WITH_JIRA", "SECRET_MANAGERS", "DEPLOYMENTS", "INITIAL_DEPLOYMENTS", "DEPLOYMENTS_PER_MONTH", "SERVICES", "BUILDS", "SAML_SUPPORT", "OAUTH_SUPPORT", "LDAP_SUPPORT", "TWO_FACTOR_AUTH_SUPPORT", "CUSTOM_ROLES", "CUSTOM_RESOURCE_GROUPS", "MAX_TOTAL_BUILDS", "MAX_BUILDS_PER_MONTH", "MAX_BUILDS_PER_DAY", "ACTIVE_COMMITTERS", "TEST_INTELLIGENCE", "TEMPLATE_SERVICE", "CACHE_SIZE_ALLOWANCE", "AUDIT_STREAMING_DESTINATION", "SRM_SERVICES", "ANALYZE_DEPLOYMENT_STEP", "TERRAFORM_APPLY", "TERRAFORM_PLAN", "TERRAFORM_DESTROY", "TERRAFORM_ROLLBACK", "INTEGRATED_APPROVALS_WITH_SERVICE_NOW", "CREATE_STACK", "DELETE_STACK", "ROLLBACK_STACK", "COMMAND", "AZURE_SLOT_DEPLOYMENT", "AZURE_TRAFFIC_SHIFT", "AZURE_SWAP_SLOT", "AZURE_WEBAPP_ROLLBACK", "JENKINS_BUILD", "AZURE_CREATE_ARM_RESOURCE", "AZURE_CREATE_BP_RESOURCE", "AZURE_ROLLBACK_ARM_RESOURCE", "SHELL_SCRIPT_PROVISION", "TERRAFORM_CLOUD_RUN", "TERRAFORM_CLOUD_ROLLBACK", "SECURITY", "DEVELOPERS", "MONTHLY_ACTIVE_USERS", "STRATEGY_MAX_CONCURRENT", "MAX_PARALLEL_STEP_IN_A_PIPELINE", "PIPELINE_EXECUTION_DATA_RETENTION_DAYS", "MAX_PIPELINE_TIMEOUT_SECONDS", "MAX_STAGE_TIMEOUT_SECONDS", "MAX_STEP_TIMEOUT_SECONDS", "MAX_CONCURRENT_ACTIVE_PIPELINE_EXECUTIONS", "MAX_CHAOS_EXPERIMENT_RUNS_PER_MONTH", "MAX_CHAOS_INFRASTRUCTURES", "TERRAGRUNT_PLAN", "TERRAGRUNT_APPLY", "TERRAGRUNT_DESTROY", "TERRAGRUNT_ROLLBACK", "SEI_MAX_NUMBER_OF_CONTRIBUTORS", "IDP_ACTIVE_DEVELOPERS", "SUCCESSFUL_APPLIES" ]
          }
        }
      }
    },
    "ResponseFeatureRestrictionDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FeatureRestrictionDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FeatureRestrictionDetailRequestDTO" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "enum" : [ "TEST1", "TEST2", "TEST3", "TEST4", "TEST5", "TEST6", "TEST7", "PERSPECTIVES", "CCM_K8S_CLUSTERS", "CCM_AUTOSTOPPING_RULES", "MULTIPLE_ORGANIZATIONS", "MULTIPLE_PROJECTS", "MULTIPLE_SECRETS", "MULTIPLE_USER_GROUPS", "MULTIPLE_USERS", "MULTIPLE_SERVICE_ACCOUNTS", "MULTIPLE_VARIABLES", "MULTIPLE_CONNECTORS", "MULTIPLE_API_KEYS", "MULTIPLE_API_TOKENS", "INTEGRATED_APPROVALS_WITH_HARNESS_UI", "INTEGRATED_APPROVALS_WITH_CUSTOM_SCRIPT", "INTEGRATED_APPROVALS_WITH_JIRA", "SECRET_MANAGERS", "DEPLOYMENTS", "INITIAL_DEPLOYMENTS", "DEPLOYMENTS_PER_MONTH", "SERVICES", "BUILDS", "SAML_SUPPORT", "OAUTH_SUPPORT", "LDAP_SUPPORT", "TWO_FACTOR_AUTH_SUPPORT", "CUSTOM_ROLES", "CUSTOM_RESOURCE_GROUPS", "MAX_TOTAL_BUILDS", "MAX_BUILDS_PER_MONTH", "MAX_BUILDS_PER_DAY", "ACTIVE_COMMITTERS", "TEST_INTELLIGENCE", "TEMPLATE_SERVICE", "CACHE_SIZE_ALLOWANCE", "AUDIT_STREAMING_DESTINATION", "SRM_SERVICES", "ANALYZE_DEPLOYMENT_STEP", "TERRAFORM_APPLY", "TERRAFORM_PLAN", "TERRAFORM_DESTROY", "TERRAFORM_ROLLBACK", "INTEGRATED_APPROVALS_WITH_SERVICE_NOW", "CREATE_STACK", "DELETE_STACK", "ROLLBACK_STACK", "COMMAND", "AZURE_SLOT_DEPLOYMENT", "AZURE_TRAFFIC_SHIFT", "AZURE_SWAP_SLOT", "AZURE_WEBAPP_ROLLBACK", "JENKINS_BUILD", "AZURE_CREATE_ARM_RESOURCE", "AZURE_CREATE_BP_RESOURCE", "AZURE_ROLLBACK_ARM_RESOURCE", "SHELL_SCRIPT_PROVISION", "TERRAFORM_CLOUD_RUN", "TERRAFORM_CLOUD_ROLLBACK", "SECURITY", "DEVELOPERS", "MONTHLY_ACTIVE_USERS", "STRATEGY_MAX_CONCURRENT", "MAX_PARALLEL_STEP_IN_A_PIPELINE", "PIPELINE_EXECUTION_DATA_RETENTION_DAYS", "MAX_PIPELINE_TIMEOUT_SECONDS", "MAX_STAGE_TIMEOUT_SECONDS", "MAX_STEP_TIMEOUT_SECONDS", "MAX_CONCURRENT_ACTIVE_PIPELINE_EXECUTIONS", "MAX_CHAOS_EXPERIMENT_RUNS_PER_MONTH", "MAX_CHAOS_INFRASTRUCTURES", "TERRAGRUNT_PLAN", "TERRAGRUNT_APPLY", "TERRAGRUNT_DESTROY", "TERRAGRUNT_ROLLBACK", "SEI_MAX_NUMBER_OF_CONTRIBUTORS", "IDP_ACTIVE_DEVELOPERS", "SUCCESSFUL_APPLIES" ]
        }
      }
    },
    "FileDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "identifier", "name", "parentIdentifier", "type" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "fileUsage" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "FILE", "FOLDER" ]
        },
        "parentIdentifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGTag"
          }
        },
        "mimeType" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "draft" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "createdBy" : {
          "readOnly" : true,
          "$ref" : "#/definitions/EmbeddedUserDetailsDTO"
        },
        "lastModifiedBy" : {
          "readOnly" : true,
          "$ref" : "#/definitions/EmbeddedUserDetailsDTO"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        }
      }
    },
    "ResponseFileDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FileDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageFileDTO" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileDTO"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePageFileDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageFileDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FileStoreRequest" : {
      "type" : "object",
      "required" : [ "file" ],
      "properties" : {
        "file" : {
          "$ref" : "#/definitions/FileDTO"
        }
      }
    },
    "FileNodeDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FileStoreNodeDTO"
      }, {
        "type" : "object",
        "required" : [ "fileUsage" ],
        "properties" : {
          "fileUsage" : {
            "type" : "string",
            "enum" : [ "MANIFEST_FILE", "CONFIG", "SCRIPT" ]
          },
          "description" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGTag"
            }
          },
          "mimeType" : {
            "type" : "string"
          },
          "content" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "FileStoreNodeDTO" : {
      "type" : "object",
      "required" : [ "identifier", "name", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "parentIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "FILE", "FOLDER" ]
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "readOnly" : true,
          "$ref" : "#/definitions/EmbeddedUserDetailsDTO"
        }
      }
    },
    "FolderNodeDTO" : {
      "type" : "object",
      "required" : [ "identifier", "name", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "parentIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "FILE", "FOLDER" ]
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "readOnly" : true,
          "$ref" : "#/definitions/EmbeddedUserDetailsDTO"
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileStoreNodeDTO"
          }
        }
      }
    },
    "ResponseFolderNodeDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FolderNodeDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListEntityType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetEmbeddedUserDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/EmbeddedUserDetailsDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EntityDetail" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        },
        "entityRef" : {
          "$ref" : "#/definitions/EntityReference"
        },
        "name" : {
          "type" : "string"
        },
        "entityGitMetadata" : {
          "$ref" : "#/definitions/EntityGitMetadata"
        }
      }
    },
    "EntityGitMetadata" : {
      "type" : "object",
      "properties" : {
        "branch" : {
          "type" : "string"
        },
        "repo" : {
          "type" : "string"
        }
      }
    },
    "EntityReference" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "default" : {
          "type" : "boolean"
        },
        "repoIdentifier" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "branch" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        }
      }
    },
    "EntityReferredByInfraSetupUsageDetail" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SetupUsageDetail"
      }, {
        "type" : "object",
        "properties" : {
          "environmentIdentifier" : {
            "type" : "string"
          },
          "environmentName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EntityReferredByOverridesSetupUsageDetail" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SetupUsageDetail"
      }, {
        "type" : "object",
        "properties" : {
          "identifier" : {
            "type" : "string"
          },
          "overrideType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EntityReferredByPipelineSetupUsageDetail" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SetupUsageDetail"
      }, {
        "type" : "object",
        "properties" : {
          "identifier" : {
            "type" : "string"
          },
          "referenceType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EntitySetupUsageDTO" : {
      "type" : "object",
      "required" : [ "referredByEntity" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "referredEntity" : {
          "$ref" : "#/definitions/EntityDetail"
        },
        "referredByEntity" : {
          "$ref" : "#/definitions/EntityDetail"
        },
        "detail" : {
          "$ref" : "#/definitions/SetupUsageDetail"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "IdentifierRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityReference"
      }, {
        "type" : "object",
        "properties" : {
          "isDefault" : {
            "type" : "boolean"
          },
          "fullyQualifiedScopeIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InputSetReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityReference"
      }, {
        "type" : "object",
        "properties" : {
          "pipelineIdentifier" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "NGTemplateReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityReference"
      }, {
        "type" : "object",
        "properties" : {
          "versionLabel" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "PageEntitySetupUsageDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntitySetupUsageDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageEntitySetupUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageEntitySetupUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SecretReferredByConnectorSetupUsageDetail" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SetupUsageDetail"
      }, {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetupUsageDetail" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "TriggerReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityReference"
      }, {
        "type" : "object",
        "properties" : {
          "pipelineIdentifier" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "FilterDTO" : {
      "type" : "object",
      "required" : [ "filterProperties", "identifier", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "filterProperties" : {
          "$ref" : "#/definitions/FilterProperties"
        },
        "filterVisibility" : {
          "type" : "string",
          "enum" : [ "EveryOne", "OnlyCreator" ]
        }
      }
    },
    "ResponseFilterDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FilterDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageFilterDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilterDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageFilterDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageFilterDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ConnectedArgoGitOpsInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitOpsInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "adapterUrl" ],
        "properties" : {
          "adapterUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitOpsInfoDTO" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "CONNECTED_ARGO_PROVIDER", "MANAGED_ARGO_PROVIDER" ]
        }
      }
    },
    "GitopsProviderResponse" : {
      "type" : "object",
      "required" : [ "identifier", "name", "spec" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "spec" : {
          "$ref" : "#/definitions/GitOpsInfoDTO"
        }
      }
    },
    "ManagedArgoGitOpsInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GitOpsInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "namespace" ],
        "properties" : {
          "namespace" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseGitopsProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitopsProviderResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitOpsProvider" : {
      "type" : "object",
      "required" : [ "identifier", "name", "spec" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "spec" : {
          "$ref" : "#/definitions/GitOpsInfoDTO"
        }
      }
    },
    "PageGitopsProviderResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitopsProviderResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageGitopsProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageGitopsProviderResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DefaultBranchCacheResponse" : {
      "type" : "object",
      "properties" : {
        "repoUrl" : {
          "type" : "string"
        },
        "defaultBranch" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchCacheListResponse" : {
      "type" : "object",
      "properties" : {
        "defaultBranchCacheResponseList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DefaultBranchCacheResponse"
          }
        }
      }
    },
    "ResponseGitDefaultBranchCacheListResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitDefaultBranchCacheListResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchCacheListRequest" : {
      "type" : "object",
      "properties" : {
        "gitDefaultBranchCacheParamsRequestDTO" : {
          "$ref" : "#/definitions/GitDefaultBranchCacheParamsRequestDTO"
        }
      }
    },
    "GitDefaultBranchCacheParamsRequestDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "repo" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchClearCacheResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseGitDefaultBranchClearCacheResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitDefaultBranchClearCacheResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchClearCacheRequest" : {
      "type" : "object",
      "properties" : {
        "gitDefaultBranchCacheParamsRequestDTO" : {
          "$ref" : "#/definitions/GitDefaultBranchCacheParamsRequestDTO"
        }
      }
    },
    "GitDefaultBranchUpsertCacheResponse" : {
      "type" : "object",
      "properties" : {
        "defaultBranchCacheResponse" : {
          "$ref" : "#/definitions/DefaultBranchCacheResponse"
        }
      }
    },
    "ResponseGitDefaultBranchUpsertCacheResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitDefaultBranchUpsertCacheResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchCacheKeyRequestDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "repo", "repoUrl" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "repo" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchUpsertCacheRequest" : {
      "type" : "object",
      "properties" : {
        "gitDefaultBranchCacheKeyRequestDTO" : {
          "$ref" : "#/definitions/GitDefaultBranchCacheKeyRequestDTO"
        },
        "defaultBranch" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchGetCacheResponse" : {
      "type" : "object",
      "properties" : {
        "defaultBranchCacheResponse" : {
          "$ref" : "#/definitions/DefaultBranchCacheResponse"
        }
      }
    },
    "ResponseGitDefaultBranchGetCacheResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitDefaultBranchGetCacheResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitDefaultBranchGetCacheRequest" : {
      "type" : "object",
      "properties" : {
        "gitDefaultBranchCacheKeyRequestDTO" : {
          "$ref" : "#/definitions/GitDefaultBranchCacheKeyRequestDTO"
        }
      }
    },
    "GitFileCacheClearCacheResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseGitFileCacheClearCacheResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitFileCacheClearCacheResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitFileCacheClearCacheRequest" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "gitProvider" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "filepath" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string"
        }
      }
    },
    "GitFileCacheUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseGitFileCacheUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitFileCacheUpdateResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitFileCacheUpdateKey" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "gitProvider" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "filepath" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string"
        }
      }
    },
    "GitFileCacheUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "$ref" : "#/definitions/GitFileCacheUpdateKey"
        },
        "values" : {
          "$ref" : "#/definitions/GitFileCacheUpdateValues"
        }
      }
    },
    "GitFileCacheUpdateValues" : {
      "type" : "object",
      "properties" : {
        "validUntil" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "GitFileCacheDetails" : {
      "type" : "object",
      "properties" : {
        "fileContent" : {
          "type" : "string"
        },
        "objectId" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "isStale" : {
          "type" : "boolean"
        },
        "cacheExpiryTTL" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validUntilTTL" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "repoName" : {
          "type" : "string"
        },
        "filepath" : {
          "type" : "string"
        },
        "gitProvider" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string"
        }
      }
    },
    "GitFileCacheGetResponse" : {
      "type" : "object",
      "properties" : {
        "gitFileCacheDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitFileCacheDetails"
          }
        }
      }
    },
    "ResponseGitFileCacheGetResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitFileCacheGetResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitBranchDTO" : {
      "type" : "object",
      "properties" : {
        "branchName" : {
          "type" : "string"
        },
        "branchSyncStatus" : {
          "type" : "string",
          "enum" : [ "SYNCED", "SYNCING", "UNSYNCED" ]
        }
      }
    },
    "GitBranchListDTO" : {
      "type" : "object",
      "properties" : {
        "defaultBranch" : {
          "$ref" : "#/definitions/GitBranchDTO"
        },
        "branches" : {
          "$ref" : "#/definitions/PageGitBranchDTO"
        }
      }
    },
    "PageGitBranchDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitBranchDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponseGitBranchListDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitBranchListDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitSyncEntityDTO" : {
      "type" : "object",
      "properties" : {
        "entityName" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        },
        "entityIdentifier" : {
          "type" : "string"
        },
        "gitConnectorId" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "folderPath" : {
          "type" : "string"
        },
        "entityGitPath" : {
          "type" : "string"
        },
        "entityReference" : {
          "$ref" : "#/definitions/EntityReference"
        },
        "entityUrl" : {
          "type" : "string"
        }
      }
    },
    "GitSyncEntityListDTO" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gitSyncEntities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncEntityDTO"
          }
        }
      }
    },
    "GitSyncRepoFiles" : {
      "type" : "object",
      "properties" : {
        "gitSyncConfigIdentifier" : {
          "type" : "string"
        },
        "gitSyncEntityLists" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncEntityListDTO"
          }
        }
      }
    },
    "GitSyncRepoFilesList" : {
      "type" : "object",
      "properties" : {
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "gitSyncRepoFilesList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncRepoFiles"
          }
        }
      }
    },
    "ResponseGitSyncRepoFilesList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitSyncRepoFilesList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitEntityFilterProperties" : {
      "type" : "object",
      "properties" : {
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "gitSyncConfigIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "entityTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
          }
        },
        "searchTerm" : {
          "type" : "string"
        }
      }
    },
    "ResponseListGitSyncEntityListDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncEntityListDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitEntityBranchFilterSummaryProperties" : {
      "type" : "object",
      "properties" : {
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "entityTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
          }
        },
        "searchTerm" : {
          "type" : "string"
        }
      }
    },
    "PageGitSyncEntityListDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncEntityListDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageGitSyncEntityListDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageGitSyncEntityListDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitFullSyncEntityInfoDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        },
        "syncStatus" : {
          "type" : "string",
          "enum" : [ "QUEUED", "SUCCESS", "FAILED", "OVERRIDDEN" ]
        },
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "rootFolder" : {
          "type" : "string"
        },
        "retryCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "PageGitFullSyncEntityInfoDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitFullSyncEntityInfoDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageGitFullSyncEntityInfoDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageGitFullSyncEntityInfoDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitFullSyncEntityInfoFilterKeys" : {
      "type" : "object",
      "properties" : {
        "entityTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
          }
        },
        "syncStatus" : {
          "type" : "string",
          "enum" : [ "QUEUED", "SUCCESS", "FAILED", "OVERRIDDEN" ]
        }
      }
    },
    "GitFullSyncConfigDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "baseBranch" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "prTitle" : {
          "type" : "string"
        },
        "createPullRequest" : {
          "type" : "boolean"
        },
        "repoIdentifier" : {
          "type" : "string"
        },
        "targetBranch" : {
          "type" : "string"
        },
        "rootFolder" : {
          "type" : "string"
        },
        "newBranch" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseGitFullSyncConfigDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitFullSyncConfigDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitFullSyncConfigRequestDTO" : {
      "type" : "object",
      "required" : [ "branch", "repoIdentifier", "rootFolder" ],
      "properties" : {
        "branch" : {
          "type" : "string"
        },
        "repoIdentifier" : {
          "type" : "string"
        },
        "rootFolder" : {
          "type" : "string"
        },
        "baseBranch" : {
          "type" : "string"
        },
        "createPullRequest" : {
          "type" : "boolean"
        },
        "targetBranch" : {
          "type" : "string"
        },
        "prTitle" : {
          "type" : "string"
        },
        "newBranch" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseTriggerFullSyncResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TriggerFullSyncResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TriggerFullSyncResponseDTO" : {
      "type" : "object",
      "properties" : {
        "isFullSyncTriggered" : {
          "type" : "boolean"
        }
      }
    },
    "GitSyncSettingsDTO" : {
      "type" : "object",
      "required" : [ "executeOnDelegate", "orgIdentifier", "projectIdentifier" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "executeOnDelegate" : {
          "type" : "boolean"
        },
        "gitSimplificationEnabled" : {
          "type" : "boolean"
        },
        "enabledOnlyForFF" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseGitSyncSettingsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitSyncSettingsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseScmListFilesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ScmListFilesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ScmFileGitDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "blobId" : {
          "type" : "string"
        },
        "contentType" : {
          "type" : "string",
          "enum" : [ "INVALID_CONTENT_TYPE", "UNKNOWN_CONTENT", "FILE", "DIRECTORY", "SYMLINK", "GITLINK" ]
        }
      }
    },
    "ScmListFilesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "fileGitDetailsDTOList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScmFileGitDetailsDTO"
          }
        }
      }
    },
    "RepoValidationResponse" : {
      "type" : "object",
      "properties" : {
        "isValid" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseRepoValidationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RepoValidationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseUpdateGitCacheResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UpdateGitCacheResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UpdateGitCacheForFileResponseDTO" : {
      "type" : "object",
      "properties" : {
        "fileContent" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "blobId" : {
          "type" : "string"
        },
        "branchName" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "errorDetails" : {
          "type" : "string"
        },
        "errorResponse" : {
          "type" : "boolean"
        }
      }
    },
    "UpdateGitCacheResponseDTO" : {
      "type" : "object",
      "properties" : {
        "scmUpdateGitCacheForFileResponse" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/UpdateGitCacheForFileResponseDTO"
          }
        }
      }
    },
    "UpdateGitCacheRequestDTO" : {
      "type" : "object",
      "properties" : {
        "filePaths" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "branch" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        }
      }
    },
    "GitFileContent" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "string"
        },
        "objectId" : {
          "type" : "string"
        }
      }
    },
    "ResponseGitFileContent" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitFileContent"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitBranchDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "GitBranchesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "branches" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitBranchDetailsDTO"
          }
        },
        "defaultBranch" : {
          "$ref" : "#/definitions/GitBranchDetailsDTO"
        }
      }
    },
    "GitListBranchesResponse" : {
      "type" : "object",
      "properties" : {
        "gitBranchesResponse" : {
          "$ref" : "#/definitions/GitBranchesResponseDTO"
        },
        "paginationDetails" : {
          "$ref" : "#/definitions/PaginationDetails"
        },
        "connectorType" : {
          "type" : "string",
          "enum" : [ "K8sCluster", "Git", "Splunk", "AppDynamics", "Prometheus", "Dynatrace", "Vault", "AzureKeyVault", "DockerRegistry", "Local", "AwsKms", "GcpKms", "AwsSecretManager", "Gcp", "Aws", "Azure", "Artifactory", "Jira", "Nexus", "Github", "Gitlab", "Bitbucket", "Codecommit", "CEAws", "CEAzure", "GcpCloudCost", "CEK8sCluster", "HttpHelmRepo", "NewRelic", "Datadog", "SumoLogic", "PagerDuty", "CustomHealth", "ServiceNow", "ErrorTracking", "Pdc", "AzureRepo", "Jenkins", "OciHelmRepo", "CustomSecretManager", "ElasticSearch", "GcpSecretManager", "AzureArtifacts", "Tas", "Spot", "Bamboo", "TerraformCloud", "SignalFX", "Harness", "Rancher", "JDBC" ]
        }
      }
    },
    "PaginationDetails" : {
      "type" : "object",
      "properties" : {
        "nextPage" : {
          "type" : "integer",
          "format" : "int32"
        },
        "nextPageUrl" : {
          "type" : "string"
        }
      }
    },
    "ResponseGitListBranchesResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitListBranchesResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CreatePRResponse" : {
      "type" : "object",
      "properties" : {
        "prNumber" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseCreatePRResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CreatePRResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CreatePRRequest" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "sourceBranchName" : {
          "type" : "string"
        },
        "targetBranchName" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        }
      }
    },
    "GetFileResponseDTO" : {
      "type" : "object",
      "properties" : {
        "fileContent" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "blobId" : {
          "type" : "string"
        }
      }
    },
    "ResponseGetFileResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GetFileResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitRepositoryResponseDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseListGitRepositoryResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitRepositoryResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitListRepositoryResponse" : {
      "type" : "object",
      "properties" : {
        "gitRepositoryResponseList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitRepositoryResponseDTO"
          }
        },
        "paginationDetails" : {
          "$ref" : "#/definitions/PaginationDetails"
        }
      }
    },
    "ResponseGitListRepositoryResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitListRepositoryResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListUserRepoResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserRepoResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserRepoResponse" : {
      "type" : "object",
      "properties" : {
        "namespace" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseGitBranchesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitBranchesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitErrorMetadata" : {
      "type" : "object",
      "properties" : {
        "branch" : {
          "type" : "string"
        },
        "filepath" : {
          "type" : "string"
        },
        "repo" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "ResponseScmBatchGetFileResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ScmBatchGetFileResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ScmBatchGetFileResponseDTO" : {
      "type" : "object",
      "properties" : {
        "scmGetFileResponseV2DTOMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ScmGetFileResponseV2DTO"
          }
        }
      }
    },
    "ScmCacheDetails" : {
      "type" : "object",
      "properties" : {
        "scmCacheState" : {
          "type" : "string",
          "enum" : [ "VALID_CACHE", "STALE_CACHE" ]
        },
        "cacheExpiryTTL" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validUntilTTL" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "syncEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "ScmErrorDetails" : {
      "type" : "object",
      "properties" : {
        "statusCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gitErrorMetadata" : {
          "$ref" : "#/definitions/GitErrorMetadata"
        },
        "error" : {
          "type" : "string"
        },
        "explanation" : {
          "type" : "string"
        },
        "hint" : {
          "type" : "string"
        }
      }
    },
    "ScmGetFileResponseV2DTO" : {
      "type" : "object",
      "properties" : {
        "fileContent" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "blobId" : {
          "type" : "string"
        },
        "branchName" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "cacheDetails" : {
          "$ref" : "#/definitions/ScmCacheDetails"
        },
        "scmErrorDetails" : {
          "$ref" : "#/definitions/ScmErrorDetails"
        },
        "errorResponse" : {
          "type" : "boolean"
        },
        "gitDefaultBranch" : {
          "type" : "boolean"
        }
      }
    },
    "ScmBatchGetFileRequestDTO" : {
      "type" : "object",
      "properties" : {
        "scmGetFileRequestDTOMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ScmGetFileRequestDTO"
          }
        }
      }
    },
    "ScmGetFileRequestDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filepath" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "useCache" : {
          "type" : "boolean"
        }
      }
    },
    "GitTagDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "sha" : {
          "type" : "string"
        }
      }
    },
    "GitTagsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitTagDTO"
          }
        }
      }
    },
    "ResponseGitTagsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitTagsResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSaasGitDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SaasGitDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SaasGitDTO" : {
      "type" : "object",
      "properties" : {
        "saasGit" : {
          "type" : "boolean"
        }
      }
    },
    "CreatePRDTO" : {
      "type" : "object",
      "properties" : {
        "prNumber" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseCreatePRDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CreatePRDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitPRCreateRequest" : {
      "type" : "object",
      "required" : [ "sourceBranch", "targetBranch", "title" ],
      "properties" : {
        "sourceBranch" : {
          "type" : "string"
        },
        "targetBranch" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "yamlGitConfigRef" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "useUserFromToken" : {
          "type" : "boolean"
        }
      }
    },
    "AzureRepoSCMResponseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerResponseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "apiAccess" : {
            "$ref" : "#/definitions/AzureRepoApiAccess"
          }
        }
      } ]
    },
    "BitbucketSCMResponseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerResponseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "apiAccess" : {
            "$ref" : "#/definitions/BitbucketApiAccess"
          }
        }
      } ]
    },
    "GithubSCMResponseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerResponseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "apiAccess" : {
            "$ref" : "#/definitions/GithubApiAccess"
          }
        }
      } ]
    },
    "GitlabSCMResponseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerResponseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "apiAccess" : {
            "$ref" : "#/definitions/GitlabApiAccess"
          }
        }
      } ]
    },
    "ResponseUserSourceCodeManagerResponseDTOList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserSourceCodeManagerResponseDTOList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserSourceCodeManagerResponseDTO" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "userIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "BITBUCKET", "GITHUB", "GITLAB", "AWS_CODE_COMMIT", "AZURE_REPO", "BITBUCKET_SERVER", "GITLAB_ON_PREM" ]
        },
        "userName" : {
          "type" : "string"
        },
        "userEmail" : {
          "type" : "string"
        }
      }
    },
    "UserSourceCodeManagerResponseDTOList" : {
      "type" : "object",
      "properties" : {
        "userSourceCodeManagerResponseDTOList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserSourceCodeManagerResponseDTO"
          }
        }
      }
    },
    "ResponseUserSourceCodeManagerResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserSourceCodeManagerResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureRepoAuthenticationDTO" : {
      "type" : "object",
      "properties" : {
        "apiAccessDTO" : {
          "$ref" : "#/definitions/AzureRepoApiAccess"
        }
      }
    },
    "AzureRepoSCMRequestDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/AzureRepoAuthenticationDTO"
          }
        }
      } ]
    },
    "BitbucketAuthenticationDTO" : {
      "type" : "object",
      "properties" : {
        "apiAccessDTO" : {
          "$ref" : "#/definitions/BitbucketApiAccess"
        }
      }
    },
    "BitbucketSCMRequestDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/BitbucketAuthenticationDTO"
          }
        }
      } ]
    },
    "BitbucketServerAuthenticationDTO" : {
      "type" : "object",
      "properties" : {
        "apiAccessDTO" : {
          "$ref" : "#/definitions/BitbucketApiAccess"
        }
      }
    },
    "BitbucketServerSCMRequestDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
      }, {
        "type" : "object",
        "properties" : {
          "providerIdentifier" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/BitbucketServerAuthenticationDTO"
          }
        }
      } ]
    },
    "GithubAuthenticationDTO" : {
      "type" : "object",
      "properties" : {
        "apiAccessDTO" : {
          "$ref" : "#/definitions/GithubApiAccess"
        }
      }
    },
    "GithubSCMRequestDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/GithubAuthenticationDTO"
          }
        }
      } ]
    },
    "GitlabAuthenticationDTO" : {
      "type" : "object",
      "properties" : {
        "apiAccessDTO" : {
          "$ref" : "#/definitions/GitlabApiAccess"
        }
      }
    },
    "GitlabOnPremAuthenticationDTO" : {
      "type" : "object",
      "properties" : {
        "apiAccessDTO" : {
          "$ref" : "#/definitions/GitlabApiAccess"
        }
      }
    },
    "GitlabOnPremSCMRequestDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
      }, {
        "type" : "object",
        "properties" : {
          "providerIdentifier" : {
            "type" : "string"
          },
          "authentication" : {
            "$ref" : "#/definitions/GitlabOnPremAuthenticationDTO"
          }
        }
      } ]
    },
    "GitlabSCMRequestDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserSourceCodeManagerRequestDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/GitlabAuthenticationDTO"
          }
        }
      } ]
    },
    "UserSourceCodeManagerAuthentication" : {
      "type" : "object"
    },
    "UserSourceCodeManagerRequestDTO" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "userIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "BITBUCKET", "GITHUB", "GITLAB", "AWS_CODE_COMMIT", "AZURE_REPO", "BITBUCKET_SERVER", "GITLAB_ON_PREM" ]
        },
        "authentication" : {
          "$ref" : "#/definitions/UserSourceCodeManagerAuthentication"
        }
      }
    },
    "GitSyncConfig" : {
      "type" : "object",
      "required" : [ "gitConnectorType" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "gitConnectorRef" : {
          "type" : "string"
        },
        "repo" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "gitConnectorType" : {
          "type" : "string",
          "enum" : [ "Github", "Gitlab", "Bitbucket" ]
        },
        "gitSyncFolderConfigDTOs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncFolderConfigDTO"
          }
        }
      }
    },
    "GitSyncFolderConfigDTO" : {
      "type" : "object",
      "properties" : {
        "rootFolder" : {
          "type" : "string"
        },
        "isDefault" : {
          "type" : "boolean"
        }
      }
    },
    "GitEnabledDTO" : {
      "type" : "object",
      "properties" : {
        "connectivityMode" : {
          "type" : "string",
          "enum" : [ "MANAGER", "DELEGATE" ]
        },
        "gitSyncEnabledOnlyForFF" : {
          "type" : "boolean"
        },
        "gitSimplificationEnabled" : {
          "type" : "boolean"
        },
        "gitSyncEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "GitSyncErrorAggregateByCommitDTO" : {
      "type" : "object",
      "properties" : {
        "gitCommitId" : {
          "type" : "string"
        },
        "failedCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "repoId" : {
          "type" : "string"
        },
        "branchName" : {
          "type" : "string"
        },
        "commitMessage" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "errorsForSummaryView" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncErrorDTO"
          }
        }
      }
    },
    "GitSyncErrorDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "repoId" : {
          "type" : "string"
        },
        "branchName" : {
          "type" : "string"
        },
        "scopes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Scope"
          }
        },
        "changeType" : {
          "type" : "string",
          "enum" : [ "ADD", "RENAME", "MODIFY", "DELETE", "NONE", "ADD_V2", "UPDATE_V2" ]
        },
        "completeFilePath" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
        },
        "failureReason" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DISCARDED", "EXPIRED", "RESOLVED", "OVERRIDDEN" ]
        },
        "errorType" : {
          "type" : "string",
          "enum" : [ "GIT_TO_HARNESS", "CONNECTIVITY_ISSUE", "FULL_SYNC" ]
        },
        "additionalErrorDetails" : {
          "$ref" : "#/definitions/GitSyncErrorDetailsDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "GitSyncErrorDetailsDTO" : {
      "type" : "object"
    },
    "PageGitSyncErrorAggregateByCommitDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncErrorAggregateByCommitDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageGitSyncErrorAggregateByCommitDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageGitSyncErrorAggregateByCommitDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Scope" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "GitSyncErrorCountDTO" : {
      "type" : "object",
      "properties" : {
        "gitToHarnessErrorCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "connectivityErrorCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseGitSyncErrorCountDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitSyncErrorCountDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageGitSyncErrorDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GitSyncErrorDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageGitSyncErrorDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageGitSyncErrorDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitXWebhookMigrationResponse" : {
      "type" : "object"
    },
    "ResponseGitXWebhookMigrationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GitXWebhookMigrationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitXWebhookMigrationRequest" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "webhookIdentifier" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        }
      }
    },
    "LdapTestResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE" ]
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "RestResponseLdapTestResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/LdapTestResponse"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "EmbeddedUser" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "externalUserId" : {
          "type" : "string"
        }
      }
    },
    "LdapConnectionSettings" : {
      "type" : "object",
      "required" : [ "host" ],
      "properties" : {
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sslEnabled" : {
          "type" : "boolean"
        },
        "referralsEnabled" : {
          "type" : "boolean"
        },
        "maxReferralHops" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 1
        },
        "bindDN" : {
          "type" : "string"
        },
        "bindPassword" : {
          "type" : "string"
        },
        "passwordType" : {
          "type" : "string"
        },
        "bindSecret" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "connectTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "responseTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "useRecursiveGroupMembershipSearch" : {
          "type" : "boolean"
        },
        "delegateSelectors" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "settingType" : {
          "type" : "string",
          "enum" : [ "HOST_CONNECTION_ATTRIBUTES", "BASTION_HOST_CONNECTION_ATTRIBUTES", "SMTP", "SFTP", "JENKINS", "BAMBOO", "STRING", "SPLUNK", "ELK", "LOGZ", "SUMO", "DATA_DOG", "APM_VERIFICATION", "BUG_SNAG", "LOG_VERIFICATION", "APP_DYNAMICS", "NEW_RELIC", "DYNA_TRACE", "INSTANA", "DATA_DOG_LOG", "CLOUD_WATCH", "SCALYR", "ELB", "SLACK", "AWS", "GCS", "GCP", "AZURE", "PCF", "RANCHER", "DIRECT", "KUBERNETES_CLUSTER", "DOCKER", "ECR", "GCR", "ACR", "PHYSICAL_DATA_CENTER", "KUBERNETES", "NEXUS", "ARTIFACTORY", "SMB", "AMAZON_S3", "GIT", "SSH_SESSION_CONFIG", "SERVICE_VARIABLE", "CONFIG_FILE", "KMS", "GCP_KMS", "JIRA", "SERVICENOW", "SECRET_TEXT", "SECRET_FILE", "YAML_GIT_SYNC", "VAULT", "VAULT_SSH", "AWS_SECRETS_MANAGER", "WINRM_CONNECTION_ATTRIBUTES", "WINRM_SESSION_CONFIG", "PROMETHEUS", "INFRASTRUCTURE_MAPPING", "HTTP_HELM_REPO", "AMAZON_S3_HELM_REPO", "GCS_HELM_REPO", "SPOT_INST", "AZURE_ARTIFACTS_PAT", "CUSTOM", "CE_AWS", "CE_GCP", "CE_AZURE", "AZURE_VAULT", "KUBERNETES_CLUSTER_NG", "GIT_NG", "SSO_SAML", "LDAP", "GCP_SECRETS_MANAGER", "TRIGGER", "OCI_HELM_REPO" ]
        },
        "accountId" : {
          "type" : "string"
        }
      }
    },
    "LdapGroupSettings" : {
      "type" : "object",
      "properties" : {
        "baseDN" : {
          "type" : "string"
        },
        "searchFilter" : {
          "type" : "string"
        },
        "nameAttr" : {
          "type" : "string"
        },
        "descriptionAttr" : {
          "type" : "string"
        },
        "userMembershipAttr" : {
          "type" : "string"
        },
        "referencedUserAttr" : {
          "type" : "string"
        }
      }
    },
    "LdapSettings" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SSOSettings"
      }, {
        "type" : "object",
        "required" : [ "connectionSettings" ],
        "properties" : {
          "connectionSettings" : {
            "$ref" : "#/definitions/LdapConnectionSettings"
          },
          "userSettings" : {
            "$ref" : "#/definitions/LdapUserSettings"
          },
          "groupSettings" : {
            "$ref" : "#/definitions/LdapGroupSettings"
          },
          "userSettingsList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LdapUserSettings"
            }
          },
          "groupSettingsList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LdapGroupSettings"
            }
          },
          "cronExpression" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "LdapUserSettings" : {
      "type" : "object",
      "properties" : {
        "baseDN" : {
          "type" : "string"
        },
        "searchFilter" : {
          "type" : "string"
        },
        "uidAttr" : {
          "type" : "string"
        },
        "samAccountNameAttr" : {
          "type" : "string"
        },
        "emailAttr" : {
          "type" : "string"
        },
        "displayNameAttr" : {
          "type" : "string"
        },
        "groupMembershipAttr" : {
          "type" : "string"
        }
      }
    },
    "AdditionalMetadata" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "EncryptedDataDetail" : {
      "type" : "object",
      "properties" : {
        "encryptedData" : {
          "$ref" : "#/definitions/EncryptedRecordData"
        },
        "encryptionConfig" : {
          "$ref" : "#/definitions/EncryptionConfig"
        },
        "fieldName" : {
          "type" : "string"
        },
        "identifier" : {
          "$ref" : "#/definitions/SecretUniqueIdentifier"
        }
      }
    },
    "EncryptedDataParams" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "EncryptedRecordData" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "parameters" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/EncryptedDataParams"
          }
        },
        "encryptionKey" : {
          "type" : "string"
        },
        "encryptedValue" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "kmsId" : {
          "type" : "string"
        },
        "encryptionType" : {
          "type" : "string",
          "enum" : [ "LOCAL", "KMS", "GCP_KMS", "AWS_SECRETS_MANAGER", "AZURE_VAULT", "VAULT", "GCP_SECRETS_MANAGER", "CUSTOM", "VAULT_SSH", "CUSTOM_NG" ]
        },
        "backupEncryptedValue" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "backupEncryptionKey" : {
          "type" : "string"
        },
        "backupKmsId" : {
          "type" : "string"
        },
        "backupEncryptionType" : {
          "type" : "string",
          "enum" : [ "LOCAL", "KMS", "GCP_KMS", "AWS_SECRETS_MANAGER", "AZURE_VAULT", "VAULT", "GCP_SECRETS_MANAGER", "CUSTOM", "VAULT_SSH", "CUSTOM_NG" ]
        },
        "base64Encoded" : {
          "type" : "boolean"
        },
        "additionalMetadata" : {
          "$ref" : "#/definitions/AdditionalMetadata"
        }
      }
    },
    "EncryptionConfig" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "KMS", "VAULT", "CUSTOM", "SSH" ]
        },
        "default" : {
          "type" : "boolean"
        },
        "encryptionType" : {
          "type" : "string",
          "enum" : [ "LOCAL", "KMS", "GCP_KMS", "AWS_SECRETS_MANAGER", "AZURE_VAULT", "VAULT", "GCP_SECRETS_MANAGER", "CUSTOM", "VAULT_SSH", "CUSTOM_NG" ]
        },
        "numOfEncryptedValue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "encryptionServiceUrl" : {
          "type" : "string"
        },
        "validationCriteria" : {
          "type" : "string"
        },
        "globalKms" : {
          "type" : "boolean"
        },
        "accountId" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string"
        }
      }
    },
    "LdapConnectionSettingsDTO" : {
      "type" : "object",
      "properties" : {
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ssl_enabled" : {
          "type" : "boolean"
        },
        "referrals_enabled" : {
          "type" : "boolean"
        },
        "secret_ref_path" : {
          "type" : "string"
        },
        "max_referral_hops" : {
          "type" : "integer",
          "format" : "int32"
        },
        "connection_timeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "response_timeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "use_recursive_group_membership_search" : {
          "type" : "boolean"
        },
        "bind_d_n" : {
          "type" : "string"
        },
        "delegate_selectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "LdapGroupSettingsDTO" : {
      "type" : "object",
      "properties" : {
        "base_d_n" : {
          "type" : "string"
        },
        "search_filter" : {
          "type" : "string"
        },
        "name_attr" : {
          "type" : "string"
        },
        "description_attr" : {
          "type" : "string"
        },
        "user_membership_attr" : {
          "type" : "string"
        },
        "referenced_user_attr" : {
          "type" : "string"
        }
      }
    },
    "LdapSettingsDTO" : {
      "type" : "object",
      "required" : [ "account_identifier", "identifier", "name" ],
      "properties" : {
        "account_identifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        },
        "cron_expression" : {
          "type" : "string"
        },
        "ldap_connection_settings" : {
          "$ref" : "#/definitions/LdapConnectionSettingsDTO"
        },
        "ldap_user_settings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LdapUserSettingsDTO"
          }
        },
        "ldap_group_settings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LdapGroupSettingsDTO"
          }
        },
        "sso_type" : {
          "type" : "string"
        }
      }
    },
    "LdapUserSettingsDTO" : {
      "type" : "object",
      "properties" : {
        "base_d_n" : {
          "type" : "string"
        },
        "search_filter" : {
          "type" : "string"
        },
        "uid_attr" : {
          "type" : "string"
        },
        "sam_account_name_attr" : {
          "type" : "string"
        },
        "email_attr" : {
          "type" : "string"
        },
        "display_name_attr" : {
          "type" : "string"
        },
        "group_membership_attr" : {
          "type" : "string"
        }
      }
    },
    "NGLdapSettingsWithEncryptedDataDetails" : {
      "type" : "object",
      "required" : [ "encryptedDataDetail", "ldapSettings" ],
      "properties" : {
        "ldapSettings" : {
          "$ref" : "#/definitions/LdapSettingsDTO"
        },
        "encryptedDataDetail" : {
          "$ref" : "#/definitions/EncryptedDataDetail"
        }
      }
    },
    "ResponseNGLdapSettingsWithEncryptedDataDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NGLdapSettingsWithEncryptedDataDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SecretUniqueIdentifier" : {
      "type" : "object",
      "properties" : {
        "kmsId" : {
          "type" : "string"
        }
      }
    },
    "LdapGroupResponse" : {
      "type" : "object",
      "properties" : {
        "dn" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "totalMembers" : {
          "type" : "integer",
          "format" : "int32"
        },
        "selectable" : {
          "type" : "boolean"
        },
        "message" : {
          "type" : "string"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LdapUserResponse"
          }
        }
      }
    },
    "LdapUserResponse" : {
      "type" : "object",
      "properties" : {
        "dn" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        }
      }
    },
    "RestResponseCollectionLdapGroupResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LdapGroupResponse"
          }
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LdapResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE" ]
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "RestResponseLdapResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/LdapResponse"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseVoid" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/Void"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseNGLdapSettingsWithEncryptedDataDetails" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/NGLdapSettingsWithEncryptedDataDetails"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DeveloperMappingDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "developerCount", "moduleType", "secondaryEntitlement", "secondaryEntitlementCount" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "developerCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "secondaryEntitlement" : {
          "type" : "string",
          "enum" : [ "NUMBER_OF_AGENTS", "NUMBER_OF_COMMITTERS", "NUMBER_OF_CONTRIBUTORS", "NUMBER_OF_CLIENT_MAUS", "NUMBER_OF_DEVELOPERS", "NUMBER_OF_EXECUTION_APPLIES", "NUMBER_OF_SECURITY_ASSESSMENT", "NUMBER_OF_SECURITY_SCANS", "NUMBER_OF_SERVICES", "NUMBER_OF_USERS", "NUMBER_OF_TOTAL_CHAOS_EXPERIMENT_RUNS", "NUMBER_OF_TOTAL_CHAOS_INFRASTRUCTURES", "NUMBER_OF_EXECUTIONS" ]
        },
        "secondaryEntitlementCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseDeveloperMappingDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeveloperMappingDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListDeveloperMappingDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeveloperMappingDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CDModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "cdLicenseType" : {
            "type" : "string",
            "enum" : [ "SERVICES", "SERVICE_INSTANCES", "LEGACY_USER", "DEVELOPER_360", "CUSTOM" ]
          },
          "workloads" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceInstances" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CEModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "spendLimit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "CETModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfAgents" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CFModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfUsers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfClientMAUs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cfLicenseType" : {
            "type" : "string",
            "enum" : [ "DEVELOPER_360", "USERS" ]
          }
        }
      } ]
    },
    "CIModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfCommitters" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cacheAllowance" : {
            "type" : "integer",
            "format" : "int64"
          },
          "hostingCredits" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CVModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfServices" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "ChaosModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "chaosLicenseType" : {
            "type" : "string",
            "enum" : [ "DEVELOPER_360", "EXPERIMENTS", "USERS", "SERVICES", "APPLICATIONS", "CUSTOM" ]
          },
          "secondaryEntitlement" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expectedServiceConsumption" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalChaosExperimentRuns" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalChaosInfrastructures" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CodeModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "required" : [ "numberOfDevelopers", "numberOfRepositories" ],
        "properties" : {
          "numberOfDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfRepositories" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxRepoSizeString" : {
            "type" : "string"
          },
          "maxRepoSizeInBytes" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "IACMModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfExecutionApplies" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "IDPModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "ModuleLicenseDTO" : {
      "type" : "object",
      "discriminator" : "moduleType",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "edition" : {
          "type" : "string",
          "enum" : [ "COMMUNITY", "FREE", "TEAM", "ENTERPRISE", "STARTUP" ]
        },
        "licenseType" : {
          "type" : "string",
          "enum" : [ "TRIAL", "PAID" ]
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED", "EXPIRED" ]
        },
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expiryTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "premiumSupport" : {
          "type" : "boolean"
        },
        "selfService" : {
          "type" : "boolean"
        },
        "createdBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "lastUpdatedBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "trialExtended" : {
          "type" : "boolean"
        },
        "developerLicenseCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalSecondaryEntitlement" : {
          "type" : "integer",
          "format" : "int64"
        },
        "isAddOn" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseModuleLicenseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ModuleLicenseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SEIModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfContributors" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seiLicenseType" : {
            "type" : "string",
            "enum" : [ "DEVELOPER_360", "USERS" ]
          }
        }
      } ]
    },
    "SRMModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfServices" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "SSCAModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfExecutions" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "STOModuleLicenseDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ModuleLicenseDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfSecurityScans" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "ResponseListModuleLicenseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ModuleLicenseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapModuleTypeLong" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EditionActionDTO" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string",
          "enum" : [ "START_FREE", "START_TRIAL", "EXTEND_TRIAL", "SUBSCRIBE", "UPGRADE", "CONTACT_SALES", "CONTACT_SUPPORT", "MANAGE", "DISABLED_BY_TEAM", "DISABLED_BY_ENTERPRISE" ]
        },
        "reason" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapEditionSetEditionActionDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/definitions/EditionActionDTO"
            }
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CDLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalWorkload" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalServiceInstances" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CELicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalSpendLimit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "CFLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalClientMAUs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalFeatureFlagUnits" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CILicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cacheSizeAllowance" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "CVLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalServices" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "CodeLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "numberOfDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfRepositories" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxRepoSizeInBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxRepoSizeString" : {
            "type" : "string"
          }
        }
      } ]
    },
    "IACMLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalExecutionApplies" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "IDPLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "LicensesWithSummaryDTO" : {
      "type" : "object",
      "discriminator" : "moduleType",
      "properties" : {
        "edition" : {
          "type" : "string",
          "enum" : [ "COMMUNITY", "FREE", "TEAM", "ENTERPRISE", "STARTUP" ]
        },
        "licenseType" : {
          "type" : "string",
          "enum" : [ "TRIAL", "PAID" ]
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "maxExpiryTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "developerLicenseCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalAddOns" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseLicensesWithSummaryDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/LicensesWithSummaryDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SSCALicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalExecutions" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "STOLicenseSummaryDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LicensesWithSummaryDTO"
      }, {
        "type" : "object",
        "properties" : {
          "totalDevelopers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalSecurityScans" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AccountLicenseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "moduleLicenses" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ModuleLicenseDTO"
          }
        },
        "allModuleLicenses" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ModuleLicenseDTO"
            }
          }
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseAccountLicenseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AccountLicenseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StartTrialDTO" : {
      "type" : "object",
      "required" : [ "edition", "moduleType" ],
      "properties" : {
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "edition" : {
          "type" : "string",
          "enum" : [ "COMMUNITY", "FREE", "TEAM", "ENTERPRISE", "STARTUP" ]
        }
      }
    },
    "ResponseServiceUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceInstanceUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceInstanceUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActiveServiceDTO" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "orgName" : {
          "type" : "string"
        },
        "projectName" : {
          "type" : "string"
        },
        "instanceCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastDeployed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "licensesConsumed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PageActiveServiceDTO" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActiveServiceDTO"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePageActiveServiceDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageActiveServiceDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActiveServicesFilterParams" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        }
      }
    },
    "LicenseUsageDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "module" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseLicenseUsageDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/LicenseUsageDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageRoleAssignmentResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignmentResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageRoleAssignmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageRoleAssignmentResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RoleAssignment" : {
      "type" : "object",
      "required" : [ "principal", "resourceGroupIdentifier", "roleIdentifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "resourceGroupIdentifier" : {
          "type" : "string"
        },
        "roleIdentifier" : {
          "type" : "string"
        },
        "roleReference" : {
          "$ref" : "#/definitions/RoleReference"
        },
        "principal" : {
          "$ref" : "#/definitions/Principal"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "managed" : {
          "type" : "boolean"
        },
        "internal" : {
          "type" : "boolean"
        }
      }
    },
    "RoleAssignmentResponse" : {
      "type" : "object",
      "required" : [ "roleAssignment", "scope" ],
      "properties" : {
        "roleAssignment" : {
          "$ref" : "#/definitions/RoleAssignment"
        },
        "scope" : {
          "$ref" : "#/definitions/Scope"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "harnessManaged" : {
          "type" : "boolean"
        }
      }
    },
    "RoleReference" : {
      "type" : "object",
      "required" : [ "identifier", "scopeLevel" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "scopeLevel" : {
          "type" : "string"
        }
      }
    },
    "RoleAssignmentFilter" : {
      "type" : "object",
      "properties" : {
        "resourceGroupFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "roleFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "roleReferenceFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/RoleReference"
          }
        },
        "principalTypeFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "USER", "USER_GROUP", "SERVICE", "API_KEY", "SERVICE_ACCOUNT" ]
          }
        },
        "principalScopeLevelFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "principalFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Principal"
          }
        },
        "harnessManagedFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "boolean"
          }
        },
        "disabledFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "boolean"
          }
        }
      }
    },
    "ResponseRoleAssignmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RoleAssignmentResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListRoleAssignmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignmentResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RoleAssignmentCreateRequest" : {
      "type" : "object",
      "properties" : {
        "roleAssignments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignment"
          },
          "maxItems" : 100,
          "minItems" : 0
        }
      }
    },
    "ResourceGroup" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseRoleAssignmentAggregateResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RoleAssignmentAggregateResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Role" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "permissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "allowedScopeLevels" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
          }
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "RoleAssignmentAggregateResponse" : {
      "type" : "object",
      "properties" : {
        "roleAssignments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignment"
          }
        },
        "scope" : {
          "$ref" : "#/definitions/Scope"
        },
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleResponse"
          }
        },
        "resourceGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResourceGroup"
          }
        }
      }
    },
    "RoleResponse" : {
      "type" : "object",
      "required" : [ "role", "scope" ],
      "properties" : {
        "role" : {
          "$ref" : "#/definitions/Role"
        },
        "scope" : {
          "$ref" : "#/definitions/Scope"
        },
        "harnessManaged" : {
          "type" : "boolean"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Account" : {
      "type" : "object",
      "required" : [ "accountName", "appId", "companyName", "lastUpdatedAt", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "appId" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "companyName" : {
          "type" : "string"
        },
        "nextGenEnabled" : {
          "type" : "boolean"
        },
        "accountName" : {
          "type" : "string"
        },
        "whitelistedDomains" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "licenseId" : {
          "type" : "string"
        },
        "dataRetentionDurationMs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "licenseInfo" : {
          "$ref" : "#/definitions/LicenseInfo"
        },
        "trustLevel" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ceLicenseInfo" : {
          "$ref" : "#/definitions/CeLicenseInfo"
        },
        "accountEvents" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/AccountEvent"
          }
        },
        "subdomainUrl" : {
          "type" : "string"
        },
        "twoFactorAdminEnforced" : {
          "type" : "boolean"
        },
        "forImport" : {
          "type" : "boolean"
        },
        "migratedToClusterUrl" : {
          "type" : "string"
        },
        "defaultExperience" : {
          "type" : "string",
          "enum" : [ "NG", "CG" ]
        },
        "createdFromNG" : {
          "type" : "boolean"
        },
        "accountActivelyUsed" : {
          "type" : "boolean"
        },
        "smpAccount" : {
          "type" : "boolean"
        },
        "sessionTimeOutInMinutes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "absoluteSessionTimeOutInMinutes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "publicAccessEnabled" : {
          "type" : "boolean"
        },
        "localEncryptionEnabled" : {
          "type" : "boolean"
        },
        "delegateConfiguration" : {
          "$ref" : "#/definitions/DelegateConfiguration"
        },
        "techStacks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/TechStack"
          }
        },
        "oauthEnabled" : {
          "type" : "boolean"
        },
        "ringName" : {
          "type" : "string"
        },
        "accountPreferences" : {
          "$ref" : "#/definitions/AccountPreferences"
        },
        "cloudCostEnabled" : {
          "type" : "boolean"
        },
        "ceAutoCollectK8sEvents" : {
          "type" : "boolean"
        },
        "trialSignupOptions" : {
          "$ref" : "#/definitions/TrialSignupOptions"
        },
        "serviceGuardLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "serviceAccountConfig" : {
          "$ref" : "#/definitions/ServiceAccountConfig"
        },
        "globalDelegateAccount" : {
          "type" : "boolean"
        },
        "immutableDelegateEnabled" : {
          "type" : "boolean"
        },
        "optionalDelegateTaskLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "importantDelegateTaskLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "authenticationMechanism" : {
          "type" : "string",
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        },
        "povAccount" : {
          "type" : "boolean"
        },
        "encryption" : {
          "$ref" : "#/definitions/EncryptionInterface"
        },
        "crossGenerationAccessEnabled" : {
          "type" : "boolean"
        },
        "defaults" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "harnessSupportAccessAllowed" : {
          "type" : "boolean"
        },
        "productLed" : {
          "type" : "boolean"
        },
        "cannyUsernameAbbreviationEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "AccountEvent" : {
      "type" : "object",
      "properties" : {
        "accountEventType" : {
          "type" : "string",
          "enum" : [ "APP_CREATED", "SERVICE_CREATED", "ENV_CREATED", "WORKFLOW_CREATED", "WORKFLOW_DEPLOYED", "PIPELINE_DEPLOYED", "DELEGATE_INSTALLED", "CLOUD_PROVIDER_CREATED", "ARTIFACT_REPO_CREATED", "PIPELINE_CREATED", "ARTIFACT_STREAM_ADDED", "INFRA_MAPPING_ADDED", "INFRA_DEFINITION_ADDED", "CUSTOM" ]
        },
        "customMsg" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "AccountPermissions" : {
      "type" : "object",
      "properties" : {
        "permissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ACCOUNT", "LOGGED_IN", "DELEGATE", "NONE", "APP", "ALL_APP_ENTITIES", "ENV", "SERVICE", "WORKFLOW", "PIPELINE", "DEPLOYMENT", "APPLICATION_CREATE_DELETE", "USER_PERMISSION_MANAGEMENT", "ACCOUNT_MANAGEMENT", "PROVISIONER", "TEMPLATE_MANAGEMENT", "APP_TEMPLATE", "USER_PERMISSION_READ", "AUDIT_VIEWER", "TAG_MANAGEMENT", "CE_ADMIN", "CE_VIEWER", "MANAGE_CLOUD_PROVIDERS", "MANAGE_CONNECTORS", "MANAGE_APPLICATIONS", "MANAGE_APPLICATION_STACKS", "MANAGE_DELEGATES", "MANAGE_ALERT_NOTIFICATION_RULES", "MANAGE_DELEGATE_PROFILES", "MANAGE_CONFIG_AS_CODE", "MANAGE_SECRETS", "MANAGE_SECRET_MANAGERS", "MANAGE_SSH_AND_WINRM", "MANAGE_AUTHENTICATION_SETTINGS", "MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS", "VIEW_USER_AND_USER_GROUPS_AND_API_KEYS", "MANAGE_IP_WHITELIST", "MANAGE_IP_WHITELISTING", "MANAGE_DEPLOYMENT_FREEZES", "ALLOW_DEPLOYMENTS_DURING_FREEZE", "MANAGE_PIPELINE_GOVERNANCE_STANDARDS", "MANAGE_API_KEYS", "MANAGE_TAGS", "MANAGE_ACCOUNT_DEFAULTS", "MANAGE_CUSTOM_DASHBOARDS", "CREATE_CUSTOM_DASHBOARDS", "MANAGE_RESTRICTED_ACCESS", "HIDE_NEXTGEN_BUTTON" ]
          }
        }
      }
    },
    "AccountPreferences" : {
      "type" : "object",
      "properties" : {
        "delegateSecretsCacheTTLInHours" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AppFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Filter"
      }, {
        "type" : "object",
        "properties" : {
          "filterType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AppPermission" : {
      "type" : "object",
      "properties" : {
        "permissionType" : {
          "type" : "string",
          "enum" : [ "ACCOUNT", "LOGGED_IN", "DELEGATE", "NONE", "APP", "ALL_APP_ENTITIES", "ENV", "SERVICE", "WORKFLOW", "PIPELINE", "DEPLOYMENT", "APPLICATION_CREATE_DELETE", "USER_PERMISSION_MANAGEMENT", "ACCOUNT_MANAGEMENT", "PROVISIONER", "TEMPLATE_MANAGEMENT", "APP_TEMPLATE", "USER_PERMISSION_READ", "AUDIT_VIEWER", "TAG_MANAGEMENT", "CE_ADMIN", "CE_VIEWER", "MANAGE_CLOUD_PROVIDERS", "MANAGE_CONNECTORS", "MANAGE_APPLICATIONS", "MANAGE_APPLICATION_STACKS", "MANAGE_DELEGATES", "MANAGE_ALERT_NOTIFICATION_RULES", "MANAGE_DELEGATE_PROFILES", "MANAGE_CONFIG_AS_CODE", "MANAGE_SECRETS", "MANAGE_SECRET_MANAGERS", "MANAGE_SSH_AND_WINRM", "MANAGE_AUTHENTICATION_SETTINGS", "MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS", "VIEW_USER_AND_USER_GROUPS_AND_API_KEYS", "MANAGE_IP_WHITELIST", "MANAGE_IP_WHITELISTING", "MANAGE_DEPLOYMENT_FREEZES", "ALLOW_DEPLOYMENTS_DURING_FREEZE", "MANAGE_PIPELINE_GOVERNANCE_STANDARDS", "MANAGE_API_KEYS", "MANAGE_TAGS", "MANAGE_ACCOUNT_DEFAULTS", "MANAGE_CUSTOM_DASHBOARDS", "CREATE_CUSTOM_DASHBOARDS", "MANAGE_RESTRICTED_ACCESS", "HIDE_NEXTGEN_BUTTON" ]
        },
        "appFilter" : {
          "$ref" : "#/definitions/AppFilter"
        },
        "entityFilter" : {
          "$ref" : "#/definitions/Filter"
        },
        "actions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ALL", "CREATE", "READ", "UPDATE", "DELETE", "EXECUTE", "EXECUTE_WORKFLOW", "EXECUTE_PIPELINE", "EXECUTE_WORKFLOW_ROLLBACK", "ABORT_WORKFLOW", "DEFAULT" ]
          }
        }
      }
    },
    "AuthenticationSettingsResponse" : {
      "type" : "object",
      "properties" : {
        "ngAuthSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGAuthSettings"
          }
        },
        "whitelistedDomains" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "authenticationMechanism" : {
          "type" : "string",
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        },
        "twoFactorEnabled" : {
          "type" : "boolean"
        },
        "sessionTimeoutInMinutes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "publicAccessEnabled" : {
          "type" : "boolean"
        },
        "oauthEnabled" : {
          "type" : "boolean"
        },
        "absoluteSessionTimeoutInMinutes" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "CeLicenseInfo" : {
      "type" : "object",
      "properties" : {
        "licenseType" : {
          "type" : "string",
          "enum" : [ "FULL_TRIAL", "LIMITED_TRIAL", "PAID" ]
        },
        "expiryTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "DelegateConfiguration" : {
      "type" : "object",
      "properties" : {
        "delegateVersions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "action" : {
          "type" : "string",
          "enum" : [ "SELF_DESTRUCT" ]
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validTillNextRelease" : {
          "type" : "boolean"
        }
      }
    },
    "EncryptionInterface" : {
      "type" : "object"
    },
    "EnvFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Filter"
      }, {
        "type" : "object",
        "properties" : {
          "filterTypes" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ExecutableElementsFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Filter"
      }, {
        "type" : "object",
        "properties" : {
          "filterTypes" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "executableElementFilterType" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/GenericEntityFilter"
          }
        }
      } ]
    },
    "Filter" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "ids" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "GenericEntityFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Filter"
      }, {
        "type" : "object",
        "properties" : {
          "filterType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "LDAPSettings" : {
      "type" : "object",
      "required" : [ "connectionSettings", "displayName", "identifier" ],
      "properties" : {
        "connectionSettings" : {
          "$ref" : "#/definitions/LdapConnectionSettings"
        },
        "identifier" : {
          "type" : "string"
        },
        "userSettingsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LdapUserSettings"
          }
        },
        "groupSettingsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LdapGroupSettings"
          }
        },
        "displayName" : {
          "type" : "string"
        },
        "cronExpression" : {
          "type" : "string"
        },
        "nextIterations" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "disabled" : {
          "type" : "boolean"
        },
        "settingsType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        }
      }
    },
    "LicenseInfo" : {
      "type" : "object",
      "properties" : {
        "accountType" : {
          "type" : "string"
        },
        "accountStatus" : {
          "type" : "string"
        },
        "expiryTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "licenseUnits" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lastLicenseUpdatedAtTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "reasonForLicenseUpdate" : {
          "type" : "string"
        }
      }
    },
    "LoginSettings" : {
      "type" : "object",
      "required" : [ "accountId", "passwordExpirationPolicy", "passwordStrengthPolicy", "userLockoutPolicy", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "lastUpdatedBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "userLockoutPolicy" : {
          "$ref" : "#/definitions/UserLockoutPolicy"
        },
        "passwordExpirationPolicy" : {
          "$ref" : "#/definitions/PasswordExpirationPolicy"
        },
        "passwordStrengthPolicy" : {
          "$ref" : "#/definitions/PasswordStrengthPolicy"
        }
      }
    },
    "NGAuthSettings" : {
      "type" : "object",
      "discriminator" : "settingsType",
      "properties" : {
        "settingsType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        }
      }
    },
    "NotificationSettings" : {
      "type" : "object",
      "required" : [ "emailAddresses", "slackConfig" ],
      "properties" : {
        "useIndividualEmails" : {
          "type" : "boolean"
        },
        "sendMailToNewMembers" : {
          "type" : "boolean"
        },
        "emailAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "slackConfig" : {
          "$ref" : "#/definitions/SlackNotificationSetting"
        },
        "pagerDutyIntegrationKey" : {
          "type" : "string"
        },
        "microsoftTeamsWebhookUrl" : {
          "type" : "string"
        }
      }
    },
    "OAuthSettings" : {
      "type" : "object",
      "properties" : {
        "filter" : {
          "type" : "string"
        },
        "allowedProviders" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "AZURE", "BITBUCKET", "GITHUB", "GITLAB", "GOOGLE", "LINKEDIN" ]
          }
        },
        "settingsType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        }
      }
    },
    "PasswordExpirationPolicy" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "daysBeforePasswordExpires" : {
          "type" : "integer",
          "format" : "int32"
        },
        "daysBeforeUserNotifiedOfPasswordExpiration" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PasswordStrengthPolicy" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "minNumberOfCharacters" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minNumberOfUppercaseCharacters" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minNumberOfLowercaseCharacters" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minNumberOfSpecialCharacters" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minNumberOfDigits" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "RateLimitProtection" : {
      "type" : "object",
      "properties" : {
        "incorrectAttemptTimestamps" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "lastNotificationSentToUserAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastNotificationSentToSecOpsAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalIncorrectAttempts" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "RestResponseAuthenticationSettingsResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/AuthenticationSettingsResponse"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SAMLSettings" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NGAuthSettings"
      }, {
        "type" : "object",
        "required" : [ "identifier", "origin" ],
        "properties" : {
          "origin" : {
            "type" : "string"
          },
          "identifier" : {
            "type" : "string"
          },
          "logoutUrl" : {
            "type" : "string"
          },
          "groupMembershipAttr" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "authorizationEnabled" : {
            "type" : "boolean"
          },
          "entityIdentifier" : {
            "type" : "string"
          },
          "samlProviderType" : {
            "type" : "string"
          },
          "clientId" : {
            "type" : "string"
          },
          "clientSecret" : {
            "type" : "string"
          },
          "friendlySamlName" : {
            "type" : "string"
          },
          "authenticationEnabled" : {
            "type" : "boolean"
          },
          "jitEnabled" : {
            "type" : "boolean"
          },
          "jitValidationKey" : {
            "type" : "string"
          },
          "jitValidationValue" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SlackNotificationSetting" : {
      "type" : "object",
      "required" : [ "outgoingWebhookUrl" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "outgoingWebhookUrl" : {
          "type" : "string"
        }
      }
    },
    "TechStack" : {
      "type" : "object",
      "properties" : {
        "category" : {
          "type" : "string"
        },
        "technology" : {
          "type" : "string"
        }
      }
    },
    "TrialSignupOptions" : {
      "type" : "object",
      "properties" : {
        "productsSelected" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CD", "CE", "CI" ]
          }
        },
        "assistedOption" : {
          "type" : "boolean"
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "appId", "lastUpdatedAt", "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "appId" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "externalUserId" : {
          "type" : "string"
        },
        "givenName" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        },
        "userGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserGroup"
          }
        },
        "accounts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Account"
          }
        },
        "pendingAccounts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Account"
          }
        },
        "supportAccounts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Account"
          }
        },
        "lastLogin" : {
          "type" : "integer",
          "format" : "int64"
        },
        "firstLogin" : {
          "type" : "boolean"
        },
        "password" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "token" : {
          "type" : "string"
        },
        "twoFactorJwtToken" : {
          "type" : "string"
        },
        "emailVerified" : {
          "type" : "boolean"
        },
        "passwordExpired" : {
          "type" : "boolean"
        },
        "userLocked" : {
          "type" : "boolean"
        },
        "statsFetchedOn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastAccountId" : {
          "type" : "string"
        },
        "defaultAccountId" : {
          "type" : "string"
        },
        "lastAppId" : {
          "type" : "string"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "imported" : {
          "type" : "boolean"
        },
        "userLockoutInfo" : {
          "$ref" : "#/definitions/UserLockoutInfo"
        },
        "rateLimitProtection" : {
          "$ref" : "#/definitions/RateLimitProtection"
        },
        "twoFactorAuthenticationEnabled" : {
          "type" : "boolean"
        },
        "twoFactorAuthenticationMechanism" : {
          "type" : "string",
          "enum" : [ "TOTP" ]
        },
        "oauthProvider" : {
          "type" : "string"
        },
        "reportedSegmentTracks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "utmInfo" : {
          "$ref" : "#/definitions/UtmInfo"
        },
        "userAccountLevelDataMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/UserAccountLevelData"
          }
        },
        "isEnrichedInfoCollected" : {
          "type" : "boolean"
        },
        "accountIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UserAccountLevelData" : {
      "type" : "object",
      "properties" : {
        "sourceOfProvisioning" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "MANUAL", "LDAP", "SCIM", "JIT" ]
          }
        },
        "userProvisionedTo" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "CG", "NG" ]
          }
        }
      }
    },
    "UserGroup" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "description", "notificationConfigs", "tags", "users" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "isSsoLinked" : {
          "type" : "boolean"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "linkedSsoType" : {
          "type" : "string",
          "enum" : [ "SAML", "LDAP", "OAUTH" ]
        },
        "linkedSsoId" : {
          "type" : "string"
        },
        "linkedSsoDisplayName" : {
          "type" : "string"
        },
        "ssoGroupId" : {
          "type" : "string"
        },
        "ssoGroupName" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "notificationConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationSettingConfig"
          }
        },
        "harnessManaged" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGTag"
          },
          "maxItems" : 128,
          "minItems" : 0
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deleted" : {
          "type" : "boolean"
        }
      }
    },
    "UserGroupEntityReference" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "appId" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string"
        }
      }
    },
    "UserLockoutInfo" : {
      "type" : "object",
      "properties" : {
        "numberOfFailedLoginAttempts" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userLockedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "UserLockoutPolicy" : {
      "type" : "object",
      "properties" : {
        "enableLockoutPolicy" : {
          "type" : "boolean"
        },
        "numberOfFailedAttemptsBeforeLockout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lockOutPeriod" : {
          "type" : "integer",
          "format" : "int32"
        },
        "notifyUser" : {
          "type" : "boolean"
        },
        "userGroupsToNotify" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserGroup"
          }
        }
      }
    },
    "UsernamePasswordSettings" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NGAuthSettings"
      }, {
        "type" : "object",
        "required" : [ "loginSettings" ],
        "properties" : {
          "loginSettings" : {
            "$ref" : "#/definitions/LoginSettings"
          }
        }
      } ]
    },
    "UtmInfo" : {
      "type" : "object",
      "properties" : {
        "utmSource" : {
          "type" : "string"
        },
        "utmContent" : {
          "type" : "string"
        },
        "utmMedium" : {
          "type" : "string"
        },
        "utmTerm" : {
          "type" : "string"
        },
        "utmCampaign" : {
          "type" : "string"
        }
      }
    },
    "WorkflowFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Filter"
      }, {
        "type" : "object",
        "properties" : {
          "filterTypes" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "RestResponsePasswordStrengthPolicy" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/PasswordStrengthPolicy"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseLoginSettings" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/LoginSettings"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseLDAPSettings" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/LDAPSettings"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TwoFactorAdminOverrideSettings" : {
      "type" : "object",
      "properties" : {
        "adminOverrideTwoFactorEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "SessionTimeoutSettings" : {
      "type" : "object",
      "required" : [ "sessionTimeOutInMinutes" ],
      "properties" : {
        "sessionTimeOutInMinutes" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 30,
          "maximum" : 4320
        },
        "absoluteSessionTimeOutInMinutes" : {
          "type" : "integer",
          "format" : "int32",
          "maximum" : 4320
        }
      }
    },
    "OauthSettings" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SSOSettings"
      }, {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string"
          },
          "allowedProviders" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : [ "AZURE", "BITBUCKET", "GITHUB", "GITLAB", "GOOGLE", "LINKEDIN" ]
            }
          }
        }
      } ]
    },
    "RestResponseSSOConfig" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/SSOConfig"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SSOConfig" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "ssoSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SSOSettings"
          }
        },
        "authenticationMechanism" : {
          "type" : "string",
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        }
      }
    },
    "SSOSettings" : {
      "type" : "object",
      "required" : [ "appId", "lastUpdatedAt", "type", "uuid" ],
      "discriminator" : "type",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "appId" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "SAML", "LDAP", "OAUTH" ]
        },
        "displayName" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "nextIteration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nextIterations" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "accountId" : {
          "type" : "string"
        }
      }
    },
    "SamlSettings" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SSOSettings"
      }, {
        "type" : "object",
        "required" : [ "accountId", "origin" ],
        "properties" : {
          "accountId" : {
            "type" : "string"
          },
          "origin" : {
            "type" : "string"
          },
          "logoutUrl" : {
            "type" : "string"
          },
          "groupMembershipAttr" : {
            "type" : "string"
          },
          "userIdAttr" : {
            "type" : "string"
          },
          "entityIdentifier" : {
            "type" : "string"
          },
          "samlProviderType" : {
            "type" : "string",
            "enum" : [ "AZURE", "OKTA", "ONELOGIN", "OTHER" ]
          },
          "clientId" : {
            "type" : "string"
          },
          "clientSecret" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "encryptedClientSecret" : {
            "type" : "string"
          },
          "friendlySamlName" : {
            "type" : "string"
          },
          "configuredFromNG" : {
            "type" : "boolean"
          },
          "authenticationEnabled" : {
            "type" : "boolean"
          },
          "jitEnabled" : {
            "type" : "boolean"
          },
          "jitValidationKey" : {
            "type" : "string"
          },
          "jitValidationValue" : {
            "type" : "string"
          },
          "authorizationEnabled" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "settingType" : {
            "type" : "string",
            "enum" : [ "HOST_CONNECTION_ATTRIBUTES", "BASTION_HOST_CONNECTION_ATTRIBUTES", "SMTP", "SFTP", "JENKINS", "BAMBOO", "STRING", "SPLUNK", "ELK", "LOGZ", "SUMO", "DATA_DOG", "APM_VERIFICATION", "BUG_SNAG", "LOG_VERIFICATION", "APP_DYNAMICS", "NEW_RELIC", "DYNA_TRACE", "INSTANA", "DATA_DOG_LOG", "CLOUD_WATCH", "SCALYR", "ELB", "SLACK", "AWS", "GCS", "GCP", "AZURE", "PCF", "RANCHER", "DIRECT", "KUBERNETES_CLUSTER", "DOCKER", "ECR", "GCR", "ACR", "PHYSICAL_DATA_CENTER", "KUBERNETES", "NEXUS", "ARTIFACTORY", "SMB", "AMAZON_S3", "GIT", "SSH_SESSION_CONFIG", "SERVICE_VARIABLE", "CONFIG_FILE", "KMS", "GCP_KMS", "JIRA", "SERVICENOW", "SECRET_TEXT", "SECRET_FILE", "YAML_GIT_SYNC", "VAULT", "VAULT_SSH", "AWS_SECRETS_MANAGER", "WINRM_CONNECTION_ATTRIBUTES", "WINRM_SESSION_CONFIG", "PROMETHEUS", "INFRASTRUCTURE_MAPPING", "HTTP_HELM_REPO", "AMAZON_S3_HELM_REPO", "GCS_HELM_REPO", "SPOT_INST", "AZURE_ARTIFACTS_PAT", "CUSTOM", "CE_AWS", "CE_GCP", "CE_AZURE", "AZURE_VAULT", "KUBERNETES_CLUSTER_NG", "GIT_NG", "SSO_SAML", "LDAP", "GCP_SECRETS_MANAGER", "TRIGGER", "OCI_HELM_REPO" ]
          }
        }
      } ]
    },
    "LoginTypeResponse" : {
      "type" : "object",
      "properties" : {
        "authenticationMechanism" : {
          "type" : "string",
          "enum" : [ "USER_PASSWORD", "SAML", "LDAP", "OAUTH" ]
        },
        "showCaptcha" : {
          "type" : "boolean"
        },
        "defaultExperience" : {
          "type" : "string",
          "enum" : [ "NG", "CG" ]
        },
        "ssorequest" : {
          "$ref" : "#/definitions/SSORequest"
        },
        "oauthEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "RestResponseLoginTypeResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/LoginTypeResponse"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SSORequest" : {
      "type" : "object",
      "properties" : {
        "oauthProviderType" : {
          "type" : "string",
          "enum" : [ "AZURE", "BITBUCKET", "GITHUB", "GITLAB", "GOOGLE", "LINKEDIN" ]
        },
        "idpRedirectUrl" : {
          "type" : "string"
        },
        "oauthProviderTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "AZURE", "BITBUCKET", "GITHUB", "GITLAB", "GOOGLE", "LINKEDIN" ]
          }
        },
        "ssoId" : {
          "type" : "string"
        },
        "friendlySamlName" : {
          "type" : "string"
        },
        "samlProviderType" : {
          "type" : "string",
          "enum" : [ "AZURE", "OKTA", "ONELOGIN", "OTHER" ]
        }
      }
    },
    "AccountSettingConfig" : {
      "type" : "object"
    },
    "AccountSettingResponse" : {
      "type" : "object",
      "properties" : {
        "accountSettings" : {
          "$ref" : "#/definitions/AccountSettings"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AccountSettings" : {
      "type" : "object",
      "required" : [ "config", "type" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "config" : {
          "$ref" : "#/definitions/AccountSettingConfig"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "Connector" ]
        }
      }
    },
    "ConnectorSettings" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountSettingConfig"
      }, {
        "type" : "object",
        "properties" : {
          "builtInSMDisabled" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "ResponseAccountSettingResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AccountSettingResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListAccountSettings" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AccountSettings"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Activity" : {
      "type" : "object",
      "required" : [ "activityStatus", "activityTime", "type" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "referredEntity" : {
          "$ref" : "#/definitions/EntityDetail"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CONNECTIVITY_CHECK", "ENTITY_USAGE", "ENTITY_CREATION", "ENTITY_UPDATE" ]
        },
        "activityStatus" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILED" ]
        },
        "detail" : {
          "$ref" : "#/definitions/ActivityDetail"
        },
        "activityTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "ActivityDetail" : {
      "type" : "object"
    },
    "PageActivity" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Activity"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePageActivity" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageActivity"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ConnectivityCheckSummary" : {
      "type" : "object",
      "properties" : {
        "successCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseConnectivityCheckSummary" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ConnectivityCheckSummary"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActivitySummary" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "heartBeatFailuresCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "successfulActivitiesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failedActivitiesCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PageActivitySummary" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActivitySummary"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePageActivitySummary" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageActivitySummary"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NGEntityList" : {
      "type" : "object",
      "properties" : {
        "entityTypeList" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CreatePR", "GITOPS_MERGE_PR", "Projects", "Pipelines", "PipelineSteps", "Http", "Email", "JiraCreate", "JiraUpdate", "JiraApproval", "HarnessApproval", "CustomApproval", "Barrier", "Queue", "FlagConfiguration", "ShellScript", "K8sCanaryDeploy", "K8sApply", "K8sBlueGreenDeploy", "K8sRollingDeploy", "K8sRollingRollback", "K8sScale", "K8sDelete", "K8sBGSwapServices", "K8sCanaryDelete", "TerraformApply", "TerraformPlan", "TerraformDestroy", "TerraformRollback", "HelmDeploy", "HelmRollback", "Connectors", "Secrets", "Files", "Service", "Environment", "EnvironmentGroup", "InputSets", "CvConfig", "Verify", "Delegates", "DelegateConfigurations", "CvVerificationJob", "IntegrationStage", "IntegrationSteps", "SecurityStage", "SecuritySteps", "CvKubernetesActivitySource", "DeploymentSteps", "DeploymentStage", "ApprovalStage", "PipelineStage", "FeatureFlagStage", "Template", "TemplateStage", "CustomDeployment", "Triggers", "MonitoredService", "GitRepositories", "FeatureFlags", "ServiceNowApproval", "ServiceNowCreate", "ServiceNowUpdate", "ServiceNowImportSet", "GovernancePolicies", "POLICY_STEP", "Run", "RunTests", "Plugin", "RestoreCacheGCS", "RestoreCacheS3", "SaveCacheGCS", "SaveCacheS3", "Security", "AquaTrivy", "AWSECR", "Bandit", "BlackDuck", "Brakeman", "Burp", "Checkmarx", "Clair", "DataTheorem", "DockerContentTrust", "External", "FortifyOnDemand", "Grype", "JfrogXray", "Mend", "Metasploit", "Nessus", "NexusIQ", "Nikto", "Nmap", "Openvas", "Owasp", "PrismaCloud", "Prowler", "Qualys", "Reapsaw", "ShiftLeft", "Sniper", "Snyk", "Sonarqube", "Sysdig", "Tenable", "Veracode", "Zap", "GitClone", "ArtifactoryUpload", "GCSUpload", "S3Upload", "BuildAndPushGCR", "BuildAndPushGAR", "BuildAndPushECR", "BuildAndPushDockerRegistry", "CreateStack", "DeleteStack", "ServerlessAwsLambdaDeploy", "ServerlessAwsLambdaRollback", "CustomStage", "RollbackStack", "Infrastructure", "Command", "StrategyNode", "AZURE_SLOT_DEPLOYMENT_STEP", "AzureTrafficShift", "FetchInstanceScript", "AzureSwapSlot", "AzureWebAppRollback", "JenkinsBuild", "EcsRollingDeploy", "EcsRollingRollback", "EcsCanaryDeploy", "EcsCanaryDelete", "AzureCreateARMResource", "BuildAndPushACR", "AzureCreateBPResource", "AzureARMRollback", "Background", "Wait", "ArtifactSource", "EcsBlueGreenCreateService", "EcsBlueGreenSwapTargetGroups", "EcsBlueGreenRollback", "ShellScriptProvision", "Freeze", "GitOpsUpdateReleaseRepo", "GitOpsFetchLinkedApps", "EcsRunTask", "Chaos", "ElastigroupDeploy", "ElastigroupRollback", "Action", "ElastigroupSetup", "Bitrise", "TerraformPlan", "TerraformApply", "TerraformDestroy", "TerraformRollback", "IACMStage", "IACMStep", "IACM", "Container", "IACM", "IACM", "ElastigroupBGStageSetup", "ElastigroupSwapRoute", "AsgCanaryDeploy", "AsgCanaryDelete", "SwapRoutes", "SwapRollback", "AppResize", "AppRollback", "CanaryAppSetup", "BGAppSetup", "BasicAppSetup", "TanzuCommand", "AsgRollingDeploy", "AsgRollingRollback", "GovernanceRuleAWS", "TasRollingDeploy", "TasRollingRollback", "K8sDryRun", "AsgBlueGreenSwapService", "AsgBlueGreenDeploy", "AsgBlueGreenRollback", "TerraformCloudRun", "TerraformCloudRollback", "DeployCloudFunction", "DeployCloudFunctionWithNoTraffic", "CloudFunctionTrafficShift", "CloudFunctionRollback", "AwsLambdaDeploy", "AwsSamDeploy", "AwsSamRollback", "SscaOrchestration", "AwsLambdaRollback", "GITOPS_SYNC", "BambooBuild", "CdSscaOrchestration", "RouteMapping", "AWSSecurityHub", "CustomIngest", "BackstageEnvironmentVariable", "Fossa", "CodeQL", "Gitleaks", "DeployCloudFunctionGenOne", "RollbackCloudFunctionGenOne", "K8sBlueGreenStageScaleDown", "AwsSamBuild", "Semgrep", "SscaEnforcement", "IdpConnector", "CdSscaEnforcement", "DownloadManifests", "ServerlessAwsLambdaPrepareRollbackV2", "ServerlessAwsLambdaRollbackV2", "Coverity", "ServerlessAwsLambdaDeployV2", "AnalyzeDeploymentImpact", "ServerlessAwsLambdaPackageV2", "RevertPR", "AwsCdkBootstrap", "AwsCdkSynth", "AwsCdkDiff", "AwsCdkDeploy", "AwsCdkDestroy", "IdpScorecard", "IdpCheck", "AwsCdkRollback", "SlsaVerification", "UpdateGitOpsApp", "EcsServiceSetup", "EcsUpgradeContainer", "EcsBasicRollback", "ChaosInfrastructure", "Anchore", "Overrides", "AsgShiftTraffic", "AquaSecurity", "IDPStage", "ChaosHub", "CookieCutter", "CreateRepo", "DownloadAwsS3", "DirectPush", "RegisterCatalog", "K8sTrafficRouting", "DownloadHarnessStore", "CreateCatalog", "SlackNotify", "OsvScaner", "IACM", "AsgPhasedDeploy", "AsgSetup", "AsgRollback", "Test", "Wiz", "Certificates", "IACMCheckov", "IACMTFCompliance", "IACMTFLint", "IACMTFSec", "NotificationRule", "NotificationChannel", "K8S_PATCH_STEP", "CreateOrganisation", "CreateProject", "DBSchemaApply", "IACM", "DBSchemaRollback", "K8S_ROLLOUT_STEP", "CreateResource", "Checkov", "ServiceDiscoveryAgent", "ChaosInfrastructureV2", "Traceable", "AzureFunctionDeploy", "AzureFunctionRollback", "GoogleCloudRunDeploy", "GoogleCloudRunPrepareRollbackData", "GoogleCloudRunTrafficShift", "GoogleCloudRunRollback", "GoogleCloudRunJob", "UpdateCatalogProperty", "UpdateCatalogProperty" ]
          }
        }
      }
    },
    "ResponseNGEntityList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NGEntityList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AgentMtlsEndpointDetails" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "fqdn" : {
          "type" : "string"
        },
        "caCertificates" : {
          "type" : "string"
        },
        "mode" : {
          "type" : "string",
          "enum" : [ "LOOSE", "STRICT" ]
        }
      }
    },
    "RestResponseAgentMtlsEndpointDetails" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/AgentMtlsEndpointDetails"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "AgentMtlsEndpointRequest" : {
      "type" : "object",
      "properties" : {
        "domainPrefix" : {
          "type" : "string"
        },
        "caCertificates" : {
          "type" : "string"
        },
        "mode" : {
          "type" : "string",
          "enum" : [ "LOOSE", "STRICT" ]
        }
      }
    },
    "AzureSubscriptionDTO" : {
      "type" : "object",
      "required" : [ "subscriptionId", "subscriptionName" ],
      "properties" : {
        "subscriptionName" : {
          "type" : "string"
        },
        "subscriptionId" : {
          "type" : "string"
        }
      }
    },
    "AzureSubscriptionsDTO" : {
      "type" : "object",
      "properties" : {
        "subscriptions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureSubscriptionDTO"
          }
        }
      }
    },
    "ResponseAzureSubscriptionsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureSubscriptionsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AcrRegistriesDTO" : {
      "type" : "object",
      "properties" : {
        "registries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AcrRegistryDTO"
          }
        }
      }
    },
    "AcrRegistryDTO" : {
      "type" : "object",
      "required" : [ "registry" ],
      "properties" : {
        "registry" : {
          "type" : "string"
        }
      }
    },
    "ResponseAcrRegistriesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AcrRegistriesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AcrRepositoriesDTO" : {
      "type" : "object",
      "properties" : {
        "repositories" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AcrRepositoryDTO"
          }
        }
      }
    },
    "AcrRepositoryDTO" : {
      "type" : "object",
      "required" : [ "repository" ],
      "properties" : {
        "repository" : {
          "type" : "string"
        }
      }
    },
    "ResponseAcrRepositoriesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AcrRepositoriesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AcrBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "buildUrl" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "repository" : {
          "type" : "string"
        }
      }
    },
    "ResponseAcrBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AcrBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AcrRequestDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "tagRegex" : {
          "type" : "string"
        },
        "tagsList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "AcrResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AcrBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseAcrResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AcrResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactFileMetadata" : {
      "type" : "object",
      "properties" : {
        "fileName" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "BuildDetails" : {
      "type" : "object",
      "properties" : {
        "number" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "artifactPath" : {
          "type" : "string"
        },
        "buildUrl" : {
          "type" : "string"
        },
        "buildDisplayName" : {
          "type" : "string"
        },
        "buildFullDisplayName" : {
          "type" : "string"
        },
        "artifactFileSize" : {
          "type" : "string"
        },
        "uiDisplayName" : {
          "type" : "string"
        },
        "updateTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "FAILURE", "UNSTABLE", "SUCCESS" ]
        },
        "buildParameters" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "artifactFileMetadataList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactFileMetadata"
          }
        },
        "artifactDownloadMetadata" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactFileMetadata"
          }
        }
      }
    },
    "ResponseListBuildDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BuildDetails"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AMIFilter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "AMIRequestBody" : {
      "type" : "object",
      "properties" : {
        "runtimeInputYaml" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AMITag"
          }
        },
        "filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AMIFilter"
          }
        }
      }
    },
    "AMITag" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "AMITagObject" : {
      "type" : "object",
      "properties" : {
        "tagName" : {
          "type" : "string"
        }
      }
    },
    "ResponseListAMITagObject" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AMITagObject"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryRepoDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "repositories" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseArtifactoryRepoDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactoryRepoDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryImagePath" : {
      "type" : "object",
      "properties" : {
        "imagePath" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryImagePathsDTO" : {
      "type" : "object",
      "properties" : {
        "imagePaths" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactoryImagePath"
          }
        }
      }
    },
    "ResponseArtifactoryImagePathsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactoryImagePathsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryArtifactBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "artifactName" : {
          "type" : "string"
        },
        "artifactPath" : {
          "type" : "string"
        }
      }
    },
    "ResponseListArtifactoryArtifactBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactoryArtifactBuildDetailsDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryBuildDetailsDTO" : {
      "type" : "object"
    },
    "ResponseArtifactoryBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactoryBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryRequestDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "tagRegex" : {
          "type" : "string"
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactoryBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseArtifactoryResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactoryResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureDevopsProject" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseListAzureDevopsProject" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureDevopsProject"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureArtifactsFeed" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "fullyQualifiedName" : {
          "type" : "string"
        },
        "project" : {
          "$ref" : "#/definitions/AzureDevopsProject"
        }
      }
    },
    "ResponseListAzureArtifactsFeed" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureArtifactsFeed"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseBuildDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/BuildDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureArtifactsPackage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "protocolType" : {
          "type" : "string"
        }
      }
    },
    "ResponseListAzureArtifactsPackage" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureArtifactsPackage"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "BambooPlanKeysDTO" : {
      "type" : "object",
      "properties" : {
        "planKeys" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BambooPlanNames"
          }
        }
      }
    },
    "BambooPlanNames" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "ResponseBambooPlanKeysDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/BambooPlanKeysDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CustomScriptInfo" : {
      "type" : "object",
      "required" : [ "script" ],
      "properties" : {
        "script" : {
          "type" : "string"
        },
        "inputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "runtimeInputYaml" : {
          "type" : "string"
        },
        "delegateSelector" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskSelectorYaml"
          }
        }
      }
    },
    "NGVariable" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "String", "Number", "Secret" ]
        },
        "description" : {
          "type" : "string"
        },
        "required" : {
          "type" : "boolean"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "NumberNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_\\.$-]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Number" ]
          },
          "value" : {
            "type" : "number",
            "format" : "double"
          },
          "default" : {
            "type" : "number",
            "format" : "double"
          }
        }
      } ]
    },
    "SecretNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_\\.$-]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Secret" ]
          },
          "value" : {
            "type" : "string"
          },
          "default" : {
            "type" : "string"
          }
        }
      } ]
    },
    "StringNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_\\.$-]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "String" ]
          },
          "value" : {
            "type" : "string"
          },
          "default" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TaskSelectorYaml" : {
      "type" : "object",
      "properties" : {
        "delegateSelectors" : {
          "type" : "string"
        },
        "origin" : {
          "type" : "string"
        }
      }
    },
    "DockerBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "buildUrl" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "imagePath" : {
          "type" : "string"
        }
      }
    },
    "DockerResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DockerBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseDockerResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DockerResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DockerRequestDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "tagRegex" : {
          "type" : "string"
        },
        "tagsList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseDockerBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DockerBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EcrBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "buildUrl" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "imagePath" : {
          "type" : "string"
        }
      }
    },
    "ResponseEcrBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EcrBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EcrRequestDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "tagRegex" : {
          "type" : "string"
        },
        "tagsList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "region" : {
          "type" : "string"
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "EcrListImagesDTO" : {
      "type" : "object",
      "properties" : {
        "images" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseEcrListImagesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EcrListImagesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EcrResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EcrBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseEcrResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EcrResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GARPackageDTO" : {
      "type" : "object",
      "properties" : {
        "packageName" : {
          "type" : "string"
        },
        "createTime" : {
          "type" : "string"
        },
        "updateTime" : {
          "type" : "string"
        }
      }
    },
    "GARPackageDTOList" : {
      "type" : "object",
      "properties" : {
        "garPackageDTOList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GARPackageDTO"
          }
        }
      }
    },
    "ResponseGARPackageDTOList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GARPackageDTOList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GARRepositoryDTOList" : {
      "type" : "object",
      "properties" : {
        "garRepositoryDTOList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GarRepositoryDTO"
          }
        }
      }
    },
    "GarRepositoryDTO" : {
      "type" : "object",
      "properties" : {
        "repository" : {
          "type" : "string"
        },
        "format" : {
          "type" : "string"
        },
        "createTime" : {
          "type" : "string"
        },
        "updateTime" : {
          "type" : "string"
        }
      }
    },
    "ResponseGARRepositoryDTOList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GARRepositoryDTOList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RegionGar" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "ResponseListRegionGar" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RegionGar"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GARBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseGARBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GARBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GarRequestDTO" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "versionRegex" : {
          "type" : "string"
        },
        "versionList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "GARResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GARBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseGARResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GARResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GcrBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "buildUrl" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "imagePath" : {
          "type" : "string"
        }
      }
    },
    "ResponseGcrBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GcrBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GcrRequestDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "tagRegex" : {
          "type" : "string"
        },
        "tagsList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "registryHostname" : {
          "type" : "string"
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "GcrResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GcrBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseGcrResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GcrResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GithubPackageDTO" : {
      "type" : "object",
      "properties" : {
        "packageId" : {
          "type" : "string"
        },
        "packageName" : {
          "type" : "string"
        },
        "packageType" : {
          "type" : "string"
        },
        "visibility" : {
          "type" : "string"
        },
        "packageUrl" : {
          "type" : "string"
        }
      }
    },
    "GithubPackagesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "githubPackageResponse" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GithubPackageDTO"
          }
        }
      }
    },
    "ResponseGithubPackagesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GithubPackagesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GoogleCloudStorageBucketDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "GoogleCloudStorageBucketsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buckets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GoogleCloudStorageBucketDetails"
          }
        }
      }
    },
    "ResponseGoogleCloudStorageBucketsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GoogleCloudStorageBucketsResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageString" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageString" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageString"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "JenkinsJobDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "jobDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JobDetails"
          }
        }
      }
    },
    "JobDetails" : {
      "type" : "object",
      "properties" : {
        "jobName" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JobParameter"
          }
        },
        "folder" : {
          "type" : "boolean"
        }
      }
    },
    "JobParameter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "options" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "ResponseJenkinsJobDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/JenkinsJobDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListJobParameter" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JobParameter"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NexusRepositories" : {
      "type" : "object",
      "properties" : {
        "repositoryName" : {
          "type" : "string"
        },
        "repositoryId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListNexusRepositories" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NexusRepositories"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NexusBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "buildUrl" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "imagePath" : {
          "type" : "string"
        }
      }
    },
    "ResponseNexusBuildDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NexusBuildDetailsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NexusRequestDTO" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "string"
        },
        "tagRegex" : {
          "type" : "string"
        },
        "runtimeInputYaml" : {
          "type" : "string"
        }
      }
    },
    "NexusResponseDTO" : {
      "type" : "object",
      "properties" : {
        "buildDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NexusBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseNexusResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NexusResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetString" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AwsVPC" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseListAwsVPC" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AwsVPC"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AwsListInstancesFilter" : {
      "type" : "object",
      "properties" : {
        "region" : {
          "type" : "string"
        },
        "autoScalingGroupName" : {
          "type" : "string"
        },
        "vpcIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "winRm" : {
          "type" : "boolean"
        },
        "hostConnectionType" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapStringString" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AwsCFTemplateParamsData" : {
      "type" : "object",
      "properties" : {
        "paramKey" : {
          "type" : "string"
        },
        "paramType" : {
          "type" : "string"
        },
        "defaultValue" : {
          "type" : "string"
        }
      }
    },
    "ResponseListAwsCFTemplateParamsData" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AwsCFTemplateParamsData"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "BucketResponse" : {
      "type" : "object",
      "properties" : {
        "bucketName" : {
          "type" : "string"
        }
      }
    },
    "ResponseListBucketResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BucketResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FilePaths" : {
      "type" : "object",
      "properties" : {
        "buildDetails" : {
          "$ref" : "#/definitions/BuildDetails"
        }
      }
    },
    "ResponseListFilePaths" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilePaths"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CustomDeploymentRefreshYaml" : {
      "type" : "object",
      "required" : [ "refreshedYaml" ],
      "properties" : {
        "refreshedYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseCustomDeploymentRefreshYaml" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CustomDeploymentRefreshYaml"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CustomDeploymentYaml" : {
      "type" : "object",
      "required" : [ "yaml" ],
      "properties" : {
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "CustomDeploymentVariableProperties" : {
      "type" : "object",
      "required" : [ "fqn", "variableName" ],
      "properties" : {
        "fqn" : {
          "type" : "string"
        },
        "variableName" : {
          "type" : "string"
        },
        "localName" : {
          "type" : "string"
        },
        "aliasFqn" : {
          "type" : "string"
        },
        "visible" : {
          "type" : "boolean"
        }
      }
    },
    "CustomDeploymentVariableResponse" : {
      "type" : "object",
      "required" : [ "metadataMap", "yaml" ],
      "properties" : {
        "yaml" : {
          "type" : "string"
        },
        "metadataMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CustomDeploymentVariableProperties"
          }
        }
      }
    },
    "ResponseCustomDeploymentVariableResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CustomDeploymentVariableResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CustomDeploymentYamlRequest" : {
      "type" : "object",
      "required" : [ "entityYaml" ],
      "properties" : {
        "entityYaml" : {
          "type" : "string"
        }
      }
    },
    "CustomDeploymentInfraResponse" : {
      "type" : "object",
      "required" : [ "obsolete" ],
      "properties" : {
        "obsolete" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseCustomDeploymentInfraResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CustomDeploymentInfraResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EntityDetailProtoDTO" : {
      "type" : "object"
    },
    "ResponseListEntityDetailProtoDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityDetailProtoDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DelegateProfileDetailsNg" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "primary" : {
          "type" : "boolean"
        },
        "approvalRequired" : {
          "type" : "boolean"
        },
        "startupScript" : {
          "type" : "string"
        },
        "scopingRules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScopingRuleDetailsNg"
          }
        },
        "selectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "createdBy" : {
          "$ref" : "#/definitions/EmbeddedUserDetails"
        },
        "lastUpdatedBy" : {
          "$ref" : "#/definitions/EmbeddedUserDetails"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "identifier" : {
          "type" : "string"
        },
        "numberOfDelegates" : {
          "type" : "integer",
          "format" : "int64"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "EmbeddedUserDetails" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        }
      }
    },
    "RestResponseDelegateProfileDetailsNg" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/DelegateProfileDetailsNg"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ScopingRuleDetailsNg" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "environmentTypeId" : {
          "type" : "string"
        },
        "environmentIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RestResponsePageResponseDelegateProfileDetailsNg" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateProfileDetailsNg"
          }
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DelegateEntityOwner" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "DelegateGroup" : {
      "type" : "object",
      "required" : [ "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "delegateType" : {
          "type" : "string"
        },
        "runnerTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "owner" : {
          "$ref" : "#/definitions/DelegateEntityOwner"
        },
        "ng" : {
          "type" : "boolean"
        },
        "delegateConfigurationId" : {
          "type" : "string"
        },
        "sizeDetails" : {
          "$ref" : "#/definitions/DelegateSizeDetails"
        },
        "k8sConfigDetails" : {
          "$ref" : "#/definitions/K8sConfigDetails"
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ENABLED", "DELETED" ]
        },
        "validUntil" : {
          "type" : "string",
          "format" : "date-time"
        },
        "identifier" : {
          "type" : "string"
        },
        "upgraderLastUpdated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "delegatesExpireOn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "delegateExpiryAlertNextIteration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "parentUniqueId" : {
          "type" : "string"
        }
      }
    },
    "DelegateSizeDetails" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "string",
          "enum" : [ "LAPTOP", "SMALL", "MEDIUM", "LARGE", "CCM_SMALL" ]
        },
        "label" : {
          "type" : "string"
        },
        "replicas" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ram" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cpu" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "K8sConfigDetails" : {
      "type" : "object",
      "properties" : {
        "k8sPermissionType" : {
          "type" : "string",
          "enum" : [ "CLUSTER_ADMIN", "CLUSTER_VIEWER", "NAMESPACE_ADMIN" ]
        },
        "namespace" : {
          "type" : "string"
        }
      }
    },
    "RestResponseDelegateGroup" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/DelegateGroup"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DelegateGroupTags" : {
      "type" : "object",
      "properties" : {
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DelegateDownloadRequest" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "size" : {
          "type" : "string",
          "enum" : [ "LAPTOP", "SMALL", "MEDIUM", "LARGE", "CCM_SMALL" ]
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tokenName" : {
          "type" : "string"
        },
        "clusterPermissionType" : {
          "type" : "string",
          "enum" : [ "CLUSTER_ADMIN", "CLUSTER_VIEWER", "NAMESPACE_ADMIN" ]
        },
        "customClusterNamespace" : {
          "type" : "string"
        }
      }
    },
    "DelegateGroupDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RestResponseListDelegateGroupDTO" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateGroupDTO"
          }
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseDelegateGroupDTO" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/DelegateGroupDTO"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DelegateListResponse" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "lastHeartBeat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "connected" : {
          "type" : "boolean"
        },
        "delegateReplicas" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateReplica"
          }
        },
        "autoUpgrade" : {
          "type" : "string",
          "enum" : [ "ON", "OFF", "DETECTING" ]
        },
        "legacy" : {
          "type" : "boolean"
        },
        "orgName" : {
          "type" : "string"
        },
        "projectName" : {
          "type" : "string"
        }
      }
    },
    "DelegateReplica" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "lastHeartbeat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "connected" : {
          "type" : "boolean"
        },
        "hostName" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "expiringAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "RestResponseListDelegateListResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateListResponse"
          }
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DelegateDeleteResponse" : {
      "type" : "object",
      "properties" : {
        "responseMsg" : {
          "type" : "string"
        }
      }
    },
    "RestResponseDelegateDeleteResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/DelegateDeleteResponse"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DelegateSetupDetails" : {
      "type" : "object",
      "required" : [ "delegateType", "name" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "size" : {
          "type" : "string",
          "enum" : [ "LAPTOP", "SMALL", "MEDIUM", "LARGE", "CCM_SMALL" ]
        },
        "hostName" : {
          "type" : "string"
        },
        "delegateConfigurationId" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "k8sConfigDetails" : {
          "$ref" : "#/definitions/K8sConfigDetails"
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "delegateType" : {
          "type" : "string"
        },
        "tokenName" : {
          "type" : "string"
        },
        "runAsRoot" : {
          "type" : "boolean"
        },
        "version" : {
          "type" : "string"
        }
      }
    },
    "RestResponseSupportedDelegateVersion" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/SupportedDelegateVersion"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SupportedDelegateVersion" : {
      "type" : "object",
      "properties" : {
        "latestSupportedVersion" : {
          "type" : "string"
        },
        "latestSupportedMinimalVersion" : {
          "type" : "string"
        }
      }
    },
    "RestResponseString" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "string"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DelegateConnectionDetails" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "lastHeartbeat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastGrpcHeartbeat" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "DelegateGroupDetails" : {
      "type" : "object",
      "properties" : {
        "groupId" : {
          "type" : "string"
        },
        "delegateGroupIdentifier" : {
          "type" : "string"
        },
        "delegateType" : {
          "type" : "string"
        },
        "groupName" : {
          "type" : "string"
        },
        "delegateDescription" : {
          "type" : "string"
        },
        "delegateConfigurationId" : {
          "type" : "string"
        },
        "groupImplicitSelectors" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "PROFILE_NAME", "DELEGATE_NAME", "HOST_NAME", "GROUP_NAME", "GROUP_SELECTORS", "PROFILE_SELECTORS" ]
          }
        },
        "groupCustomSelectors" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "lastHeartBeat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "connectivityStatus" : {
          "type" : "string"
        },
        "activelyConnected" : {
          "type" : "boolean"
        },
        "grpcActive" : {
          "type" : "boolean"
        },
        "delegateInstanceDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateInner"
          }
        },
        "tokenActive" : {
          "type" : "boolean"
        },
        "autoUpgrade" : {
          "type" : "string",
          "enum" : [ "ON", "OFF", "DETECTING" ]
        },
        "delegateGroupExpirationTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "delegateVersion" : {
          "type" : "string"
        },
        "upgraderLastUpdated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "immutable" : {
          "type" : "boolean"
        },
        "groupVersion" : {
          "type" : "string"
        }
      }
    },
    "DelegateGroupListing" : {
      "type" : "object",
      "properties" : {
        "delegateGroupDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateGroupDetails"
          }
        }
      }
    },
    "DelegateInner" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "lastHeartbeat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "activelyConnected" : {
          "type" : "boolean"
        },
        "hostName" : {
          "type" : "string"
        },
        "tokenActive" : {
          "type" : "boolean"
        },
        "version" : {
          "type" : "string"
        },
        "delegateExpirationTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "connections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateConnectionDetails"
          }
        }
      }
    },
    "RestResponseDelegateGroupListing" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/DelegateGroupListing"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ApiKeyPrincipal" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Principal"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "DelegateTokenDetails" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/EmbeddedUser"
        },
        "createdByNgUser" : {
          "$ref" : "#/definitions/Principal"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "REVOKED" ]
        },
        "value" : {
          "type" : "string"
        },
        "ownerIdentifier" : {
          "type" : "string"
        },
        "revokeAfter" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "RestResponseDelegateTokenDetails" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/DelegateTokenDetails"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ServiceAccountPrincipal" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Principal"
      }, {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "accountId" : {
            "type" : "string"
          },
          "uniqueId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServicePrincipal" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Principal"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "UserPrincipal" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Principal"
      }, {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "accountId" : {
            "type" : "string"
          },
          "role" : {
            "type" : "string"
          },
          "uniqueId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RestResponseListDelegateTokenDetails" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateTokenDetails"
          }
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "CDStageMetaDataDTO" : {
      "type" : "object",
      "properties" : {
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "serviceEnvRefList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceEnvRef"
          }
        }
      }
    },
    "ResponseCDStageMetaDataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CDStageMetaDataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceEnvRef" : {
      "type" : "object",
      "properties" : {
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        }
      }
    },
    "CdDeployStageMetadataRequestDTO" : {
      "type" : "object",
      "required" : [ "pipelineYaml", "stageIdentifier" ],
      "properties" : {
        "stageIdentifier" : {
          "type" : "string"
        },
        "pipelineYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnvironmentResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentRequestDTO" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "PageEnvironmentResponseDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentResponseDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageEnvironmentResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageEnvironmentResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnvironmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NGEntityTemplateResponseDTO" : {
      "type" : "object",
      "properties" : {
        "inputSetTemplateYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseNGEntityTemplateResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NGEntityTemplateResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "success" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseEnvironmentMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentMoveConfigResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnvironmentGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentGitUpdateResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentImportResponseDTO" : {
      "type" : "object",
      "properties" : {
        "envIdentifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnvironmentImportResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentImportResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentInputsMergedResponseDto" : {
      "type" : "object",
      "properties" : {
        "mergedEnvironmentInputsYaml" : {
          "type" : "string"
        },
        "environmentYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnvironmentInputsMergedResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentInputsMergedResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentCloneResponseDTO" : {
      "type" : "object",
      "properties" : {
        "environment" : {
          "$ref" : "#/definitions/EnvironmentResponseDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "entityValidityDetails" : {
          "$ref" : "#/definitions/EntityValidityDetails"
        },
        "infrastructureResponseList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InfrastructureResponse"
          }
        },
        "cloneFailedInfrastructures" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "InfrastructureResponse" : {
      "type" : "object",
      "properties" : {
        "infrastructure" : {
          "$ref" : "#/definitions/InfrastructureResponseDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "entityValidityDetails" : {
          "$ref" : "#/definitions/EntityValidityDetails"
        }
      }
    },
    "InfrastructureResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "enum" : [ "KubernetesDirect", "KubernetesGcp", "KubernetesAzure", "Pdc", "SshWinRmAzure", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "SshWinRmAws", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AWS_SAM", "AwsLambda", "KubernetesAws", "KubernetesRancher", "GoogleCloudRun" ]
        },
        "deploymentType" : {
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        },
        "yaml" : {
          "type" : "string"
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        },
        "cacheResponseMetadataDTO" : {
          "$ref" : "#/definitions/CacheResponseMetadata"
        }
      }
    },
    "ResponseEnvironmentCloneResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentCloneResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DestinationEnvironmentConfig" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envIdentifier" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "baseBranch" : {
          "type" : "string"
        },
        "commitMessage" : {
          "type" : "string"
        },
        "newBranch" : {
          "type" : "boolean"
        },
        "harnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "EnvironmentCloneRequestDTO" : {
      "type" : "object",
      "required" : [ "destinationConfig", "sourceConfig" ],
      "properties" : {
        "sourceConfig" : {
          "$ref" : "#/definitions/SourceEnvironmentConfig"
        },
        "destinationConfig" : {
          "$ref" : "#/definitions/DestinationEnvironmentConfig"
        },
        "cloneInfrastructures" : {
          "type" : "boolean"
        }
      }
    },
    "SourceEnvironmentConfig" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envIdentifier" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        }
      }
    },
    "PageEnvironmentResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageEnvironmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageEnvironmentResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InstanceGroupedByArtifactV2" : {
      "type" : "object",
      "properties" : {
        "artifactVersion" : {
          "type" : "string"
        },
        "artifactPath" : {
          "type" : "string"
        },
        "latest" : {
          "type" : "boolean"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedByEnvironmentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByEnvironmentV2"
          }
        }
      }
    },
    "InstanceGroupedByEnvironmentV2" : {
      "type" : "object",
      "properties" : {
        "envId" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedByInfraList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByInfrastructureV2"
          }
        },
        "instanceGroupedByClusterList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByInfrastructureV2"
          }
        }
      }
    },
    "InstanceGroupedByInfrastructureV2" : {
      "type" : "object",
      "properties" : {
        "infraIdentifier" : {
          "type" : "string"
        },
        "infraName" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedByPipelineExecutionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByPipelineExecution"
          }
        }
      }
    },
    "InstanceGroupedByPipelineExecution" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lastPipelineExecutionId" : {
          "type" : "string"
        },
        "lastPipelineExecutionName" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "InstanceGroupedByService" : {
      "type" : "object",
      "properties" : {
        "serviceId" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedByArtifactList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByArtifactV2"
          }
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "InstanceGroupedByServiceList" : {
      "type" : "object",
      "properties" : {
        "instanceGroupedByServiceList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByService"
          }
        }
      }
    },
    "ResponseInstanceGroupedByServiceList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceGroupedByServiceList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListEnvironmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ApplicationSettingsConfiguration" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "ArtifactBundleStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "artifactBundleType", "deployableUnitPath", "manifestPath" ],
        "properties" : {
          "manifestPath" : {
            "type" : "string"
          },
          "deployableUnitPath" : {
            "type" : "string"
          },
          "artifactBundleType" : {
            "type" : "string",
            "enum" : [ "ZIP", "TAR", "TAR_GZIP" ]
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ArtifactoryStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "repositoryName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "repositoryName" : {
            "type" : "string"
          },
          "artifactPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgAdditionalConfigurationManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgConfigurationManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgLaunchTemplateManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgScalingPolicyManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgScheduledUpdateGroupActionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AutoScalerManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "skipResourceVersioning" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsLambdaDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsLambdaFunctionAliasDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamDirectoryManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "samTemplateFile" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureRepoStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "gitFetchType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "gitFetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "folderPath" : {
            "type" : "string"
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BitbucketStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "gitFetchType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "gitFetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "folderPath" : {
            "type" : "string"
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ConfigFile" : {
      "type" : "object",
      "required" : [ "identifier", "spec" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/ConfigFileAttributes"
        }
      }
    },
    "ConfigFileAttributes" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        }
      }
    },
    "ConfigFileWrapper" : {
      "type" : "object",
      "properties" : {
        "configFile" : {
          "$ref" : "#/definitions/ConfigFile"
        }
      }
    },
    "ConnectionStringsConfiguration" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "CustomRemoteStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "extractionScript", "filePath" ],
        "properties" : {
          "extractionScript" : {
            "type" : "string"
          },
          "filePath" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "EcsScalableTargetDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsScalingPolicyDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsServiceDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsTaskDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GcsStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "bucketName" : {
            "type" : "string"
          },
          "folderPath" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitLabStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "gitFetchType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "gitFetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "folderPath" : {
            "type" : "string"
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitOpsDeploymentRepoManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "GitStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "gitFetchType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "gitFetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "folderPath" : {
            "type" : "string"
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "gitFetchType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "gitFetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "folderPath" : {
            "type" : "string"
          },
          "repoName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudFunctionDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudFunctionGenOneDefinitionManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunJobManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunServiceManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessCodeStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "gitFetchType" ],
        "properties" : {
          "gitFetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "folderPath" : {
            "type" : "string"
          },
          "repoName" : {
            "type" : "string"
          },
          "connectorRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          }
        }
      } ]
    },
    "HarnessStore" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "files" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "secretFiles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "HelmChartManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "chartName" : {
            "type" : "string"
          },
          "chartVersion" : {
            "type" : "string"
          },
          "helmVersion" : {
            "type" : "string",
            "enum" : [ "V2", "V3", "V380" ]
          },
          "valuesPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipResourceVersioning" : {
            "type" : "boolean"
          },
          "enableDeclarativeRollback" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HelmManifestCommandFlag"
            }
          },
          "subChartPath" : {
            "type" : "string"
          },
          "fetchHelmChartMetadata" : {
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HelmManifestCommandFlag" : {
      "type" : "object",
      "required" : [ "commandType" ],
      "properties" : {
        "commandType" : {
          "type" : "string",
          "enum" : [ "Fetch", "Template", "Pull", "Install", "Upgrade", "Rollback", "History", "Delete", "Uninstall", "List", "Add", "Update", "Version" ]
        },
        "flag" : {
          "type" : "string"
        }
      }
    },
    "HelmRepoOverrideManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "type" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HttpStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InheritFromManifestStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "InlineStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "content" ],
        "properties" : {
          "content" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InputSetValidator" : {
      "type" : "object",
      "properties" : {
        "validatorType" : {
          "type" : "string",
          "enum" : [ "ALLOWED_VALUES", "REGEX", "SELECT_ONE_FROM" ]
        },
        "parameters" : {
          "type" : "string"
        }
      }
    },
    "K8sManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "valuesPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipResourceVersioning" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "enableDeclarativeRollback" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "KustomizeManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "overlayConfiguration" : {
            "$ref" : "#/definitions/OverlayConfiguration"
          },
          "patchesPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipResourceVersioning" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "enableDeclarativeRollback" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "pluginPath" : {
            "type" : "string"
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/KustomizeManifestCommandFlag"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "KustomizeManifestCommandFlag" : {
      "type" : "object",
      "required" : [ "commandType" ],
      "properties" : {
        "commandType" : {
          "type" : "string",
          "enum" : [ "Build" ]
        },
        "flag" : {
          "type" : "string"
        }
      }
    },
    "KustomizePatchesManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ManifestAttributes" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "ManifestConfig" : {
      "type" : "object",
      "required" : [ "identifier", "spec", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "HelmChart", "HelmRepoOverride", "K8sManifest", "Kustomize", "KustomizePatches", "OpenshiftParam", "OpenshiftTemplate", "Values", "ServerlessAwsLambda", "ReleaseRepo", "DeploymentRepo", "EcsTaskDefinition", "EcsServiceDefinition", "EcsScalableTargetDefinition", "EcsScalingPolicyDefinition", "TasManifest", "TasVars", "TasAutoScaler", "AsgLaunchTemplate", "AsgConfiguration", "AsgAdditionalConfiguration", "AsgScalingPolicy", "AsgScheduledUpdateGroupAction", "GoogleCloudFunctionDefinition", "AwsLambdaFunctionDefinition", "AwsLambdaFunctionAliasDefinition", "AwsSamDirectory", "GoogleCloudFunctionGenOneDefinition", "GoogleCloudRunService", "GoogleCloudRunJob" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ManifestAttributes"
        }
      }
    },
    "ManifestConfigWrapper" : {
      "type" : "object",
      "properties" : {
        "manifest" : {
          "$ref" : "#/definitions/ManifestConfig"
        }
      }
    },
    "NGEnvironmentConfig" : {
      "type" : "object",
      "properties" : {
        "environment" : {
          "$ref" : "#/definitions/NGEnvironmentInfoConfig"
        }
      }
    },
    "NGEnvironmentGlobalOverride" : {
      "type" : "object",
      "properties" : {
        "manifests" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManifestConfigWrapper"
          }
        },
        "configFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigFileWrapper"
          }
        },
        "applicationSettings" : {
          "$ref" : "#/definitions/ApplicationSettingsConfiguration"
        },
        "connectionStrings" : {
          "$ref" : "#/definitions/ConnectionStringsConfiguration"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "NGEnvironmentInfoConfig" : {
      "type" : "object",
      "required" : [ "identifier", "name", "type" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "description" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "overrides" : {
          "$ref" : "#/definitions/NGEnvironmentGlobalOverride"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "OciHelmChartConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "config" : {
            "$ref" : "#/definitions/OciHelmChartStoreConfigWrapper"
          },
          "basePath" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OciHelmChartStoreConfig" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "OciHelmChartStoreConfigWrapper" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Generic", "ECR" ]
        },
        "spec" : {
          "$ref" : "#/definitions/OciHelmChartStoreConfig"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "OciHelmChartStoreEcrConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/OciHelmChartStoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "registryId" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OciHelmChartStoreGenericConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/OciHelmChartStoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "connectorRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OpenshiftManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "paramsPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipResourceVersioning" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "enableDeclarativeRollback" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OpenshiftParamManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "OverlayConfiguration" : {
      "type" : "object",
      "required" : [ "kustomizeYamlFolderPath" ],
      "properties" : {
        "kustomizeYamlFolderPath" : {
          "type" : "string"
        }
      }
    },
    "ParameterField" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "object"
        },
        "defaultValue" : {
          "type" : "object"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldBoolean" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "boolean"
        },
        "defaultValue" : {
          "type" : "boolean"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldString" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "string"
        },
        "defaultValue" : {
          "type" : "string"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ReleaseRepoManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseNGEnvironmentConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NGEnvironmentConfig"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "S3StoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "bucketName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "folderPath" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "S3UrlStoreConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoreConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region", "urls" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "urls" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServerlessAwsLambdaManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "configOverridePath" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "StoreConfig" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "StoreConfigWrapper" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "spec" : {
          "$ref" : "#/definitions/StoreConfig"
        },
        "metadata" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CustomRemote", "Git", "Github", "Bitbucket", "GitLab", "Http", "S3", "Gcs", "Inline", "Artifactory", "S3Url", "InheritFromManifest", "Harness", "OciHelmChart", "AzureRepo", "ArtifactBundle", "HarnessCode" ]
        }
      }
    },
    "TasManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "cfCliVersion" : {
            "type" : "string",
            "enum" : [ "V7" ]
          },
          "varsPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "autoScalerPath" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ValuesManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "VarsManifest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestAttributes"
      }, {
        "type" : "object",
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseServiceOverrideResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceOverrideResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideRequestDTO" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentInputsetYamlAndServiceOverridesMetadata" : {
      "type" : "object",
      "properties" : {
        "envRef" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envYaml" : {
          "type" : "string"
        },
        "envRuntimeInputYaml" : {
          "type" : "string"
        },
        "servicesOverrides" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceOverridesMetadata"
          }
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentYamlMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "environmentsInputYamlAndServiceOverrides" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentInputsetYamlAndServiceOverridesMetadata"
          }
        }
      }
    },
    "ResponseEnvironmentYamlMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentYamlMetadataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverridesMetadata" : {
      "type" : "object",
      "properties" : {
        "serviceRef" : {
          "type" : "string"
        },
        "serviceYaml" : {
          "type" : "string"
        },
        "serviceRuntimeInputYaml" : {
          "type" : "string"
        },
        "serviceOverridesYaml" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentInputsetYamlAndServiceOverridesMetadataInput" : {
      "type" : "object",
      "required" : [ "serviceIdentifiers" ],
      "properties" : {
        "envIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "serviceIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "envGroupIdentifier" : {
          "type" : "string"
        }
      }
    },
    "EntityWithGitInfo" : {
      "type" : "object",
      "required" : [ "ref" ],
      "properties" : {
        "ref" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentAndServiceOverridesMetadataInput" : {
      "type" : "object",
      "required" : [ "serviceIdentifiers" ],
      "properties" : {
        "serviceIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "envGroupIdentifier" : {
          "type" : "string"
        },
        "entityWithGitInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityWithGitInfo"
          },
          "maxItems" : 1000,
          "minItems" : 0
        },
        "serviceWithGitInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityWithGitInfo"
          }
        }
      }
    },
    "EnvSwaggerObjectWrapper" : {
      "type" : "object",
      "properties" : {
        "serviceOverrideConfig" : {
          "$ref" : "#/definitions/NGServiceOverrideConfig"
        },
        "envFilterEntityType" : {
          "type" : "string",
          "enum" : [ "infrastructures", "gitOpsClusters", "environments" ]
        }
      }
    },
    "NGServiceOverrideConfig" : {
      "type" : "object",
      "properties" : {
        "serviceOverrides" : {
          "$ref" : "#/definitions/NGServiceOverrideInfoConfig"
        }
      }
    },
    "NGServiceOverrideInfoConfig" : {
      "type" : "object",
      "required" : [ "environmentRef", "serviceRef" ],
      "properties" : {
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "manifests" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManifestConfigWrapper"
          }
        },
        "configFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigFileWrapper"
          }
        },
        "applicationSettings" : {
          "$ref" : "#/definitions/ApplicationSettingsConfiguration"
        },
        "connectionStrings" : {
          "$ref" : "#/definitions/ConnectionStringsConfiguration"
        }
      }
    },
    "ResponseEnvSwaggerObjectWrapper" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvSwaggerObjectWrapper"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageServiceOverrideResponseDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceOverrideResponseDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceOverrideResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceOverrideResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ForceImportEnvironmentResponse" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseForceImportEnvironmentResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ForceImportEnvironmentResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ForceImportEnvironmentRequestDTO" : {
      "type" : "object",
      "required" : [ "branch", "filePath", "repoName" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "isHarnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "EntityMetadata" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "scope" : {
          "$ref" : "#/definitions/Scope"
        }
      }
    },
    "ResponseYamlValidationListAPIResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/YamlValidationListAPIResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "YamlValidationAPIResponse" : {
      "type" : "object",
      "properties" : {
        "isValid" : {
          "type" : "boolean"
        },
        "entityMetadata" : {
          "$ref" : "#/definitions/EntityMetadata"
        },
        "validationErrorMetadata" : {
          "$ref" : "#/definitions/YamlValidationErrorMetadata"
        },
        "isNotSupported" : {
          "type" : "boolean"
        }
      }
    },
    "YamlValidationErrorMetadata" : {
      "type" : "object",
      "properties" : {
        "errorMessage" : {
          "type" : "string"
        },
        "hint" : {
          "type" : "string"
        },
        "explanation" : {
          "type" : "string"
        }
      }
    },
    "YamlValidationListAPIResponse" : {
      "type" : "object",
      "properties" : {
        "yamlValidationAPIResponseList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/YamlValidationAPIResponse"
          }
        }
      }
    },
    "GitYamlValidationRequestParams" : {
      "type" : "object",
      "required" : [ "branch", "filePath", "repoName" ],
      "properties" : {
        "repoName" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "isDefaultBranch" : {
          "type" : "boolean"
        }
      }
    },
    "YamlValidationRequestBody" : {
      "type" : "object",
      "required" : [ "yaml" ],
      "properties" : {
        "yaml" : {
          "type" : "string"
        },
        "gitYamlValidationRequestParams" : {
          "$ref" : "#/definitions/GitYamlValidationRequestParams"
        }
      }
    },
    "EOLBannerResponseDTO" : {
      "type" : "object",
      "properties" : {
        "showBanner" : {
          "type" : "boolean"
        },
        "stageIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "failures" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseEOLBannerResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EOLBannerResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EOLBannerRequestDTO" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "pipelineIdentifier" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string"
        },
        "templateIdentifier" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string"
        }
      }
    },
    "GcpProjectDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "GcpProjectResponseDTO" : {
      "type" : "object",
      "properties" : {
        "projects" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GcpProjectDetails"
          }
        }
      }
    },
    "ResponseGcpProjectResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GcpProjectResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseInfrastructureResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfrastructureResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureRequestDTO" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "enum" : [ "KubernetesDirect", "KubernetesGcp", "KubernetesAzure", "Pdc", "SshWinRmAzure", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "SshWinRmAws", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AWS_SAM", "AwsLambda", "KubernetesAws", "KubernetesRancher", "GoogleCloudRun" ]
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureInputsMergedResponseDto" : {
      "type" : "object",
      "properties" : {
        "mergedInfrastructureInputsYaml" : {
          "type" : "string"
        },
        "infrastructureYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseInfrastructureInputsMergedResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfrastructureInputsMergedResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListInfrastructureResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InfrastructureResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseInfrastructureGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfrastructureGitUpdateResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureImportResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseInfrastructureImportResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfrastructureImportResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ForceImportInfrastructureResponse" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseForceImportInfrastructureResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ForceImportInfrastructureResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ForceImportInfrastructureRequestDTO" : {
      "type" : "object",
      "required" : [ "branch", "filePath", "repoName" ],
      "properties" : {
        "environmentIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "isHarnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "PageInfrastructureResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InfrastructureResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageInfrastructureResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageInfrastructureResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InfraMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "success" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseInfraMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfraMoveConfigResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AllHostsFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HostFilterSpec"
      }, {
        "type" : "object"
      } ]
    },
    "AsgInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "baseAsgName" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsInstanceFilter" : {
      "type" : "object",
      "properties" : {
        "vpcs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "AwsLambdaInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureFunctionInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "resourceGroup", "subscriptionId" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureWebAppInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "resourceGroup", "subscriptionId" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomDeploymentConnectorNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomDeploymentNGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Connector" ]
          },
          "value" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomDeploymentInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "customDeploymentRef" ],
        "properties" : {
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CustomDeploymentNGVariable"
            }
          },
          "customDeploymentRef" : {
            "$ref" : "#/definitions/StepTemplateRef"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomDeploymentNGVariable" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "String", "Number", "Secret", "Connector" ]
        },
        "description" : {
          "type" : "string"
        },
        "required" : {
          "type" : "boolean"
        }
      }
    },
    "CustomDeploymentNumberNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomDeploymentNGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Number" ]
          },
          "value" : {
            "type" : "number",
            "format" : "double"
          }
        }
      } ]
    },
    "CustomDeploymentSecretNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomDeploymentNGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Secret" ]
          },
          "value" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomDeploymentStringNGVariable" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomDeploymentNGVariable"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "String" ]
          },
          "value" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "cluster", "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "cluster" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ElastigroupConfiguration" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "ElastigroupInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "configuration", "connectorRef" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/ElastigroupConfiguration"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "project", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleFunctionsInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "project", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HostAttributesFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HostFilterSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "HostFilter" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "All", "HostNames", "HostAttributes" ]
        },
        "spec" : {
          "$ref" : "#/definitions/HostFilterSpec"
        }
      }
    },
    "HostFilterSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "All", "HostNames", "HostAttributes" ]
        }
      }
    },
    "HostNamesFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HostFilterSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "Infrastructure" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "InfrastructureConfig" : {
      "type" : "object",
      "properties" : {
        "infrastructureDefinition" : {
          "$ref" : "#/definitions/InfrastructureDefinitionConfig"
        }
      }
    },
    "InfrastructureDefinitionConfig" : {
      "type" : "object",
      "required" : [ "deploymentType", "spec", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "deploymentType" : {
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "allowSimultaneousDeployments" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "KubernetesDirect", "KubernetesGcp", "KubernetesAzure", "Pdc", "SshWinRmAzure", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "SshWinRmAws", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AWS_SAM", "AwsLambda", "KubernetesAws", "KubernetesRancher", "GoogleCloudRun" ]
        },
        "spec" : {
          "$ref" : "#/definitions/Infrastructure"
        },
        "scopedServices" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "K8SDirectInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "namespace", "releaseName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string",
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          "releaseName" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "K8sAwsInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "cluster", "connectorRef", "namespace", "releaseName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string",
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          "releaseName" : {
            "type" : "string"
          },
          "cluster" : {
            "type" : "string"
          },
          "endpoint" : {
            "type" : "string"
          },
          "caCertData" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "K8sAzureInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "cluster", "connectorRef", "namespace", "releaseName", "resourceGroup", "subscriptionId" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string",
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          "releaseName" : {
            "type" : "string"
          },
          "cluster" : {
            "type" : "string"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "useClusterAdminCredentials" : {
            "type" : "boolean"
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "K8sGcpInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "cluster", "connectorRef", "namespace", "releaseName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string",
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          "releaseName" : {
            "type" : "string"
          },
          "cluster" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "K8sRancherInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "cluster", "connectorRef", "namespace", "releaseName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string",
            "pattern" : "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          "releaseName" : {
            "type" : "string"
          },
          "cluster" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PdcInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "credentialsRef", "hostFilter" ],
        "properties" : {
          "credentialsRef" : {
            "type" : "string"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "hostArrayPath" : {
            "type" : "string"
          },
          "hostAttributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "connectorRef" : {
            "type" : "string"
          },
          "hostFilter" : {
            "$ref" : "#/definitions/HostFilter"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseInfrastructureConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfrastructureConfig"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServerlessAwsLambdaInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region", "stage" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "stage" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SshWinRmAwsInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "credentialsRef", "hostConnectionType", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "credentialsRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "awsInstanceFilter" : {
            "$ref" : "#/definitions/AwsInstanceFilter"
          },
          "asgName" : {
            "type" : "string"
          },
          "hostConnectionType" : {
            "type" : "string",
            "enum" : [ "PublicIP", "PrivateIP" ]
          },
          "targetedHosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SshWinRmAzureInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "credentialsRef", "hostConnectionType", "resourceGroup", "subscriptionId" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "credentialsRef" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "hostConnectionType" : {
            "type" : "string",
            "enum" : [ "Hostname", "PrivateIP", "PublicIP" ]
          },
          "targetedHosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provisioner" : {
            "type" : "string"
          }
        }
      } ]
    },
    "StepTemplateRef" : {
      "type" : "object",
      "required" : [ "templateRef" ],
      "properties" : {
        "templateRef" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string"
        }
      }
    },
    "TanzuApplicationServiceInfrastructure" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Infrastructure"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "organization", "space" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "space" : {
            "type" : "string"
          },
          "provisioner" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InfrastructureYamlMetadata" : {
      "type" : "object",
      "required" : [ "infrastructureIdentifier" ],
      "properties" : {
        "infrastructureIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "infrastructureYaml" : {
          "type" : "string"
        },
        "inputSetTemplateYaml" : {
          "type" : "string"
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureYamlMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "infrastructureYamlMetadataList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InfrastructureYamlMetadata"
          }
        }
      }
    },
    "ResponseInfrastructureYamlMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InfrastructureYamlMetadataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureYamlMetadataApiInput" : {
      "type" : "object",
      "required" : [ "infrastructureIdentifiers" ],
      "properties" : {
        "infrastructureIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "InfrastructureYamlMetadataApiInputV2" : {
      "type" : "object",
      "required" : [ "infrastructureIdentifiers" ],
      "properties" : {
        "infrastructureIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentBranch" : {
          "type" : "string"
        }
      }
    },
    "Invite" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "email", "id", "inviteType", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "roleBindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleBinding"
          }
        },
        "userGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "inviteType" : {
          "type" : "string",
          "enum" : [ "USER_INITIATED_INVITE", "ADMIN_INITIATED_INVITE", "SCIM_INITIATED_INVITE" ]
        },
        "approved" : {
          "type" : "boolean"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        }
      }
    },
    "ResponseOptionalInvite" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/Invite"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RoleBinding" : {
      "type" : "object",
      "required" : [ "managedRole", "roleIdentifier", "roleName" ],
      "properties" : {
        "roleIdentifier" : {
          "type" : "string"
        },
        "roleName" : {
          "type" : "string"
        },
        "roleScopeLevel" : {
          "type" : "string"
        },
        "resourceGroupIdentifier" : {
          "type" : "string"
        },
        "resourceGroupName" : {
          "type" : "string"
        },
        "managedRole" : {
          "type" : "boolean"
        }
      }
    },
    "PageInvite" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Invite"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageInvite" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageInvite"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ACLAggregateFilter" : {
      "type" : "object",
      "properties" : {
        "resourceGroupIdentifiers" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "roleIdentifiers" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseInvite" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/Invite"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GcpResponseDTO" : {
      "type" : "object",
      "properties" : {
        "clusterNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseGcpResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GcpResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "HelmChartResponseDTO" : {
      "type" : "object",
      "properties" : {
        "helmChartVersions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "lastTag" : {
          "type" : "string"
        }
      }
    },
    "ResponseHelmChartResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/HelmChartResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSvcEnvMigrationProjectWrapperResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SvcEnvMigrationProjectWrapperResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StageMigrationFailureResponse" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "pipelineIdentifier" : {
          "type" : "string"
        },
        "stageIdentifier" : {
          "type" : "string"
        },
        "failureReason" : {
          "type" : "string"
        }
      }
    },
    "SvcEnvMigrationProjectWrapperResponseDto" : {
      "type" : "object",
      "properties" : {
        "failures" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StageMigrationFailureResponse"
          }
        },
        "migratedPipelines" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SvcEnvMigrationProjectWrapperRequestDto" : {
      "type" : "object",
      "required" : [ "infraIdentifierFormat", "orgIdentifier", "projectIdentifier" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "infraIdentifierFormat" : {
          "type" : "string"
        },
        "templateMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/TemplateObject"
          }
        },
        "skipServices" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "skipInfras" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "skipPipelines" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "branch" : {
          "type" : "string"
        },
        "updatePipeline" : {
          "type" : "boolean"
        },
        "newBranch" : {
          "type" : "boolean"
        }
      }
    },
    "TemplateObject" : {
      "type" : "object",
      "required" : [ "templateRef", "versionLabel" ],
      "properties" : {
        "templateRef" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string"
        }
      }
    },
    "ResponseSvcEnvMigrationResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SvcEnvMigrationResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SvcEnvMigrationResponseDto" : {
      "type" : "object",
      "properties" : {
        "failures" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StageMigrationFailureResponse"
          }
        },
        "pipelineYaml" : {
          "type" : "string"
        },
        "migrated" : {
          "type" : "boolean"
        }
      }
    },
    "RuntimeEntity" : {
      "type" : "object",
      "properties" : {
        "serviceRef" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        }
      }
    },
    "SvcEnvMigrationRequestDto" : {
      "type" : "object",
      "required" : [ "infraIdentifierFormat", "orgIdentifier", "pipelineIdentifier", "projectIdentifier" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "pipelineIdentifier" : {
          "type" : "string"
        },
        "infraIdentifierFormat" : {
          "type" : "string"
        },
        "templateMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/TemplateObject"
          }
        },
        "skipServices" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "skipInfras" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "branch" : {
          "type" : "string"
        },
        "expressionMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "stageMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/RuntimeEntity"
          }
        },
        "populateServiceInputs" : {
          "type" : "boolean"
        },
        "populateInfrastructureInputs" : {
          "type" : "boolean"
        },
        "updatePipeline" : {
          "type" : "boolean"
        },
        "newBranch" : {
          "type" : "boolean"
        }
      }
    },
    "AccountSummaryResponseDto" : {
      "type" : "object",
      "properties" : {
        "pipelinesDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PipelineDetailsDto"
          }
        },
        "deploymentPipelines" : {
          "type" : "integer",
          "format" : "int32"
        },
        "v1Services" : {
          "type" : "integer",
          "format" : "int32"
        },
        "infrastructures" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "serviceDefinitions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "errorSummary" : {
          "type" : "string"
        },
        "orgs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "projects" : {
          "type" : "integer",
          "format" : "int32"
        },
        "v2Services" : {
          "type" : "integer",
          "format" : "int32"
        },
        "projectWithServiceV1" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pipelinesWithServiceV2" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pipelinesWithGitXEnabled" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pipelinesWithGitXDisabled" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PipelineDetailsDto" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "pipelineIdentifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseAccountSummaryResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AccountSummaryResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseAwsOidcTokenExchangeDetailsForDelegate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AwsOidcTokenExchangeDetailsForDelegate"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseGcpOidcTokenExchangeDetailsForDelegate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GcpOidcTokenExchangeDetailsForDelegate"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OidcWorkloadAccessTokenResponse" : {
      "type" : "object",
      "properties" : {
        "access_token" : {
          "type" : "string"
        },
        "issued_token_type" : {
          "type" : "string"
        },
        "token_type" : {
          "type" : "string"
        },
        "expires_in" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseOidcWorkloadAccessTokenResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/OidcWorkloadAccessTokenResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GcpOidcAccessTokenRequestDTO" : {
      "type" : "object",
      "required" : [ "gcpOidcTokenRequestDTO", "oidcIdToken" ],
      "properties" : {
        "oidcIdToken" : {
          "type" : "string"
        },
        "gcpOidcTokenRequestDTO" : {
          "$ref" : "#/definitions/GcpOidcTokenRequestDTO"
        }
      }
    },
    "GcpOidcTokenRequestDTO" : {
      "type" : "object",
      "required" : [ "accountId", "gcpProjectId", "providerId", "workloadPoolId" ],
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "workloadPoolId" : {
          "type" : "string"
        },
        "providerId" : {
          "type" : "string"
        },
        "gcpProjectId" : {
          "type" : "string"
        },
        "serviceAccountEmail" : {
          "type" : "string"
        },
        "oidcIdTokenCustomAttributesStructure" : {
          "$ref" : "#/definitions/OidcIdTokenCustomAttributesStructure"
        }
      }
    },
    "OidcIdTokenCustomAttributesStructure" : {
      "type" : "object",
      "properties" : {
        "account_id" : {
          "type" : "string"
        },
        "organization_id" : {
          "type" : "string"
        },
        "project_id" : {
          "type" : "string"
        },
        "pipeline_id" : {
          "type" : "string"
        },
        "environment_id" : {
          "type" : "string"
        },
        "environment_type" : {
          "type" : "string"
        },
        "connector_id" : {
          "type" : "string"
        },
        "connector_name" : {
          "type" : "string"
        },
        "service_id" : {
          "type" : "string"
        },
        "service_name" : {
          "type" : "string"
        },
        "triggered_by_name" : {
          "type" : "string"
        },
        "trigger_by_email" : {
          "type" : "string"
        },
        "stage_type" : {
          "type" : "string"
        },
        "step_type" : {
          "type" : "string"
        },
        "context" : {
          "type" : "string"
        }
      }
    },
    "GcpOidcServiceAccountAccessTokenResponse" : {
      "type" : "object",
      "properties" : {
        "accessToken" : {
          "type" : "string",
          "readOnly" : true
        },
        "expireTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        }
      }
    },
    "ResponseGcpOidcServiceAccountAccessTokenResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GcpOidcServiceAccountAccessTokenResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AwsOidcCredentialResponseDto" : {
      "type" : "object",
      "properties" : {
        "access_key" : {
          "type" : "string",
          "readOnly" : true
        },
        "secret_access_key" : {
          "type" : "string",
          "readOnly" : true
        },
        "session_token" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "ResponseAwsOidcCredentialResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AwsOidcCredentialResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AwsEqualJitterBackoffStrategySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSdkBackoffStrategySpec"
      }, {
        "type" : "object",
        "properties" : {
          "baseDelay" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxBackoffTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsFixedDelayBackoffStrategySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSdkBackoffStrategySpec"
      }, {
        "type" : "object",
        "properties" : {
          "fixedBackoff" : {
            "type" : "integer",
            "format" : "int64"
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsFullJitterBackoffStrategySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AwsSdkBackoffStrategySpec"
      }, {
        "type" : "object",
        "properties" : {
          "baseDelay" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxBackoffTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AwsOidcCredentialRequestDto" : {
      "type" : "object",
      "properties" : {
        "oidcIdToken" : {
          "type" : "string"
        },
        "iamRoleArn" : {
          "type" : "string"
        },
        "retryPolicy" : {
          "$ref" : "#/definitions/AwsSdkRetryPolicySpec"
        },
        "awsOidcTokenRequestDto" : {
          "$ref" : "#/definitions/AwsOidcTokenRequestDto"
        }
      }
    },
    "AwsOidcTokenRequestDto" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "oidcIdTokenCustomAttributesStructure" : {
          "$ref" : "#/definitions/OidcIdTokenCustomAttributesStructure"
        }
      }
    },
    "AwsSdkBackoffStrategySpec" : {
      "type" : "object"
    },
    "AwsSdkRetryPolicySpec" : {
      "type" : "object",
      "properties" : {
        "backOffStrategyType" : {
          "type" : "string"
        },
        "backOffStrategy" : {
          "$ref" : "#/definitions/AwsSdkBackoffStrategySpec"
        }
      }
    },
    "OidcConfiguration" : {
      "type" : "object",
      "properties" : {
        "issuer" : {
          "type" : "string"
        },
        "jwks_uri" : {
          "type" : "string"
        },
        "subject_types_supported" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "response_types_supported" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "claims_supported" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id_token_signing_alg_values_supported" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "scopes_supported" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "JwksPublicKeyDTO" : {
      "type" : "object",
      "properties" : {
        "alg" : {
          "type" : "string"
        },
        "e" : {
          "type" : "string"
        },
        "kid" : {
          "type" : "string"
        },
        "kty" : {
          "type" : "string"
        },
        "n" : {
          "type" : "string"
        },
        "use" : {
          "type" : "string"
        }
      }
    },
    "JwksPublicKeysDTO" : {
      "type" : "object",
      "properties" : {
        "keys" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JwksPublicKeyDTO"
          }
        }
      }
    },
    "GetProviderResponse" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "BITBUCKET_SERVER", "GITLAB_ON_PREM" ]
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "providerResponseInfo" : {
          "$ref" : "#/definitions/ProviderResponseInfo"
        }
      }
    },
    "ProviderResponseInfo" : {
      "type" : "object",
      "properties" : {
        "domain" : {
          "type" : "string"
        },
        "delegateSelectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "secretManagerRef" : {
          "type" : "string"
        }
      }
    },
    "ResponseGetProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GetProviderResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseUpdateProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UpdateProviderResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UpdateProviderResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "BitbucketServerProviderRequestInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ProviderRequestInfo"
      }, {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string"
          },
          "clientSecretRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitlabOnPremProviderRequestInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ProviderRequestInfo"
      }, {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string"
          },
          "clientSecretRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ProviderRequestInfo" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "domain" : {
          "type" : "string"
        },
        "delegateSelectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "secretManagerRef" : {
          "type" : "string"
        }
      }
    },
    "UpdateProviderRequestDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "spec" : {
          "readOnly" : true,
          "$ref" : "#/definitions/ProviderRequestInfo"
        }
      }
    },
    "DeleteProviderResponse" : {
      "type" : "object",
      "properties" : {
        "successfullyDeleted" : {
          "type" : "boolean"
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseDeleteProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeleteProviderResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CreateProviderResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseCreateProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CreateProviderResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CreateProviderRequestDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "spec" : {
          "readOnly" : true,
          "$ref" : "#/definitions/ProviderRequestInfo"
        }
      }
    },
    "ResponseListGetProviderResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GetProviderResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RefreshResponse" : {
      "type" : "object",
      "properties" : {
        "refreshedYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseRefreshResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RefreshResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NgManagerRefreshRequestDTO" : {
      "type" : "object",
      "required" : [ "yaml" ],
      "properties" : {
        "yaml" : {
          "type" : "string"
        },
        "resolvedTemplatesYaml" : {
          "type" : "string"
        }
      }
    },
    "InputsValidationResponse" : {
      "type" : "object",
      "properties" : {
        "childrenErrorNodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NodeErrorSummary"
          }
        },
        "valid" : {
          "type" : "boolean"
        }
      }
    },
    "NodeErrorSummary" : {
      "type" : "object",
      "properties" : {
        "nodeInfo" : {
          "$ref" : "#/definitions/NodeInfo"
        },
        "childrenErrorNodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NodeErrorSummary"
          }
        },
        "type" : {
          "type" : "string",
          "enum" : [ "TEMPLATE", "SERVICE", "PIPELINE", "UNKNOWN" ]
        }
      }
    },
    "ResponseInputsValidationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InputsValidationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ApiKeyDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "apiKeyType", "identifier", "name", "parentIdentifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "apiKeyType" : {
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        },
        "parentIdentifier" : {
          "type" : "string"
        },
        "defaultTimeToExpireToken" : {
          "type" : "integer",
          "format" : "int64"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "governanceMetadata" : {
          "$ref" : "#/definitions/GovernanceMetadata"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        }
      }
    },
    "ResponseApiKeyDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ApiKeyDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListApiKeyDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ApiKeyAggregateDTO" : {
      "type" : "object",
      "required" : [ "apiKey", "createdAt", "lastModifiedAt" ],
      "properties" : {
        "apiKey" : {
          "$ref" : "#/definitions/ApiKeyDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "tokensCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageApiKeyAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyAggregateDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageApiKeyAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageApiKeyAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseApiKeyAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ApiKeyAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "HostValidationDTO" : {
      "type" : "object",
      "properties" : {
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILED" ]
        },
        "error" : {
          "$ref" : "#/definitions/ErrorDetail"
        }
      }
    },
    "ResponseListHostValidationDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HostValidationDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "HostValidationParams" : {
      "type" : "object",
      "required" : [ "hosts" ],
      "properties" : {
        "hosts" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Organization" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "OrganizationAggregateDTO" : {
      "type" : "object",
      "required" : [ "organizationResponse" ],
      "properties" : {
        "organizationResponse" : {
          "$ref" : "#/definitions/OrganizationResponse"
        },
        "projectsCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "connectorsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "secretsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "delegatesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "templatesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "admins" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        },
        "collaborators" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        }
      }
    },
    "OrganizationResponse" : {
      "type" : "object",
      "required" : [ "organization" ],
      "properties" : {
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "harnessManaged" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseOrganizationAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/OrganizationAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserMetadataDTO" : {
      "type" : "object",
      "required" : [ "email", "uuid" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "twoFactorAuthenticationEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "Project" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "modules" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
          },
          "maxItems" : 1024,
          "minItems" : 0
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ProjectAggregateDTO" : {
      "type" : "object",
      "required" : [ "projectResponse" ],
      "properties" : {
        "projectResponse" : {
          "$ref" : "#/definitions/ProjectResponse"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "harnessManagedOrg" : {
          "type" : "boolean"
        },
        "admins" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        },
        "collaborators" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        }
      }
    },
    "ProjectResponse" : {
      "type" : "object",
      "required" : [ "isFavorite", "project" ],
      "properties" : {
        "project" : {
          "$ref" : "#/definitions/Project"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "isFavorite" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseProjectAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ProjectAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EmailConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "groupEmail", "sendEmailToAllUsers" ],
        "properties" : {
          "groupEmail" : {
            "type" : "string"
          },
          "sendEmailToAllUsers" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "MicrosoftTeamsConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "microsoftTeamsWebhookUrl" ],
        "properties" : {
          "microsoftTeamsWebhookUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NotificationSettingConfigDTO" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "EMAIL", "SLACK", "PAGERDUTY", "MSTEAMS", "WEBHOOK" ]
        }
      }
    },
    "PagerDutyConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "pagerDutyKey" ],
        "properties" : {
          "pagerDutyKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseUserGroupAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserGroupAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RoleAssignmentMetadataDTO" : {
      "type" : "object",
      "required" : [ "identifier", "managedRole", "managedRoleAssignment", "resourceGroupIdentifier", "resourceGroupName", "roleIdentifier", "roleName", "roleScopeLevel" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "roleIdentifier" : {
          "type" : "string"
        },
        "roleName" : {
          "type" : "string"
        },
        "roleScopeLevel" : {
          "type" : "string"
        },
        "resourceGroupIdentifier" : {
          "type" : "string"
        },
        "resourceGroupName" : {
          "type" : "string"
        },
        "managedRole" : {
          "type" : "boolean"
        },
        "managedRoleAssignment" : {
          "type" : "boolean"
        }
      }
    },
    "SlackConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "slackWebhookUrl" ],
        "properties" : {
          "slackWebhookUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UserGroupAggregateDTO" : {
      "type" : "object",
      "required" : [ "userGroupDTO" ],
      "properties" : {
        "userGroupDTO" : {
          "$ref" : "#/definitions/UserGroupDTO"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        },
        "roleAssignmentsMetadataDTO" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignmentMetadataDTO"
          }
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "UserGroupDTO" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "notificationConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationSettingConfigDTO"
          }
        },
        "linkedSsoId" : {
          "type" : "string"
        },
        "linkedSsoDisplayName" : {
          "type" : "string"
        },
        "ssoGroupId" : {
          "type" : "string"
        },
        "ssoGroupName" : {
          "type" : "string"
        },
        "linkedSsoType" : {
          "type" : "string"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "harnessManaged" : {
          "type" : "boolean"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "ssoLinked" : {
          "type" : "boolean"
        }
      }
    },
    "PageUserGroupAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserGroupAggregateDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageUserGroupAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageUserGroupAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ScopeSelector" : {
      "type" : "object",
      "required" : [ "filter" ],
      "properties" : {
        "filter" : {
          "type" : "string",
          "enum" : [ "EXCLUDING_CHILD_SCOPES", "INCLUDING_CHILD_SCOPES" ]
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "UserGroupAggregateFilter" : {
      "type" : "object",
      "properties" : {
        "scopeFilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScopeSelector"
          }
        }
      }
    },
    "PageOrganizationAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrganizationAggregateDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageOrganizationAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageOrganizationAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageProjectAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProjectAggregateDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageProjectAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageProjectAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserGroupFilterDTO" : {
      "type" : "object",
      "properties" : {
        "databaseIdFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "identifierFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "userIdentifierFilter" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "searchTerm" : {
          "type" : "string"
        },
        "filterType" : {
          "type" : "string",
          "enum" : [ "INCLUDE_INHERITED_GROUPS", "EXCLUDE_INHERITED_GROUPS", "INCLUDE_CHILD_SCOPE_GROUPS" ]
        }
      }
    },
    "AccountResourcesDTO" : {
      "type" : "object",
      "properties" : {
        "connectorsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "secretsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "delegatesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "templatesCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseAccountResourcesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AccountResourcesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageHostDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HostDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageHostDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageHostDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "HostFilterDTO" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "All", "HostNames", "HostAttributes" ]
        },
        "filter" : {
          "type" : "string"
        }
      }
    },
    "AzureKeyVaultMetadataSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretManagerMetadataSpecDTO"
      }, {
        "type" : "object",
        "properties" : {
          "vaultNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ResponseSecretManagerMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SecretManagerMetadataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SecretManagerMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "encryptionType" : {
          "type" : "string",
          "enum" : [ "LOCAL", "KMS", "GCP_KMS", "AWS_SECRETS_MANAGER", "AZURE_VAULT", "VAULT", "GCP_SECRETS_MANAGER", "CUSTOM", "VAULT_SSH", "CUSTOM_NG" ]
        },
        "spec" : {
          "$ref" : "#/definitions/SecretManagerMetadataSpecDTO"
        }
      }
    },
    "SecretManagerMetadataSpecDTO" : {
      "type" : "object",
      "discriminator" : "encryptionType"
    },
    "VaultMetadataSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretManagerMetadataSpecDTO"
      }, {
        "type" : "object",
        "properties" : {
          "secretEngines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/VaultSecretEngineDTO"
            }
          }
        }
      } ]
    },
    "VaultSecretEngineDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AzureKeyVaultMetadataRequestSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretManagerMetadataRequestSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "subscription" ],
        "properties" : {
          "clientId" : {
            "type" : "string"
          },
          "tenantId" : {
            "type" : "string"
          },
          "secretKey" : {
            "type" : "string"
          },
          "subscription" : {
            "type" : "string"
          },
          "azureEnvironmentType" : {
            "type" : "string",
            "enum" : [ "AZURE", "AZURE_US_GOVERNMENT" ]
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "useManagedIdentity" : {
            "type" : "boolean"
          },
          "azureManagedIdentityType" : {
            "type" : "string",
            "enum" : [ "SystemAssignedManagedIdentity", "UserAssignedManagedIdentity" ]
          },
          "managedClientId" : {
            "type" : "string"
          },
          "enablePurge" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "SecretManagerMetadataRequestDTO" : {
      "type" : "object",
      "required" : [ "encryptionType", "identifier", "spec" ],
      "properties" : {
        "encryptionType" : {
          "type" : "string",
          "enum" : [ "LOCAL", "KMS", "GCP_KMS", "AWS_SECRETS_MANAGER", "AZURE_VAULT", "VAULT", "GCP_SECRETS_MANAGER", "CUSTOM", "VAULT_SSH", "CUSTOM_NG" ]
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/SecretManagerMetadataRequestSpecDTO"
        }
      }
    },
    "SecretManagerMetadataRequestSpecDTO" : {
      "type" : "object",
      "discriminator" : "encryptionType"
    },
    "SecretRefData" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "decryptedValue" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "null" : {
          "type" : "boolean"
        }
      }
    },
    "VaultAgentCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VaultCredentialDTO"
      }, {
        "type" : "object",
        "properties" : {
          "sinkPath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "VaultAppRoleCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VaultCredentialDTO"
      }, {
        "type" : "object",
        "properties" : {
          "appRoleId" : {
            "type" : "string"
          },
          "appRolePath" : {
            "type" : "string"
          },
          "secretId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "VaultAuthTokenCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VaultCredentialDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authToken" : {
            "type" : "string"
          }
        }
      } ]
    },
    "VaultAwsIamRoleCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VaultCredentialDTO"
      }, {
        "type" : "object",
        "properties" : {
          "awsRegion" : {
            "type" : "string"
          },
          "vaultAwsIamRole" : {
            "type" : "string"
          },
          "xvaultAwsIamServerId" : {
            "$ref" : "#/definitions/SecretRefData"
          }
        }
      } ]
    },
    "VaultCredentialDTO" : {
      "type" : "object",
      "discriminator" : "accessType"
    },
    "VaultK8sCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VaultCredentialDTO"
      }, {
        "type" : "object",
        "properties" : {
          "vaultK8sAuthRole" : {
            "type" : "string"
          },
          "serviceAccountTokenPath" : {
            "type" : "string"
          },
          "k8sAuthEndpoint" : {
            "type" : "string"
          }
        }
      } ]
    },
    "VaultMetadataRequestSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretManagerMetadataRequestSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "accessType", "url" ],
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "accessType" : {
            "type" : "string",
            "enum" : [ "APP_ROLE", "TOKEN", "VAULT_AGENT", "AWS_IAM", "K8s_AUTH" ]
          },
          "spec" : {
            "$ref" : "#/definitions/VaultCredentialDTO"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "namespace" : {
            "type" : "string"
          },
          "ngCertificateRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BaseSSHSpecDTO" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "BaseWinRmSpecDTO" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "KerberosConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseSSHSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "principal", "realm" ],
        "properties" : {
          "principal" : {
            "type" : "string"
          },
          "realm" : {
            "type" : "string"
          },
          "tgtGenerationMethod" : {
            "type" : "string",
            "enum" : [ "KeyTabFilePath", "Password" ]
          },
          "spec" : {
            "$ref" : "#/definitions/TGTGenerationSpecDTO"
          }
        }
      } ]
    },
    "KerberosWinRmConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseWinRmSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "principal", "realm" ],
        "properties" : {
          "principal" : {
            "type" : "string"
          },
          "realm" : {
            "type" : "string"
          },
          "tgtGenerationMethod" : {
            "type" : "string",
            "enum" : [ "KeyTabFilePath", "Password" ]
          },
          "spec" : {
            "$ref" : "#/definitions/TGTGenerationSpecDTO"
          },
          "useSSL" : {
            "type" : "boolean"
          },
          "skipCertChecks" : {
            "type" : "boolean"
          },
          "useNoProfile" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "NTLMConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseWinRmSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "domain", "password", "username" ],
        "properties" : {
          "domain" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "useSSL" : {
            "type" : "boolean"
          },
          "skipCertChecks" : {
            "type" : "boolean"
          },
          "useNoProfile" : {
            "type" : "boolean"
          },
          "password" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseSecretResponseWrapper" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SecretResponseWrapper"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SSHAuthDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "spec" : {
          "$ref" : "#/definitions/BaseSSHSpecDTO"
        },
        "useSshClient" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "useSshj" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "enum" : [ "SSH", "Kerberos" ]
        }
      }
    },
    "SSHConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseSSHSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "credentialType", "spec" ],
        "properties" : {
          "credentialType" : {
            "type" : "string",
            "enum" : [ "Password", "KeyPath", "KeyReference" ]
          },
          "spec" : {
            "$ref" : "#/definitions/SSHCredentialSpecDTO"
          }
        }
      } ]
    },
    "SSHCredentialSpecDTO" : {
      "type" : "object",
      "discriminator" : "credentialType"
    },
    "SSHKeyPathCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SSHCredentialSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "keyPath", "userName" ],
        "properties" : {
          "userName" : {
            "type" : "string"
          },
          "keyPath" : {
            "type" : "string"
          },
          "encryptedPassphrase" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SSHKeyReferenceCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SSHCredentialSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "key", "userName" ],
        "properties" : {
          "userName" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string"
          },
          "encryptedPassphrase" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SSHKeySpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "auth" ],
        "properties" : {
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auth" : {
            "$ref" : "#/definitions/SSHAuthDTO"
          }
        }
      } ]
    },
    "SSHPasswordCredentialDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SSHCredentialSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "password", "userName" ],
        "properties" : {
          "userName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SecretDTOV2" : {
      "type" : "object",
      "required" : [ "identifier", "name", "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "SecretFile", "SecretText", "SSHKey", "WinRmCredentials" ]
        },
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/SecretSpecDTO"
        }
      }
    },
    "SecretFileSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "secretManagerIdentifier" ],
        "properties" : {
          "secretManagerIdentifier" : {
            "type" : "string"
          },
          "additionalMetadata" : {
            "$ref" : "#/definitions/AdditionalMetadata"
          }
        }
      } ]
    },
    "SecretResponseWrapper" : {
      "type" : "object",
      "required" : [ "secret" ],
      "properties" : {
        "secret" : {
          "$ref" : "#/definitions/SecretDTOV2"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "draft" : {
          "type" : "boolean"
        },
        "governanceMetadata" : {
          "$ref" : "#/definitions/GovernanceMetadata"
        }
      }
    },
    "SecretSpecDTO" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "errorMessageForInvalidYaml" : {
          "type" : "string"
        }
      }
    },
    "SecretTextSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "secretManagerIdentifier", "valueType" ],
        "properties" : {
          "secretManagerIdentifier" : {
            "type" : "string"
          },
          "valueType" : {
            "type" : "string",
            "enum" : [ "Inline", "Reference", "CustomSecretManagerValues" ]
          },
          "value" : {
            "type" : "string"
          },
          "additionalMetadata" : {
            "$ref" : "#/definitions/AdditionalMetadata"
          }
        }
      } ]
    },
    "TGTGenerationSpecDTO" : {
      "type" : "object",
      "discriminator" : "tgtGenerationMethod"
    },
    "TGTKeyTabFilePathSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TGTGenerationSpecDTO"
      }, {
        "type" : "object",
        "properties" : {
          "keyPath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TGTPasswordSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TGTGenerationSpecDTO"
      }, {
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string"
          }
        }
      } ]
    },
    "WinRmAuthDTO" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "spec" : {
          "$ref" : "#/definitions/BaseWinRmSpecDTO"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "NTLM", "Kerberos" ]
        }
      }
    },
    "WinRmCommandParameter" : {
      "type" : "object",
      "properties" : {
        "parameter" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "WinRmCredentialsSpecDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretSpecDTO"
      }, {
        "type" : "object",
        "required" : [ "auth" ],
        "properties" : {
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auth" : {
            "$ref" : "#/definitions/WinRmAuthDTO"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/WinRmCommandParameter"
            }
          }
        }
      } ]
    },
    "PageSecretResponseWrapper" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SecretResponseWrapper"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageSecretResponseWrapper" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageSecretResponseWrapper"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SecretRequestWrapper" : {
      "type" : "object",
      "required" : [ "secret" ],
      "properties" : {
        "secret" : {
          "$ref" : "#/definitions/SecretDTOV2"
        }
      }
    },
    "SecretResourceFilterDTO" : {
      "type" : "object",
      "properties" : {
        "identifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "searchTerm" : {
          "type" : "string"
        },
        "secretTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SecretFile", "SecretText", "SSHKey", "WinRmCredentials" ]
          }
        },
        "sourceCategory" : {
          "type" : "string",
          "enum" : [ "CLOUD_PROVIDER", "SECRET_MANAGER", "CLOUD_COST", "ARTIFACTORY", "CODE_REPO", "MONITORING", "TICKETING", "DATABASE" ]
        },
        "includeSecretsFromEverySubScope" : {
          "type" : "boolean"
        },
        "includeAllSecretsAccessibleAtScope" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseSecretValidationResultDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SecretValidationResultDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SecretValidationResultDTO" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "SSHKeyValidationMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretValidationMetaData"
      }, {
        "type" : "object",
        "required" : [ "host" ],
        "properties" : {
          "host" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "SecretValidationMetaData" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "SecretFile", "SecretText", "SSHKey", "WinRmCredentials" ]
        }
      }
    },
    "WinRmCredentialsValidationMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SecretValidationMetaData"
      }, {
        "type" : "object",
        "required" : [ "host" ],
        "properties" : {
          "host" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseOrganizationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/OrganizationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OrganizationRequest" : {
      "type" : "object",
      "required" : [ "organization" ],
      "properties" : {
        "organization" : {
          "$ref" : "#/definitions/Organization"
        }
      }
    },
    "PageOrganizationResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrganizationResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageOrganizationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageOrganizationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseProjectResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ProjectResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ProjectRequest" : {
      "type" : "object",
      "required" : [ "project" ],
      "properties" : {
        "project" : {
          "$ref" : "#/definitions/Project"
        }
      }
    },
    "PageProjectResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProjectResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageProjectResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageProjectResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "MoveProjectRequest" : {
      "type" : "object",
      "properties" : {
        "destinationOrgIdentifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseTokenDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TokenDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TokenDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "apiKeyIdentifier", "apiKeyType", "identifier", "name", "parentIdentifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "validFrom" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validTo" : {
          "type" : "integer",
          "format" : "int64"
        },
        "scheduledExpireTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "valid" : {
          "type" : "boolean"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "apiKeyIdentifier" : {
          "type" : "string"
        },
        "parentIdentifier" : {
          "type" : "string"
        },
        "apiKeyType" : {
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "email" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "encodedPassword" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "parentEntityUniqueId" : {
          "type" : "string"
        },
        "sshKeyContent" : {
          "type" : "string"
        },
        "sshKeyUsage" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "AUTH", "SIGN" ]
          }
        },
        "sshKeyFingerprint" : {
          "type" : "string"
        }
      }
    },
    "PageTokenAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TokenAggregateDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageTokenAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageTokenAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TokenAggregateDTO" : {
      "type" : "object",
      "required" : [ "createdAt", "expiryAt", "lastModifiedAt", "token" ],
      "properties" : {
        "token" : {
          "$ref" : "#/definitions/TokenDTO"
        },
        "expiryAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseTokenDTOInternal" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TokenDTOInternal"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TokenDTOInternal" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "apiKeyIdentifier", "apiKeyType", "identifier", "name", "parentIdentifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "validFrom" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validTo" : {
          "type" : "integer",
          "format" : "int64"
        },
        "scheduledExpireTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "valid" : {
          "type" : "boolean"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "apiKeyIdentifier" : {
          "type" : "string"
        },
        "parentIdentifier" : {
          "type" : "string"
        },
        "apiKeyType" : {
          "type" : "string",
          "enum" : [ "USER", "SERVICE_ACCOUNT", "SSH_KEY" ]
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "email" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "encodedPassword" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "parentEntityUniqueId" : {
          "type" : "string"
        },
        "sshKeyContent" : {
          "type" : "string"
        },
        "sshKeyUsage" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "AUTH", "SIGN" ]
          }
        },
        "sshKeyFingerprint" : {
          "type" : "string"
        },
        "parentEntityUniqueIdInternal" : {
          "type" : "string"
        }
      }
    },
    "GatewayAccountRequestDTO" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "defaultExperience" : {
          "type" : "string",
          "enum" : [ "NG", "CG" ]
        },
        "createdFromNG" : {
          "type" : "boolean"
        },
        "nextGenEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseUserInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserInfo" : {
      "type" : "object",
      "required" : [ "uuid" ],
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "defaultAccountId" : {
          "type" : "string"
        },
        "intent" : {
          "type" : "string"
        },
        "accounts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GatewayAccountRequestDTO"
          }
        },
        "admin" : {
          "type" : "boolean"
        },
        "twoFactorAuthenticationEnabled" : {
          "type" : "boolean"
        },
        "emailVerified" : {
          "type" : "boolean"
        },
        "locked" : {
          "type" : "boolean"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "signupAction" : {
          "type" : "string"
        },
        "edition" : {
          "type" : "string"
        },
        "billingFrequency" : {
          "type" : "string"
        },
        "utmInfo" : {
          "$ref" : "#/definitions/UtmInfo"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "givenName" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "userPreferences" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "isEnrichedInfoCollected" : {
          "type" : "boolean"
        },
        "lastLogin" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "SSHValidateDTO" : {
      "type" : "object",
      "properties" : {
        "sshKey" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "verified" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseUserGroupDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserGroupDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AccessControlCheckError" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "code" : {
          "type" : "string",
          "enum" : [ "DEFAULT_ERROR_CODE", "INVALID_ARGUMENT", "INVALID_EMAIL", "DOMAIN_NOT_ALLOWED_TO_REGISTER", "COMMNITY_EDITION_NOT_FOUND", "DEPLOY_MODE_IS_NOT_ON_PREM", "USER_ALREADY_REGISTERED", "USER_INVITATION_DOES_NOT_EXIST", "USER_DOES_NOT_EXIST", "USER_INVITE_OPERATION_FAILED", "USER_DISABLED", "ACCOUNT_DOES_NOT_EXIST", "INACTIVE_ACCOUNT", "ACCOUNT_MIGRATED", "ACCOUNT_MIGRATED_TO_NEXT_GEN", "USER_DOMAIN_NOT_ALLOWED", "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED", "RESOURCE_NOT_FOUND", "INVALID_FORMAT", "ROLE_DOES_NOT_EXIST", "EMAIL_NOT_VERIFIED", "EMAIL_VERIFICATION_TOKEN_NOT_FOUND", "INVALID_TOKEN", "REVOKED_TOKEN", "INVALID_CAPTCHA_TOKEN", "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS", "EXPIRED_TOKEN", "INVALID_AGENT_MTLS_AUTHORITY", "TOKEN_ALREADY_REFRESHED_ONCE", "ACCESS_DENIED", "NG_ACCESS_DENIED", "INVALID_CREDENTIAL", "INVALID_CREDENTIALS_THIRD_PARTY", "INVALID_KEY", "INVALID_CONNECTOR_TYPE", "INVALID_KEYPATH", "INVALID_VARIABLE", "UNKNOWN_HOST", "UNREACHABLE_HOST", "INVALID_PORT", "SSH_SESSION_TIMEOUT", "ALGORITHM_NEGOTIATION_ERROR", "SOCKET_CONNECTION_ERROR", "CONNECTION_ERROR", "SOCKET_CONNECTION_TIMEOUT", "WINRM_COMMAND_EXECUTION_TIMEOUT", "CONNECTION_TIMEOUT", "SSH_CONNECTION_ERROR", "USER_GROUP_ERROR", "INVALID_EXECUTION_ID", "ERROR_IN_GETTING_CHANNEL_STREAMS", "UNEXPECTED", "UNKNOWN_ERROR", "UNKNOWN_EXECUTOR_TYPE_ERROR", "DUPLICATE_STATE_NAMES", "TRANSITION_NOT_LINKED", "TRANSITION_TO_INCORRECT_STATE", "TRANSITION_TYPE_NULL", "STATES_WITH_DUP_TRANSITIONS", "BARRIERS_NOT_RUNNING_CONCURRENTLY", "NON_FORK_STATES", "NON_REPEAT_STATES", "INITIAL_STATE_NOT_DEFINED", "FILE_INTEGRITY_CHECK_FAILED", "INVALID_URL", "FILE_DOWNLOAD_FAILED", "PLATFORM_SOFTWARE_DELETE_ERROR", "INVALID_CSV_FILE", "INVALID_REQUEST", "SCHEMA_VALIDATION_FAILED", "FILTER_CREATION_ERROR", "INVALID_YAML_ERROR", "PLAN_CREATION_ERROR", "INVALID_INFRA_STATE", "PIPELINE_ALREADY_TRIGGERED", "NON_EXISTING_PIPELINE", "DUPLICATE_COMMAND_NAMES", "INVALID_PIPELINE", "COMMAND_DOES_NOT_EXIST", "DUPLICATE_ARTIFACTSTREAM_NAMES", "DUPLICATE_HOST_NAMES", "STATE_NOT_FOR_TYPE", "STATE_MACHINE_ISSUE", "STATE_DISCONTINUE_FAILED", "STATE_PAUSE_FAILED", "PAUSE_ALL_ALREADY", "RESUME_ALL_ALREADY", "ROLLBACK_ALREADY", "ABORT_ALL_ALREADY", "EXPIRE_ALL_ALREADY", "RETRY_FAILED", "UNKNOWN_ARTIFACT_TYPE", "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE", "INIT_TIMEOUT", "LICENSE_EXPIRED", "NOT_LICENSED", "REQUEST_TIMEOUT", "SCM_REQUEST_TIMEOUT", "WORKFLOW_ALREADY_TRIGGERED", "JENKINS_ERROR", "INVALID_ARTIFACT_SOURCE", "INVALID_ARTIFACT_SERVER", "INVALID_CLOUD_PROVIDER", "UPDATE_NOT_ALLOWED", "DELETE_NOT_ALLOWED", "APPDYNAMICS_CONFIGURATION_ERROR", "APM_CONFIGURATION_ERROR", "SPLUNK_CONFIGURATION_ERROR", "ELK_CONFIGURATION_ERROR", "LOGZ_CONFIGURATION_ERROR", "SUMO_CONFIGURATION_ERROR", "INSTANA_CONFIGURATION_ERROR", "APPDYNAMICS_ERROR", "STACKDRIVER_ERROR", "STACKDRIVER_CONFIGURATION_ERROR", "NEWRELIC_CONFIGURATION_ERROR", "NEWRELIC_ERROR", "DYNA_TRACE_CONFIGURATION_ERROR", "DYNA_TRACE_ERROR", "CLOUDWATCH_ERROR", "CLOUDWATCH_CONFIGURATION_ERROR", "PROMETHEUS_CONFIGURATION_ERROR", "DATA_DOG_CONFIGURATION_ERROR", "SERVICE_GUARD_CONFIGURATION_ERROR", "ENCRYPTION_NOT_CONFIGURED", "UNAVAILABLE_DELEGATES", "WORKFLOW_EXECUTION_IN_PROGRESS", "PIPELINE_EXECUTION_IN_PROGRESS", "AWS_ACCESS_DENIED", "AWS_CLUSTER_NOT_FOUND", "AWS_SERVICE_NOT_FOUND", "IMAGE_NOT_FOUND", "ILLEGAL_ARGUMENT", "IMAGE_TAG_NOT_FOUND", "DELEGATE_NOT_AVAILABLE", "INVALID_YAML_PAYLOAD", "AUTHENTICATION_ERROR", "AUTHORIZATION_ERROR", "UNRECOGNIZED_YAML_FIELDS", "COULD_NOT_MAP_BEFORE_YAML", "MISSING_BEFORE_YAML", "MISSING_YAML", "NON_EMPTY_DELETIONS", "GENERAL_YAML_ERROR", "GENERAL_YAML_INFO", "YAML_GIT_SYNC_ERROR", "GIT_CONNECTION_ERROR", "GIT_ERROR", "ARTIFACT_SERVER_ERROR", "ENCRYPT_DECRYPT_ERROR", "SECRET_MANAGEMENT_ERROR", "SECRET_NOT_FOUND", "KMS_OPERATION_ERROR", "GCP_KMS_OPERATION_ERROR", "VAULT_OPERATION_ERROR", "AWS_SECRETS_MANAGER_OPERATION_ERROR", "AZURE_KEY_VAULT_OPERATION_ERROR", "AZURE_KEY_VAULT_INTERRUPT_ERROR", "UNSUPPORTED_OPERATION_EXCEPTION", "FEATURE_UNAVAILABLE", "GENERAL_ERROR", "BASELINE_CONFIGURATION_ERROR", "SAML_IDP_CONFIGURATION_NOT_AVAILABLE", "INVALID_AUTHENTICATION_MECHANISM", "INVALID_SAML_CONFIGURATION", "INVALID_OAUTH_CONFIGURATION", "INVALID_LDAP_CONFIGURATION", "USER_GROUP_SYNC_FAILURE", "USER_GROUP_ALREADY_EXIST", "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION", "EXPLANATION", "HINT", "NOT_WHITELISTED_IP", "INVALID_TOTP_TOKEN", "EMAIL_FAILED", "SSL_HANDSHAKE_FAILED", "NO_APPS_ASSIGNED", "INVALID_INFRA_CONFIGURATION", "TEMPLATES_LINKED", "USER_HAS_NO_PERMISSIONS", "USER_NOT_AUTHORIZED", "USER_ALREADY_PRESENT", "EMAIL_ERROR", "INVALID_USAGE_RESTRICTION", "USAGE_RESTRICTION_ERROR", "STATE_EXECUTION_INSTANCE_NOT_FOUND", "DELEGATE_TASK_RETRY", "KUBERNETES_API_TASK_EXCEPTION", "KUBERNETES_TASK_EXCEPTION", "KUBERNETES_YAML_ERROR", "SAVE_FILE_INTO_GCP_STORAGE_FAILED", "READ_FILE_FROM_GCP_STORAGE_FAILED", "FILE_NOT_FOUND_ERROR", "USAGE_LIMITS_EXCEEDED", "EVENT_PUBLISH_FAILED", "CUSTOM_APPROVAL_ERROR", "JIRA_ERROR", "EXPRESSION_EVALUATION_FAILED", "KUBERNETES_VALUES_ERROR", "KUBERNETES_CLUSTER_ERROR", "INCORRECT_SIGN_IN_MECHANISM", "OAUTH_LOGIN_FAILED", "INVALID_TERRAFORM_TARGETS_REQUEST", "TERRAFORM_EXECUTION_ERROR", "FILE_READ_FAILED", "FILE_SIZE_EXCEEDS_LIMIT", "CLUSTER_NOT_FOUND", "MARKETPLACE_TOKEN_NOT_FOUND", "INVALID_MARKETPLACE_TOKEN", "INVALID_TICKETING_SERVER", "SERVICENOW_ERROR", "PASSWORD_EXPIRED", "USER_LOCKED", "PASSWORD_STRENGTH_CHECK_FAILED", "ACCOUNT_DISABLED", "INVALID_ACCOUNT_PERMISSION", "PAGERDUTY_ERROR", "HEALTH_ERROR", "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED", "DOMAIN_WHITELIST_FILTER_CHECK_FAILED", "INVALID_DASHBOARD_UPDATE_REQUEST", "DUPLICATE_FIELD", "INVALID_AZURE_VAULT_CONFIGURATION", "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS", "INVALID_ROLLBACK", "DATA_COLLECTION_ERROR", "SUMO_DATA_COLLECTION_ERROR", "DEPLOYMENT_GOVERNANCE_ERROR", "BATCH_PROCESSING_ERROR", "GRAPHQL_ERROR", "FILE_CREATE_ERROR", "ILLEGAL_STATE", "GIT_DIFF_COMMIT_NOT_IN_ORDER", "FAILED_TO_ACQUIRE_PERSISTENT_LOCK", "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK", "POD_NOT_FOUND_ERROR", "COMMAND_EXECUTION_ERROR", "REGISTRY_EXCEPTION", "ENGINE_INTERRUPT_PROCESSING_EXCEPTION", "ENGINE_IO_EXCEPTION", "ENGINE_OUTCOME_EXCEPTION", "ENGINE_SWEEPING_OUTPUT_EXCEPTION", "CACHE_NOT_FOUND_EXCEPTION", "ENGINE_ENTITY_UPDATE_EXCEPTION", "SHELL_EXECUTION_EXCEPTION", "TEMPLATE_NOT_FOUND", "AZURE_SERVICE_EXCEPTION", "AZURE_CLIENT_EXCEPTION", "GIT_UNSEEN_REMOTE_HEAD_COMMIT", "TIMEOUT_ENGINE_EXCEPTION", "NO_AVAILABLE_DELEGATES", "NO_GLOBAL_DELEGATE_ACCOUNT", "NO_INSTALLED_DELEGATES", "DUPLICATE_DELEGATE_EXCEPTION", "GCP_MARKETPLACE_EXCEPTION", "MISSING_DEFAULT_GOOGLE_CREDENTIALS", "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS", "OPTIMISTIC_LOCKING_EXCEPTION", "NG_PIPELINE_EXECUTION_EXCEPTION", "NG_PIPELINE_CREATE_EXCEPTION", "RESOURCE_NOT_FOUND_EXCEPTION", "PMS_INITIALIZE_SDK_EXCEPTION", "UNEXPECTED_SNIPPET_EXCEPTION", "UNEXPECTED_SCHEMA_EXCEPTION", "CONNECTOR_VALIDATION_EXCEPTION", "TIMESCALE_NOT_AVAILABLE", "MIGRATION_EXCEPTION", "REQUEST_PROCESSING_INTERRUPTED", "SECRET_MANAGER_ID_NOT_FOUND", "GCP_SECRET_MANAGER_OPERATION_ERROR", "GCP_SECRET_OPERATION_ERROR", "GIT_OPERATION_ERROR", "TASK_FAILURE_ERROR", "INSTANCE_STATS_PROCESS_ERROR", "INSTANCE_STATS_MIGRATION_ERROR", "DEPLOYMENT_MIGRATION_ERROR", "CG_LICENSE_USAGE_ERROR", "INSTANCE_STATS_AGGREGATION_ERROR", "UNRESOLVED_EXPRESSIONS_ERROR", "KRYO_HANDLER_NOT_FOUND_ERROR", "DELEGATE_ERROR_HANDLER_EXCEPTION", "DELEGATE_SERVICE_DRIVER_EXCEPTION", "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION", "UNEXPECTED_TYPE_ERROR", "EXCEPTION_HANDLER_NOT_FOUND", "CONNECTOR_NOT_FOUND_EXCEPTION", "GCP_SERVER_ERROR", "HTTP_RESPONSE_EXCEPTION", "SCM_NOT_FOUND_ERROR", "SCM_CONFLICT_ERROR", "SCM_CONFLICT_ERROR_V2", "SCM_UNPROCESSABLE_ENTITY", "PROCESS_EXECUTION_EXCEPTION", "SCM_UNAUTHORIZED", "SCM_BAD_REQUEST", "SCM_INTERNAL_SERVER_ERROR", "DATA", "CONTEXT", "PR_CREATION_ERROR", "URL_NOT_REACHABLE", "URL_NOT_PROVIDED", "ENGINE_EXPRESSION_EVALUATION_ERROR", "ENGINE_FUNCTOR_ERROR", "JIRA_CLIENT_ERROR", "SCM_NOT_MODIFIED", "APPROVAL_STEP_NG_ERROR", "BUCKET_SERVER_ERROR", "GIT_SYNC_ERROR", "TEMPLATE_EXCEPTION", "TEMPLATE_ALREADY_EXISTS_EXCEPTION", "ENTITY_REFERENCE_EXCEPTION", "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION", "INVALID_INPUT_SET", "INVALID_OVERLAY_INPUT_SET", "RESOURCE_ALREADY_EXISTS", "INVALID_JSON_PAYLOAD", "POLICY_EVALUATION_FAILURE", "POLICY_SET_ERROR", "INVALID_ARTIFACTORY_REGISTRY_REQUEST", "INVALID_NEXUS_REGISTRY_REQUEST", "ENTITY_NOT_FOUND", "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST", "AZURE_AUTHENTICATION_ERROR", "AZURE_CONFIG_ERROR", "DATA_PROCESSING_ERROR", "INVALID_AZURE_AKS_REQUEST", "AWS_IAM_ERROR", "AWS_CF_ERROR", "AWS_INSTANCE_ERROR", "AWS_VPC_ERROR", "AWS_TAG_ERROR", "AWS_ASG_ERROR", "AWS_LOAD_BALANCER_ERROR", "SCM_INTERNAL_SERVER_ERROR_V2", "SCM_FAILED_DEPENDENCY_ERROR", "SCM_UNAUTHORIZED_ERROR_V2", "TOO_MANY_REQUESTS", "INVALID_IDENTIFIER_REF", "SPOTINST_NULL_ERROR", "SPOTNIST_REST_EXCEPTION", "SCM_UNEXPECTED_ERROR", "DUPLICATE_FILE_IMPORT", "AZURE_APP_SERVICES_TASK_EXCEPTION", "AZURE_ARM_TASK_EXCEPTION", "AZURE_BP_TASK_EXCEPTION", "MEDIA_NOT_SUPPORTED", "AWS_ECS_ERROR", "AWS_APPLICATION_AUTO_SCALING", "AWS_ECS_SERVICE_NOT_ACTIVE", "AWS_ECS_CLIENT_ERROR", "AWS_STS_ERROR", "FREEZE_EXCEPTION", "MISSING_EXCEPTION", "DELEGATE_TASK_EXPIRED", "DELEGATE_TASK_VALIDATION_FAILED", "MONGO_EXECUTION_TIMEOUT_EXCEPTION", "DELEGATE_NOT_REGISTERED", "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE", "APPROVAL_REJECTION", "TERRAGRUNT_EXECUTION_ERROR", "ADFS_ERROR", "TERRAFORM_CLOUD_ERROR", "CLUSTER_CREDENTIALS_NOT_FOUND", "SCM_API_ERROR", "INTERNAL_SERVER_ERROR", "SCM_FORBIDDEN", "AWS_EKS_ERROR", "OPA_POLICY_EVALUATION_ERROR", "USER_MARKED_FAILURE", "SSH_RETRY", "HTTP_CLIENT_ERROR_RESPONSE", "HTTP_INTERNAL_SERVER_ERROR", "HTTP_BAD_GATEWAY", "HTTP_SERVICE_UNAVAILABLE", "HTTP_GATEWAY_TIMEOUT", "HTTP_SERVER_ERROR_RESPONSE", "PIPELINE_UPDATE_EXCEPTION", "SERVICENOW_REFRESH_TOKEN_ERROR", "PARAMETER_FIELD_CAST_ERROR", "ABORT_ALL_ALREADY_NG", "WEBHOOK_EXCEPTION", "INVALID_OIDC_CONFIGURATION", "INVALID_CREDENTIALS", "INVALID_OR_PRIVATE_REPO", "BARRIER_FAILED_ERROR", "ELASTICSEARCH_NOT_AVAILABLE", "OBJECT_STORE_NOT_AVAILABLE", "NO_ELIGIBLE_RUNNERS", "NO_AVAILABLE_RUNNERS" ]
        },
        "message" : {
          "type" : "string"
        },
        "correlationId" : {
          "type" : "string"
        },
        "detailedMessage" : {
          "type" : "string"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        },
        "metadata" : {
          "$ref" : "#/definitions/ErrorMetadataDTO"
        },
        "failedPermissionChecks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PermissionCheck"
          }
        }
      }
    },
    "PermissionCheck" : {
      "type" : "object",
      "properties" : {
        "resourceScope" : {
          "$ref" : "#/definitions/ResourceScope"
        },
        "resourceType" : {
          "type" : "string"
        },
        "resourceAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "resourceIdentifier" : {
          "type" : "string"
        },
        "permission" : {
          "type" : "string"
        }
      }
    },
    "ResourceScope" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "PageUserGroupDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserGroupDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageUserGroupDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageUserGroupDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListUserGroupDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserGroupDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EmailConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfig"
      }, {
        "type" : "object",
        "properties" : {
          "groupEmail" : {
            "type" : "string"
          },
          "sendEmailToAllUsers" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "MicrosoftTeamsConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfig"
      }, {
        "type" : "object",
        "properties" : {
          "microsoftTeamsWebhookUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NotificationSettingConfig" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "EMAIL", "SLACK", "PAGERDUTY", "MSTEAMS", "WEBHOOK" ]
        }
      }
    },
    "PagerDutyConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfig"
      }, {
        "type" : "object",
        "properties" : {
          "pagerDutyKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RestResponseUserGroup" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/UserGroup"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SlackConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfig"
      }, {
        "type" : "object",
        "properties" : {
          "slackWebhookUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "WebhookConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationSettingConfig"
      }, {
        "type" : "object",
        "properties" : {
          "webhookUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PageUserMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserMetadataDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageUserMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageUserMetadataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserFilter" : {
      "type" : "object",
      "properties" : {
        "searchTerm" : {
          "type" : "string"
        },
        "identifiers" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "emails" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "parentFilter" : {
          "type" : "string",
          "enum" : [ "NO_PARENT_SCOPES", "INCLUDE_PARENT_SCOPES", "STRICTLY_PARENT_SCOPES" ]
        }
      }
    },
    "ResponseListScopeName" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScopeName"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ScopeName" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgName" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectName" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "SamlLinkGroupRequest" : {
      "type" : "object",
      "properties" : {
        "samlGroupName" : {
          "type" : "string"
        }
      }
    },
    "LdapLinkGroupRequest" : {
      "type" : "object",
      "properties" : {
        "ldapGroupDN" : {
          "type" : "string"
        },
        "ldapGroupName" : {
          "type" : "string"
        }
      }
    },
    "ResponseUserGroupResponseV2DTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserGroupResponseV2DTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserGroupResponseV2DTO" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserInfo"
          }
        },
        "notificationConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationSettingConfigDTO"
          }
        },
        "linkedSsoId" : {
          "type" : "string"
        },
        "linkedSsoDisplayName" : {
          "type" : "string"
        },
        "ssoGroupId" : {
          "type" : "string"
        },
        "ssoGroupName" : {
          "type" : "string"
        },
        "linkedSsoType" : {
          "type" : "string"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "harnessManaged" : {
          "type" : "boolean"
        },
        "ssoLinked" : {
          "type" : "boolean"
        }
      }
    },
    "UserGroupRequestV2DTO" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 5000,
          "minItems" : 0
        },
        "notificationConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationSettingConfigDTO"
          }
        },
        "linkedSsoId" : {
          "type" : "string"
        },
        "linkedSsoDisplayName" : {
          "type" : "string"
        },
        "ssoGroupId" : {
          "type" : "string"
        },
        "ssoGroupName" : {
          "type" : "string"
        },
        "linkedSsoType" : {
          "type" : "string"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "harnessManaged" : {
          "type" : "boolean"
        },
        "ssoLinked" : {
          "type" : "boolean"
        }
      }
    },
    "AzureImageGalleriesDTO" : {
      "type" : "object",
      "properties" : {
        "azureImageGalleries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureImageGallery"
          }
        }
      }
    },
    "AzureImageGallery" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "subscriptionId" : {
          "type" : "string"
        },
        "resourceGroupName" : {
          "type" : "string"
        },
        "regionName" : {
          "type" : "string"
        }
      }
    },
    "ResponseAzureImageGalleriesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureImageGalleriesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureResourceGroupDTO" : {
      "type" : "object",
      "required" : [ "resourceGroup" ],
      "properties" : {
        "resourceGroup" : {
          "type" : "string"
        }
      }
    },
    "AzureResourceGroupsDTO" : {
      "type" : "object",
      "properties" : {
        "resourceGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureResourceGroupDTO"
          }
        }
      }
    },
    "ResponseAzureResourceGroupsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureResourceGroupsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureClusterDTO" : {
      "type" : "object",
      "required" : [ "cluster" ],
      "properties" : {
        "cluster" : {
          "type" : "string"
        }
      }
    },
    "AzureClustersDTO" : {
      "type" : "object",
      "properties" : {
        "clusters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureClusterDTO"
          }
        }
      }
    },
    "ResponseAzureClustersDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureClustersDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureTagDTO" : {
      "type" : "object",
      "required" : [ "tag" ],
      "properties" : {
        "tag" : {
          "type" : "string"
        }
      }
    },
    "AzureTagsDTO" : {
      "type" : "object",
      "properties" : {
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureTagDTO"
          }
        }
      }
    },
    "ResponseAzureTagsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureTagsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureManagementGroupsDTO" : {
      "type" : "object",
      "properties" : {
        "managementGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManagementGroupData"
          }
        }
      }
    },
    "ManagementGroupData" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        }
      }
    },
    "ResponseAzureManagementGroupsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureManagementGroupsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureWebAppNamesDTO" : {
      "type" : "object",
      "properties" : {
        "webAppNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseAzureWebAppNamesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureWebAppNamesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureDeploymentSlotDTO" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "AzureDeploymentSlotsDTO" : {
      "type" : "object",
      "properties" : {
        "deploymentSlots" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AzureDeploymentSlotDTO"
          }
        }
      }
    },
    "ResponseAzureDeploymentSlotsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureDeploymentSlotsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureListInstancesFilter" : {
      "type" : "object",
      "properties" : {
        "subscriptionId" : {
          "type" : "string"
        },
        "resourceGroup" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "winRm" : {
          "type" : "boolean"
        },
        "hostConnectionType" : {
          "type" : "string"
        }
      }
    },
    "AzureLocationsDTO" : {
      "type" : "object",
      "properties" : {
        "locations" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseAzureLocationsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureLocationsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AzureFunctionAppNamesDTO" : {
      "type" : "object",
      "properties" : {
        "functionAppNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseAzureFunctionAppNamesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AzureFunctionAppNamesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceRequestDTO" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "PageServiceResponseDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceResponseDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetHelmCommandFlagType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "Fetch", "Template", "Pull", "Install", "Upgrade", "Rollback", "History", "Delete", "Uninstall", "List", "Add", "Update", "Version" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DestinationServiceConfig" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "baseBranch" : {
          "type" : "string"
        },
        "commitMessage" : {
          "type" : "string"
        },
        "newBranch" : {
          "type" : "boolean"
        },
        "harnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "ServiceCloneRequestDTO" : {
      "type" : "object",
      "required" : [ "destinationConfig", "sourceConfig" ],
      "properties" : {
        "sourceConfig" : {
          "$ref" : "#/definitions/SourceServiceConfig"
        },
        "destinationConfig" : {
          "$ref" : "#/definitions/DestinationServiceConfig"
        }
      }
    },
    "SourceServiceConfig" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        }
      }
    },
    "ForceImportServiceResponse" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseForceImportServiceResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ForceImportServiceResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ForceImportServiceRequestDTO" : {
      "type" : "object",
      "required" : [ "branch", "filePath", "repoName" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "isHarnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListServiceResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceResponse"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AMIArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AMITag"
            }
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AMIFilter"
            }
          },
          "version" : {
            "type" : "string"
          },
          "versionRegex" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AcrArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "registry", "repository", "subscriptionId" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "registry" : {
            "type" : "string"
          },
          "repository" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AmazonS3ArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "bucketName", "connectorRef" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "fileFilter" : {
            "type" : "string"
          },
          "bucketName" : {
            "type" : "string"
          },
          "filePathRegex" : {
            "type" : "string"
          },
          "filePath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ArtifactConfig" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "ArtifactListConfig" : {
      "type" : "object",
      "properties" : {
        "primary" : {
          "$ref" : "#/definitions/PrimaryArtifact"
        },
        "sidecars" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SidecarArtifactWrapper"
          }
        }
      }
    },
    "ArtifactOverrideSetWrapper" : {
      "type" : "object",
      "properties" : {
        "overrideSet" : {
          "$ref" : "#/definitions/ArtifactOverrideSets"
        }
      }
    },
    "ArtifactOverrideSets" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "artifacts" : {
          "$ref" : "#/definitions/ArtifactListConfig"
        }
      }
    },
    "ArtifactSource" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "DockerRegistry", "Gcr", "Ecr", "Nexus3Registry", "Nexus2Registry", "ArtifactoryRegistry", "CustomArtifact", "Acr", "Jenkins", "AmazonS3", "GoogleArtifactRegistry", "GithubPackageRegistry", "AzureArtifacts", "AmazonMachineImage", "Bamboo", "GoogleCloudStorage", "GoogleCloudSource", "Har" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ArtifactConfig"
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "template" : {
          "$ref" : "#/definitions/TemplateLinkConfig"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryRegistryArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "repository", "repositoryFormat" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "repository" : {
            "type" : "string"
          },
          "artifactPath" : {
            "type" : "string"
          },
          "artifactPathFilter" : {
            "type" : "string"
          },
          "artifactDirectory" : {
            "type" : "string"
          },
          "artifactFilter" : {
            "type" : "string"
          },
          "repositoryFormat" : {
            "type" : "string",
            "enum" : [ "docker", "generic" ]
          },
          "repositoryUrl" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "userData" : {
            "$ref" : "#/definitions/UserDataConfiguration"
          }
        }
      } ]
    },
    "AwsLambdaServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "AwsSamServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "AzureArtifactsConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "feed", "package", "packageType", "scope" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "packageType" : {
            "type" : "string",
            "enum" : [ "maven", "nuget", "upack" ]
          },
          "scope" : {
            "type" : "string",
            "enum" : [ "project", "org" ]
          },
          "project" : {
            "type" : "string"
          },
          "feed" : {
            "type" : "string"
          },
          "package" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "versionRegex" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureFunctionServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "AzureWebAppServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "startupCommand" : {
            "$ref" : "#/definitions/StartupCommandConfiguration"
          },
          "applicationSettings" : {
            "$ref" : "#/definitions/ApplicationSettingsConfiguration"
          },
          "connectionStrings" : {
            "$ref" : "#/definitions/ConnectionStringsConfiguration"
          }
        }
      } ]
    },
    "BambooArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "planKey" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "planKey" : {
            "type" : "string"
          },
          "build" : {
            "type" : "string"
          },
          "artifactPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ConfigFileOverrideSetWrapper" : {
      "type" : "object",
      "properties" : {
        "overrideSet" : {
          "$ref" : "#/definitions/ConfigFileOverrideSets"
        }
      }
    },
    "ConfigFileOverrideSets" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "configFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigFileWrapper"
          }
        }
      }
    },
    "CustomArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "version" ],
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "versionRegex" : {
            "type" : "string"
          },
          "timeout" : {
            "type" : "string",
            "pattern" : "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
          },
          "scripts" : {
            "$ref" : "#/definitions/CustomArtifactScripts"
          },
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomArtifactScriptInfo" : {
      "type" : "object",
      "required" : [ "shell", "source" ],
      "properties" : {
        "shell" : {
          "type" : "string",
          "enum" : [ "Bash", "PowerShell" ]
        },
        "source" : {
          "$ref" : "#/definitions/CustomArtifactScriptSourceWrapper"
        }
      }
    },
    "CustomArtifactScriptSourceWrapper" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/CustomScriptBaseSource"
        }
      }
    },
    "CustomArtifactScripts" : {
      "type" : "object",
      "required" : [ "fetchAllArtifacts" ],
      "properties" : {
        "fetchAllArtifacts" : {
          "$ref" : "#/definitions/FetchAllArtifacts"
        }
      }
    },
    "CustomDeploymentServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "required" : [ "customDeploymentRef" ],
        "properties" : {
          "customDeploymentRef" : {
            "$ref" : "#/definitions/StepTemplateRef"
          }
        }
      } ]
    },
    "CustomScriptBaseSource" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "CustomScriptInlineSource" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomScriptBaseSource"
      }, {
        "type" : "object",
        "properties" : {
          "script" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DockerHubArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "imagePath" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcrArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "imagePath", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "registryId" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "ecsTaskDefinitionArn" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ElastigroupServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "startupScript" : {
            "$ref" : "#/definitions/StartupScriptConfiguration"
          }
        }
      } ]
    },
    "FetchAllArtifacts" : {
      "type" : "object",
      "required" : [ "spec" ],
      "properties" : {
        "artifactsArrayPath" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "attributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "versionPath" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "spec" : {
          "$ref" : "#/definitions/CustomArtifactScriptInfo"
        }
      }
    },
    "GcrArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "imagePath", "registryHostname" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "registryHostname" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubPackagesArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "packageName", "packageType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "packageType" : {
            "type" : "string",
            "enum" : [ "npm", "maven", "rubygems", "nuget", "container" ]
          },
          "packageName" : {
            "type" : "string"
          },
          "org" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "versionRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          },
          "groupId" : {
            "type" : "string"
          },
          "artifactId" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleArtifactRegistryConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "package", "project", "region", "repositoryName", "repositoryType" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "repositoryName" : {
            "type" : "string"
          },
          "package" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "versionRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          },
          "repositoryType" : {
            "type" : "string",
            "enum" : [ "docker" ]
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudFunctionsServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "environmentType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "GoogleCloudSourceArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "fetchType", "project", "repository", "sourceDirectory" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "repository" : {
            "type" : "string"
          },
          "sourceDirectory" : {
            "type" : "string"
          },
          "fetchType" : {
            "type" : "string",
            "enum" : [ "Branch", "Commit", "Tag" ]
          },
          "branch" : {
            "type" : "string"
          },
          "commitId" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudStorageArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "artifactPath", "bucket", "connectorRef", "project" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "bucket" : {
            "type" : "string"
          },
          "artifactPath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessArtifactRegistryConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "registryRef", "type" ],
        "properties" : {
          "registryRef" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "docker" ]
          },
          "spec" : {
            "$ref" : "#/definitions/HarnessRegistryConfigSpec"
          }
        }
      } ]
    },
    "HarnessRegistryConfigSpec" : {
      "type" : "object"
    },
    "HarnessRegistryDockerConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/HarnessRegistryConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "imagePath", "tag" ],
        "properties" : {
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessRelease" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "JenkinsArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "jobName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "jobName" : {
            "type" : "string"
          },
          "build" : {
            "type" : "string"
          },
          "artifactPath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JsonNode" : {
      "type" : "object"
    },
    "KubernetesServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "hooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceHookWrapper"
            }
          },
          "manifestConfigurations" : {
            "$ref" : "#/definitions/ManifestConfigurations"
          },
          "release" : {
            "$ref" : "#/definitions/HarnessRelease"
          }
        }
      } ]
    },
    "ManifestConfigurations" : {
      "type" : "object",
      "properties" : {
        "primaryManifestRef" : {
          "type" : "string"
        }
      }
    },
    "ManifestOverrideSetWrapper" : {
      "type" : "object",
      "properties" : {
        "overrideSet" : {
          "$ref" : "#/definitions/ManifestOverrideSets"
        }
      }
    },
    "ManifestOverrideSets" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "manifests" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManifestConfigWrapper"
          }
        }
      }
    },
    "NGServiceConfig" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "$ref" : "#/definitions/NGServiceV2InfoConfig"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "NGServiceV2InfoConfig" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "gitOpsEnabled" : {
          "type" : "boolean"
        },
        "useFromStage" : {
          "$ref" : "#/definitions/ServiceUseFromStageV2"
        },
        "serviceDefinition" : {
          "$ref" : "#/definitions/ServiceDefinition"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "NGVariableOverrideSetWrapper" : {
      "type" : "object",
      "properties" : {
        "overrideSet" : {
          "$ref" : "#/definitions/NGVariableOverrideSets"
        }
      }
    },
    "NGVariableOverrideSets" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        }
      }
    },
    "NativeHelmServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "hooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceHookWrapper"
            }
          },
          "manifestConfigurations" : {
            "$ref" : "#/definitions/ManifestConfigurations"
          },
          "release" : {
            "$ref" : "#/definitions/HarnessRelease"
          }
        }
      } ]
    },
    "Nexus2RegistryArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "repository", "repositoryFormat" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "repository" : {
            "type" : "string"
          },
          "repositoryFormat" : {
            "type" : "string",
            "enum" : [ "maven", "npm", "nuget" ]
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "spec" : {
            "$ref" : "#/definitions/NexusRegistryConfigSpec"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusRegistryArtifactConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactConfig"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "repository", "repositoryFormat" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "repository" : {
            "type" : "string"
          },
          "artifactPath" : {
            "type" : "string"
          },
          "repositoryPort" : {
            "type" : "string"
          },
          "repositoryUrl" : {
            "type" : "string"
          },
          "repositoryFormat" : {
            "type" : "string",
            "enum" : [ "docker", "maven", "npm", "nuget", "raw" ]
          },
          "spec" : {
            "$ref" : "#/definitions/NexusRegistryConfigSpec"
          },
          "tag" : {
            "type" : "string"
          },
          "tagRegex" : {
            "type" : "string"
          },
          "digest" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusRegistryConfigSpec" : {
      "type" : "object"
    },
    "NexusRegistryDockerConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NexusRegistryConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "artifactPath" ],
        "properties" : {
          "artifactPath" : {
            "type" : "string"
          },
          "repositoryPort" : {
            "type" : "string"
          },
          "repositoryUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusRegistryMavenConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NexusRegistryConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "artifactId", "groupId" ],
        "properties" : {
          "artifactId" : {
            "type" : "string"
          },
          "groupId" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "string"
          },
          "classifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusRegistryNpmConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NexusRegistryConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "packageName" ],
        "properties" : {
          "packageName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusRegistryNugetConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NexusRegistryConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "packageName" ],
        "properties" : {
          "packageName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusRegistryRawConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NexusRegistryConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "group" ],
        "properties" : {
          "group" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PrimaryArtifact" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "DockerRegistry", "Gcr", "Ecr", "Nexus3Registry", "Nexus2Registry", "ArtifactoryRegistry", "CustomArtifact", "Acr", "Jenkins", "AmazonS3", "GoogleArtifactRegistry", "GithubPackageRegistry", "AzureArtifacts", "AmazonMachineImage", "Bamboo", "GoogleCloudStorage", "GoogleCloudSource", "Har" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ArtifactConfig"
        },
        "primaryArtifactRef" : {
          "type" : "string"
        },
        "sources" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactSource"
          }
        }
      }
    },
    "ResponseNGServiceConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NGServiceConfig"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServerlessAwsLambdaServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "ServiceDefinition" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ServiceSpec"
        }
      }
    },
    "ServiceHook" : {
      "type" : "object",
      "required" : [ "identifier", "store", "storeType" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "actions" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "FetchFiles", "TemplateManifest", "SteadyStateCheck" ]
          }
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "Inline" ]
        },
        "store" : {
          "$ref" : "#/definitions/StoreConfig"
        }
      }
    },
    "ServiceHookWrapper" : {
      "type" : "object",
      "properties" : {
        "preHook" : {
          "$ref" : "#/definitions/ServiceHook"
        },
        "postHook" : {
          "$ref" : "#/definitions/ServiceHook"
        }
      }
    },
    "ServiceSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "artifacts" : {
          "$ref" : "#/definitions/ArtifactListConfig"
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "manifests" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManifestConfigWrapper"
          }
        },
        "configFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigFileWrapper"
          }
        }
      }
    },
    "ServiceUseFromStageV2" : {
      "type" : "object",
      "required" : [ "stage" ],
      "properties" : {
        "stage" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "SidecarArtifact" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "template" : {
          "$ref" : "#/definitions/TemplateLinkConfig"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "DockerRegistry", "Gcr", "Ecr", "Nexus3Registry", "Nexus2Registry", "ArtifactoryRegistry", "CustomArtifact", "Acr", "Jenkins", "AmazonS3", "GoogleArtifactRegistry", "GithubPackageRegistry", "AzureArtifacts", "AmazonMachineImage", "Bamboo", "GoogleCloudStorage", "GoogleCloudSource", "Har" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ArtifactConfig"
        }
      }
    },
    "SidecarArtifactWrapper" : {
      "type" : "object",
      "properties" : {
        "sidecar" : {
          "$ref" : "#/definitions/SidecarArtifact"
        }
      }
    },
    "SshServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "StartupCommandConfiguration" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "StartupScriptConfiguration" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "TanzuApplicationServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "cliEnvironmentVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          }
        }
      } ]
    },
    "TemplateLinkConfig" : {
      "type" : "object",
      "required" : [ "templateRef" ],
      "properties" : {
        "templateRef" : {
          "type" : "string"
        },
        "versionLabel" : {
          "type" : "string",
          "pattern" : "^[0-9a-zA-Z][^\\s/&]{0,63}$"
        },
        "templateInputs" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "templateVariables" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "gitBranch" : {
          "type" : "string"
        }
      }
    },
    "UserDataConfiguration" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "WinRmServiceSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ServiceSpec"
      }, {
        "type" : "object",
        "properties" : {
          "variableOverrideSets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariableOverrideSetWrapper"
            }
          },
          "artifactOverrideSets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ArtifactOverrideSetWrapper"
            }
          },
          "manifestOverrideSets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ManifestOverrideSetWrapper"
            }
          },
          "configFileOverrideSets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ConfigFileOverrideSetWrapper"
            }
          }
        }
      } ]
    },
    "AMIArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AcrArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ArtifactCorrelationDetails" : {
      "type" : "object",
      "properties" : {
        "image" : {
          "type" : "string"
        }
      }
    },
    "ArtifactSummary" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "artifactIdentity" : {
          "$ref" : "#/definitions/ArtifactCorrelationDetails"
        },
        "digest" : {
          "type" : "string"
        }
      }
    },
    "ArtifactoryArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "artifactPath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ArtifactoryGenericArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "artifactPath" : {
            "type" : "string"
          },
          "artifactDirectory" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureArtifactsSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "type" : "string"
          },
          "packageId" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BambooArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "planKey" : {
            "type" : "string"
          },
          "build" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DockerArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcrArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GarArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "package" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "repositoryName" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GcrArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GithubPackagesArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarDockerArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "registryRef" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "artifactId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JenkinsArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "jobName" : {
            "type" : "string"
          },
          "build" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "NexusArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "artifactPath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseArtifactSummary" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactSummary"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "S3ArtifactSummary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ArtifactSummary"
      }, {
        "type" : "object",
        "properties" : {
          "bucketName" : {
            "type" : "string"
          },
          "filePath" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InputsMetadata" : {
      "type" : "object"
    },
    "ResponseServicesV2YamlMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServicesV2YamlMetadataDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceV2YamlMetadata" : {
      "type" : "object",
      "required" : [ "serviceIdentifier" ],
      "properties" : {
        "serviceIdentifier" : {
          "type" : "string"
        },
        "serviceYaml" : {
          "type" : "string"
        },
        "inputSetTemplateYaml" : {
          "type" : "string"
        },
        "inputsMetadata" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/InputsMetadata"
          }
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        }
      }
    },
    "ServicesV2YamlMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "serviceV2YamlMetadataList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceV2YamlMetadata"
          }
        }
      }
    },
    "ServicesYamlMetadataApiInput" : {
      "type" : "object",
      "required" : [ "serviceIdentifiers" ],
      "properties" : {
        "serviceIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 1000,
          "minItems" : 0
        }
      }
    },
    "ResponseServiceInputsMergedResponseDto" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceInputsMergedResponseDto"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceInputsMergedResponseDto" : {
      "type" : "object",
      "properties" : {
        "mergedServiceInputsYaml" : {
          "type" : "string"
        },
        "serviceYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseValidateTemplateInputsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ValidateTemplateInputsResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactSourcesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "sourceIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "sourceIdentifierToSourceInputMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseArtifactSourcesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactSourcesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceMoveConfigResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "serviceIdentifier" : {
          "type" : "string"
        }
      }
    },
    "ServicesYamlMetadataApiInputV2" : {
      "type" : "object",
      "properties" : {
        "serviceWithGitInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityWithGitInfo"
          },
          "maxItems" : 1000,
          "minItems" : 0
        }
      }
    },
    "ArtifactSourceConfig" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "DockerRegistry", "Gcr", "Ecr", "Nexus3Registry", "Nexus2Registry", "ArtifactoryRegistry", "CustomArtifact", "Acr", "Jenkins", "AmazonS3", "GoogleArtifactRegistry", "GithubPackageRegistry", "AzureArtifacts", "AmazonMachineImage", "Bamboo", "GoogleCloudStorage", "GoogleCloudSource", "Har" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ArtifactConfig"
        }
      }
    },
    "ResponseArtifactSourceConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactSourceConfig"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactSourceYamlRequest" : {
      "type" : "object",
      "required" : [ "entityYaml" ],
      "properties" : {
        "entityYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetK8sCommandFlagType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "Apply", "Patch", "Rollout" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetServiceHookAction" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "FetchFiles", "TemplateManifest", "SteadyStateCheck" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseUnifiedServiceConverterResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UnifiedServiceConverterResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UnifiedServiceConverterResponse" : {
      "type" : "object",
      "properties" : {
        "responseDTO" : {
          "$ref" : "#/definitions/UnifiedServiceConverterResponseDTO"
        }
      }
    },
    "UnifiedServiceConverterResponseDTO" : {
      "type" : "object",
      "properties" : {
        "mergedServiceYaml" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "UnifiedServiceConverterRequestDTO" : {
      "type" : "object",
      "required" : [ "serviceInputYaml" ],
      "properties" : {
        "serviceInputYaml" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetKustomizeCommandFlagType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "Build" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RepoListResponseDTO" : {
      "type" : "object",
      "properties" : {
        "repositories" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseRepoListResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RepoListResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceGitUpdateResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceImportResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceImportResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceImportResponseDTO" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "EntityGitInfo" : {
      "type" : "object",
      "properties" : {
        "objectId" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "fileUrl" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        }
      }
    },
    "OverridesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        },
        "yaml" : {
          "type" : "string"
        },
        "entityGitInfo" : {
          "$ref" : "#/definitions/EntityGitInfo"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        },
        "cacheResponseMetadataDTO" : {
          "$ref" : "#/definitions/CacheResponseMetadata"
        },
        "newlyCreated" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseOverridesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/OverridesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OverrideRequestDTO" : {
      "type" : "object",
      "required" : [ "environmentRef", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "ForceImportOverridesResponse" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseForceImportOverridesResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ForceImportOverridesResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ForceImportOverridesRequest" : {
      "type" : "object",
      "required" : [ "branch", "environmentRef", "filePath", "repoName", "serviceOverridesType" ],
      "properties" : {
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "serviceOverridesType" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "branch" : {
          "type" : "string"
        },
        "filePath" : {
          "type" : "string"
        },
        "isHarnessCodeRepo" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseServiceOverrideMoveConfigResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceOverrideMoveConfigResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideMoveConfigResponse" : {
      "type" : "object",
      "required" : [ "environmentRef", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }
      }
    },
    "PageOverridesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OverridesResponseDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageOverridesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageOverridesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceOverrideGitUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceOverrideGitUpdateResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideGitUpdateResponse" : {
      "type" : "object",
      "required" : [ "environmentRef", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }
      }
    },
    "ResponseServiceOverrideImportResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceOverrideImportResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideImportResponseDTO" : {
      "type" : "object",
      "required" : [ "environmentRef", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        }
      }
    },
    "ServiceOverrideImportRequestDTO" : {
      "type" : "object",
      "required" : [ "environmentRef", "type" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceOverridesResponseDTOV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceOverridesResponseDTOV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverridesResponseDTOV2" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ServiceOverridesSpec"
        },
        "yamlInternal" : {
          "type" : "string"
        },
        "yaml" : {
          "type" : "string"
        },
        "entityGitInfo" : {
          "$ref" : "#/definitions/EntityGitInfo"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        },
        "cacheResponseMetadataDTO" : {
          "$ref" : "#/definitions/CacheResponseMetadata"
        },
        "newlyCreated" : {
          "type" : "boolean"
        }
      }
    },
    "ServiceOverridesSpec" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "manifests" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManifestConfigWrapper"
          }
        },
        "configFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigFileWrapper"
          }
        },
        "applicationSettings" : {
          "$ref" : "#/definitions/ApplicationSettingsConfiguration"
        },
        "connectionStrings" : {
          "$ref" : "#/definitions/ConnectionStringsConfiguration"
        },
        "cliEnvironmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideRequestDTOV2" : {
      "type" : "object",
      "required" : [ "environmentRef", "type" ],
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ENV_GLOBAL_OVERRIDE", "ENV_SERVICE_OVERRIDE", "INFRA_GLOBAL_OVERRIDE", "INFRA_SERVICE_OVERRIDE", "CLUSTER_GLOBAL_OVERRIDE", "CLUSTER_SERVICE_OVERRIDE" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ServiceOverridesSpec"
        },
        "yamlInternal" : {
          "type" : "string"
        },
        "v1Api" : {
          "type" : "boolean"
        },
        "yaml" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "RemoteEnvironmentGlobalOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "targetEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failedEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "environmentsInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleEnvMigrationResponse"
          }
        },
        "migrationSuccessFul" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseRemoteEnvironmentGlobalOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RemoteEnvironmentGlobalOverrideMigrationResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SingleEnvMigrationResponse" : {
      "type" : "object",
      "properties" : {
        "envIdentifier" : {
          "type" : "string"
        },
        "projectId" : {
          "type" : "string"
        },
        "orgId" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "successful" : {
          "type" : "boolean"
        },
        "remote" : {
          "type" : "boolean"
        }
      }
    },
    "PageServiceOverridesResponseDTOV2" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceOverridesResponseDTOV2"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceOverridesResponseDTOV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceOverridesResponseDTOV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AccountLevelOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "targetEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalServiceOverridesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedServiceOverridesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "environmentsInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleEnvMigrationResponse"
          }
        },
        "serviceOverridesInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleServiceOverrideMigrationResponse"
          }
        },
        "failedRemoteEnvCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overridesMigrationSuccessFul" : {
          "type" : "boolean"
        },
        "envsMigrationSuccessful" : {
          "type" : "boolean"
        }
      }
    },
    "OrgLevelOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "totalEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedEnvironmentCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalServiceOverridesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedServiceOverridesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "environmentsInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleEnvMigrationResponse"
          }
        },
        "serviceOverridesInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleServiceOverrideMigrationResponse"
          }
        },
        "failedRemoteEnvCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overridesMigrationSuccessFul" : {
          "type" : "boolean"
        },
        "envsMigrationSuccessful" : {
          "type" : "boolean"
        }
      }
    },
    "ProjectLevelOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "totalEnvironmentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedEnvCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedServiceOverridesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalServiceOverridesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "migratedEnvironmentsInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleEnvMigrationResponse"
          }
        },
        "serviceOverridesInfos" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SingleServiceOverrideMigrationResponse"
          }
        },
        "failedRemoteEnvCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overridesMigrationSuccessFul" : {
          "type" : "boolean"
        },
        "envMigrationSuccessful" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseServiceOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceOverrideMigrationResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "accountLevelMigrationInfo" : {
          "$ref" : "#/definitions/AccountLevelOverrideMigrationResponseDTO"
        },
        "orgLevelMigrationInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrgLevelOverrideMigrationResponseDTO"
          }
        },
        "projectLevelMigrationInfo" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProjectLevelOverrideMigrationResponseDTO"
          }
        },
        "successful" : {
          "type" : "boolean"
        }
      }
    },
    "SingleServiceOverrideMigrationResponse" : {
      "type" : "object",
      "properties" : {
        "serviceRef" : {
          "type" : "string"
        },
        "envRef" : {
          "type" : "string"
        },
        "projectId" : {
          "type" : "string"
        },
        "orgId" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "successful" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListServiceOverrideMigrationResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceOverrideMigrationResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceOverrideBatchMigrationDTO" : {
      "type" : "object",
      "properties" : {
        "accountIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RemoteEnvFetchFailureResponse" : {
      "type" : "object",
      "properties" : {
        "envRef" : {
          "type" : "string"
        },
        "exceptionMessage" : {
          "type" : "string"
        }
      }
    },
    "RemoteEnvFetchFailureResponsesListDTO" : {
      "type" : "object",
      "properties" : {
        "remoteEnvFetchFailureResponsesDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RemoteEnvWithOverridesV1FetchFailureResponsesDetails"
          }
        }
      }
    },
    "RemoteEnvWithOverridesV1FetchFailureResponsesDetails" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "envFetchFailureResponses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RemoteEnvFetchFailureResponse"
          }
        },
        "totalRemoteEnvs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalFailedToFetchRemoteEnvs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalRemoteEnvsInNonDefaultBranch" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseRemoteEnvFetchFailureResponsesListDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/RemoteEnvFetchFailureResponsesListDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "NgSmtpDTO" : {
      "type" : "object",
      "required" : [ "name", "value" ],
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "$ref" : "#/definitions/SmtpConfigDTO"
        }
      }
    },
    "ResponseNgSmtpDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/NgSmtpDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SmtpConfigDTO" : {
      "type" : "object",
      "required" : [ "host", "port" ],
      "properties" : {
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "fromAddress" : {
          "type" : "string"
        },
        "useSSL" : {
          "type" : "boolean"
        },
        "startTLS" : {
          "type" : "boolean"
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "delegateSelectors" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseValidationResultDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ValidationResultDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ValidationResultDTO" : {
      "type" : "object",
      "properties" : {
        "valid" : {
          "type" : "boolean"
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetTerraformCommandFlagType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "INIT", "WORKSPACE", "REFRESH", "PLAN", "APPLY", "DESTROY" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OrganizationDTO" : {
      "type" : "object",
      "required" : [ "organizationId", "organizationName" ],
      "properties" : {
        "organizationName" : {
          "type" : "string"
        },
        "organizationId" : {
          "type" : "string"
        }
      }
    },
    "OrganizationsDTO" : {
      "type" : "object",
      "properties" : {
        "organizations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrganizationDTO"
          }
        }
      }
    },
    "ResponseOrganizationsDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/OrganizationsDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseWorkspacesDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/WorkspacesDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "WorkspaceDTO" : {
      "type" : "object",
      "required" : [ "workspaceId", "workspaceName" ],
      "properties" : {
        "workspaceName" : {
          "type" : "string"
        },
        "workspaceId" : {
          "type" : "string"
        }
      }
    },
    "WorkspacesDTO" : {
      "type" : "object",
      "properties" : {
        "workspaces" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkspaceDTO"
          }
        }
      }
    },
    "ResponseSetTerragruntCommandFlagType" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "INIT", "WORKSPACE", "PLAN", "APPLY", "DESTROY", "OUTPUT" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserAddToUserGroupDTO" : {
      "type" : "object",
      "properties" : {
        "userGroupIdsToAdd" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "NgAccountDTO" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "accountType" : {
          "type" : "string"
        },
        "subdomainUrl" : {
          "type" : "string"
        }
      }
    },
    "PageNgAccountDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NgAccountDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "RestResponsePageNgAccountDTO" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/PageNgAccountDTO"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "UserInfoUpdateDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "givenName" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string"
        }
      }
    },
    "ResponseUserMetadata" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserMetadata"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserMetadata" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "externallyManaged" : {
          "type" : "boolean"
        },
        "twoFactorAuthenticationEnabled" : {
          "type" : "boolean"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CreateUserDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "email", "name", "userId" ],
      "properties" : {
        "userId" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "familyName" : {
          "type" : "string"
        },
        "givenName" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "passwordHash" : {
          "type" : "string"
        },
        "userSource" : {
          "type" : "string",
          "enum" : [ "MANUAL", "LDAP", "SCIM", "JIT" ]
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "roleBindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleBinding"
          }
        },
        "userGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PageProject" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Project"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageProject" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageProject"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListProject" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Project"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActiveProjectsCountDTO" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseActiveProjectsCountDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ActiveProjectsCountDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponsePasswordChangeResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "string",
          "enum" : [ "PASSWORD_CHANGED", "INCORRECT_CURRENT_PASSWORD", "PASSWORD_STRENGTH_VIOLATED" ]
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PasswordChangeDTO" : {
      "type" : "object",
      "properties" : {
        "currentPassword" : {
          "type" : "string"
        },
        "newPassword" : {
          "type" : "string"
        }
      }
    },
    "RestResponseListNgAccountDTO" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NgAccountDTO"
          }
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ResponseTwoFactorAuthSettingsInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TwoFactorAuthSettingsInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TwoFactorAuthSettingsInfo" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "twoFactorAuthenticationEnabled" : {
          "type" : "boolean"
        },
        "mechanism" : {
          "type" : "string",
          "enum" : [ "TOTP" ]
        },
        "totpSecretKey" : {
          "type" : "string"
        },
        "totpqrurl" : {
          "type" : "string"
        }
      }
    },
    "ResponseUserAggregate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserAggregate"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserAggregate" : {
      "type" : "object",
      "required" : [ "roleAssignmentMetadata", "user" ],
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/UserMetadataDTO"
        },
        "roleAssignmentMetadata" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignmentMetadataDTO"
          }
        }
      }
    },
    "PageUserAggregate" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserAggregate"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageUserAggregate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageUserAggregate"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AddUsersResponse" : {
      "type" : "object",
      "properties" : {
        "addUserResponseMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "USER_INVITED_SUCCESSFULLY", "USER_ADDED_SUCCESSFULLY", "USER_ALREADY_ADDED", "USER_ALREADY_INVITED", "USER_INVITE_NOT_REQUIRED", "FAIL" ]
          }
        }
      }
    },
    "ResponseAddUsersResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AddUsersResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AddUsers" : {
      "type" : "object",
      "required" : [ "emails" ],
      "properties" : {
        "emails" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 100,
          "minItems" : 0
        },
        "roleBindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleBinding"
          }
        },
        "userGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "userSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserSettingFromInvite"
          }
        }
      }
    },
    "UserSettingFromInvite" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "AddUsersToScopeDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "userIds" ],
      "properties" : {
        "userIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "roleBindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleBinding"
          }
        },
        "userGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseVariableResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/VariableResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StringVariableConfigDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VariableConfigDTO"
      }, {
        "type" : "object",
        "required" : [ "fixedValue" ],
        "properties" : {
          "fixedValue" : {
            "type" : "string"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "allowedValues" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "VariableConfigDTO" : {
      "type" : "object",
      "required" : [ "valueType" ],
      "discriminator" : "type",
      "properties" : {
        "valueType" : {
          "type" : "string",
          "enum" : [ "FIXED", "FIXED_SET", "REGEX" ]
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "VariableDTO" : {
      "type" : "object",
      "required" : [ "identifier", "name", "spec", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "String" ]
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/VariableConfigDTO"
        }
      }
    },
    "VariableResponseDTO" : {
      "type" : "object",
      "required" : [ "variable" ],
      "properties" : {
        "variable" : {
          "$ref" : "#/definitions/VariableDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "VariableRequestDTO" : {
      "type" : "object",
      "properties" : {
        "variable" : {
          "$ref" : "#/definitions/VariableDTO"
        }
      }
    },
    "PageVariableResponseDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VariableResponseDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageVariableResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageVariableResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "VariableListRequestDTO" : {
      "type" : "object",
      "properties" : {
        "identifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseListExecutionStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "Running", "AsyncWaiting", "TaskWaiting", "TimedWaiting", "Failed", "Errored", "IgnoreFailed", "NotStarted", "Expired", "Aborted", "Discontinuing", "Queued", "Paused", "ResourceWaiting", "InterventionWaiting", "ApprovalWaiting", "WaitStepRunning", "QueuedLicenseLimitReached", "QueuedExecutionConcurrencyReached", "Success", "Suspended", "Skipped", "Pausing", "ApprovalRejected", "InputWaiting", "AbortedByFreeze", "UploadWaiting", "NOT_STARTED", "INTERVENTION_WAITING", "APPROVAL_WAITING", "APPROVAL_REJECTED", "WAITING", "QUEUED_STEP_CONCURRENCY", "STARTING" ]
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Application" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "healthStatus" : {
          "type" : "string"
        },
        "syncStatus" : {
          "type" : "string"
        },
        "syncMessage" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "autoSyncEnabled" : {
          "type" : "boolean"
        },
        "syncError" : {
          "type" : "string"
        }
      }
    },
    "ArtifactsSummary" : {
      "type" : "object",
      "properties" : {
        "primary" : {
          "$ref" : "#/definitions/ArtifactSummary"
        },
        "artifactDisplayName" : {
          "type" : "string"
        },
        "sidecars" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactSummary"
          }
        }
      }
    },
    "CDStageModuleInfo" : {
      "type" : "object",
      "properties" : {
        "serviceInfo" : {
          "$ref" : "#/definitions/ServiceExecutionSummary"
        },
        "infraExecutionSummary" : {
          "$ref" : "#/definitions/InfraExecutionSummary"
        },
        "gitopsExecutionSummary" : {
          "$ref" : "#/definitions/GitOpsExecutionSummary"
        },
        "gitOpsAppSummary" : {
          "$ref" : "#/definitions/GitOpsAppSummary"
        },
        "freezeExecutionSummary" : {
          "$ref" : "#/definitions/FreezeExecutionSummary"
        },
        "nodeExecutionId" : {
          "type" : "string"
        },
        "rollbackDuration" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Cluster" : {
      "type" : "object",
      "properties" : {
        "envGroupId" : {
          "type" : "string"
        },
        "envGroupName" : {
          "type" : "string"
        },
        "envId" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "clusterId" : {
          "type" : "string"
        },
        "clusterName" : {
          "type" : "string"
        },
        "agentId" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string"
        }
      }
    },
    "FreezeExecutionInfo" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "yaml" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "freezeType" : {
          "type" : "string"
        }
      }
    },
    "FreezeExecutionSummary" : {
      "type" : "object",
      "properties" : {
        "freezeExecutionInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeExecutionInfo"
          }
        }
      }
    },
    "GitOpsAppSummary" : {
      "type" : "object",
      "properties" : {
        "applications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Application"
          }
        }
      }
    },
    "GitOpsExecutionSummary" : {
      "type" : "object",
      "properties" : {
        "environments" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Environment"
          }
        },
        "clusters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Cluster"
          }
        }
      }
    },
    "InfraExecutionSummary" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "infrastructureIdentifier" : {
          "type" : "string"
        },
        "infrastructureName" : {
          "type" : "string"
        },
        "envGroupId" : {
          "type" : "string"
        },
        "envGroupName" : {
          "type" : "string"
        }
      }
    },
    "ManifestStoreInfo" : {
      "type" : "object",
      "properties" : {
        "branch" : {
          "type" : "string"
        },
        "commitId" : {
          "type" : "string"
        },
        "folderPath" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        },
        "paths" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "chartName" : {
          "type" : "string"
        },
        "chartVersion" : {
          "type" : "string"
        },
        "subChartPath" : {
          "type" : "string"
        },
        "bucketName" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string"
        },
        "helmVersion" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string"
        }
      }
    },
    "ResponseCDStageModuleInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CDStageModuleInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceExecutionSummary" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "deploymentType" : {
          "type" : "string"
        },
        "gitOpsEnabled" : {
          "type" : "boolean"
        },
        "artifacts" : {
          "$ref" : "#/definitions/ArtifactsSummary"
        },
        "manifestInfo" : {
          "$ref" : "#/definitions/ManifestStoreInfo"
        }
      }
    },
    "CDPipelineModuleInfo" : {
      "type" : "object",
      "properties" : {
        "serviceIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "envIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "envGroupIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "serviceDefinitionTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "artifactDisplayNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "helmChartVersions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "PreProduction", "Production" ]
          }
        },
        "infrastructureTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "infrastructureIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "infrastructureNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "freezeIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "gitOpsAppIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseCDPipelineModuleInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CDPipelineModuleInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ACRStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "repository", "tags" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "repository" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "context" : {
            "type" : "string"
          },
          "dockerfile" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "buildArgs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "optimize" : {
            "type" : "boolean"
          },
          "remoteCacheImage" : {
            "type" : "string"
          },
          "baseImageConnectorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "cacheFrom" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheTo" : {
            "type" : "string"
          },
          "caching" : {
            "type" : "boolean"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "envDockerSecrets" : {
            "type" : "object"
          },
          "fileDockerSecrets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AWSIAMRoleCredentialSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformProviderCredentialSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "roleArn" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AbortFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Abort" ]
          }
        }
      } ]
    },
    "ActionStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "uses" ],
        "properties" : {
          "uses" : {
            "type" : "string"
          },
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "env" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ActionStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "uses" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringJsonNode"
          },
          "outputs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "env" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AgentApplicationTargets" : {
      "type" : "object",
      "required" : [ "agentId", "applicationName" ],
      "properties" : {
        "agentId" : {
          "type" : "string"
        },
        "applicationName" : {
          "type" : "string"
        }
      }
    },
    "AllowAllFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterSpec"
      }, {
        "type" : "object"
      } ]
    },
    "ApplySchemaStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbInstance" : {
            "type" : "string"
          },
          "dbSchema" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgBlueGreenDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "loadBalancer" : {
            "type" : "string"
          },
          "prodListener" : {
            "type" : "string"
          },
          "prodListenerRuleArn" : {
            "type" : "string"
          },
          "stageListener" : {
            "type" : "string"
          },
          "stageListenerRuleArn" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instances" : {
            "$ref" : "#/definitions/AsgInstances"
          },
          "loadBalancers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AwsAsgLoadBalancerConfigYaml"
            }
          },
          "asgName" : {
            "type" : "string"
          },
          "useAlreadyRunningInstances" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AsgBlueGreenRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AsgBlueGreenSwapServiceStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "downsizeOldAsg" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "downsizeOldAsg" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AsgCanaryDeleteStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AsgCanaryDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "instanceSelection" ],
        "properties" : {
          "instanceSelection" : {
            "$ref" : "#/definitions/Capacity"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "asgName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgCurrentRunningInstances" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AsgInstancesSpec"
      }, {
        "type" : "object"
      } ]
    },
    "AsgDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "AsgFixedInstances" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AsgInstancesSpec"
      }, {
        "type" : "object",
        "required" : [ "desired", "max", "min" ],
        "properties" : {
          "desired" : {
            "type" : "integer",
            "format" : "int32"
          },
          "min" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "AsgInstances" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Fixed", "CurrentRunning" ]
        },
        "spec" : {
          "$ref" : "#/definitions/AsgInstancesSpec"
        }
      }
    },
    "AsgInstancesSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Fixed", "CurrentRunning" ]
        }
      }
    },
    "AsgPhasedDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "instanceSelection" ],
        "properties" : {
          "instanceSelection" : {
            "$ref" : "#/definitions/Capacity"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AsgRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AsgRollingDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instances" : {
            "$ref" : "#/definitions/AsgInstances"
          },
          "asgName" : {
            "type" : "string"
          },
          "skipMatching" : {
            "type" : "boolean"
          },
          "useAlreadyRunningInstances" : {
            "type" : "boolean"
          },
          "instanceWarmup" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          },
          "minimumHealthyPercentage" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 100
          },
          "maximumHealthyPercentage" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 100,
            "maximum" : 200
          }
        }
      } ]
    },
    "AsgRollingRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AsgSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "asgName", "instances", "resizeStrategy" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instances" : {
            "$ref" : "#/definitions/AsgInstances"
          },
          "asgName" : {
            "type" : "string"
          },
          "resizeStrategy" : {
            "type" : "string",
            "enum" : [ "resize_new_first", "downsize_old_first" ]
          }
        }
      } ]
    },
    "AsgShiftTrafficStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "downsizeOldAsg", "weight" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "weight" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 100
          },
          "downsizeOldAsg" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AwsAsgLoadBalancerConfigYaml" : {
      "type" : "object",
      "required" : [ "loadBalancer", "prodListener", "prodListenerRuleArn" ],
      "properties" : {
        "loadBalancer" : {
          "type" : "string"
        },
        "prodListener" : {
          "type" : "string"
        },
        "prodListenerRuleArn" : {
          "type" : "string"
        },
        "stageListener" : {
          "type" : "string"
        },
        "stageListenerRuleArn" : {
          "type" : "string"
        }
      }
    },
    "AwsCdkBootstrapStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "image" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "appPath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsCdkDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "image", "provisionerIdentifier" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "appPath" : {
            "type" : "string"
          },
          "stackNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsCdkDestroyStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "image" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "appPath" : {
            "type" : "string"
          },
          "stackNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsCdkDiffStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "image" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "appPath" : {
            "type" : "string"
          },
          "stackNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsCdkRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsCdkSynthStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "image" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "appPath" : {
            "type" : "string"
          },
          "exportTemplate" : {
            "type" : "boolean"
          },
          "stackNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsCloudProviderBasicConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudProviderSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsLambdaDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsLambdaDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "AwsLambdaRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AwsLoadBalancerConfigYaml" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LoadBalancerSpec"
      }, {
        "type" : "object",
        "required" : [ "loadBalancer", "prodListenerPort", "prodListenerRuleArn", "stageListenerPort", "stageListenerRuleArn" ],
        "properties" : {
          "loadBalancer" : {
            "type" : "string"
          },
          "prodListenerPort" : {
            "type" : "string"
          },
          "prodListenerRuleArn" : {
            "type" : "string"
          },
          "stageListenerPort" : {
            "type" : "string"
          },
          "stageListenerRuleArn" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamBuildStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "samVersion" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          },
          "buildCommandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "samBuildDockerRegistryConnectorRef" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "stackName" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "samVersion" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          },
          "deployCommandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "stackName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "AwsSamRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AzureARMRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provisionerIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureCreateARMResourceParameterFile" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        }
      }
    },
    "AzureCreateARMResourceStepConfiguration" : {
      "type" : "object",
      "required" : [ "connectorRef", "scope", "template" ],
      "properties" : {
        "connectorRef" : {
          "type" : "string"
        },
        "template" : {
          "$ref" : "#/definitions/AzureTemplateFile"
        },
        "parameters" : {
          "$ref" : "#/definitions/AzureCreateARMResourceParameterFile"
        },
        "scope" : {
          "$ref" : "#/definitions/AzureCreateARMResourceStepScope"
        }
      }
    },
    "AzureCreateARMResourceStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration", "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/AzureCreateARMResourceStepConfiguration"
          }
        }
      } ]
    },
    "AzureCreateARMResourceStepScope" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/AzureScopeType"
        }
      }
    },
    "AzureCreateBPStepConfiguration" : {
      "type" : "object",
      "required" : [ "connectorRef", "scope", "template" ],
      "properties" : {
        "assignmentName" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "Subscription", "ManagementGroup" ]
        },
        "template" : {
          "$ref" : "#/definitions/AzureTemplateFile"
        },
        "connectorRef" : {
          "type" : "string"
        }
      }
    },
    "AzureCreateBPStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/AzureCreateBPStepConfiguration"
          }
        }
      } ]
    },
    "AzureFunctionDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "slotDeploymentStepFqn" : {
            "type" : "string"
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "functionApp" : {
            "type" : "string"
          },
          "deploymentSlot" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          },
          "deployCommandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AzureFunctionDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "AzureFunctionRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "slotDeploymentStepFqn" : {
            "type" : "string"
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "functionApp" : {
            "type" : "string"
          },
          "deploymentSlot" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          },
          "deployCommandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "AzureManagementSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureScopeType"
      }, {
        "type" : "object",
        "required" : [ "location", "managementGroupId" ],
        "properties" : {
          "managementGroupId" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureResourceGroupSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureScopeType"
      }, {
        "type" : "object",
        "required" : [ "resourceGroup", "subscription" ],
        "properties" : {
          "subscription" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "mode" : {
            "type" : "string",
            "enum" : [ "Incremental", "Complete" ]
          }
        }
      } ]
    },
    "AzureScopeType" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "AzureSubscriptionSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureScopeType"
      }, {
        "type" : "object",
        "required" : [ "location", "subscription" ],
        "properties" : {
          "subscription" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureTemplateFile" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        }
      }
    },
    "AzureTenantSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AzureScopeType"
      }, {
        "type" : "object",
        "required" : [ "location" ],
        "properties" : {
          "location" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureWebAppDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "AzureWebAppRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipSteadyStateCheck" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AzureWebAppSlotDeploymentStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "deploymentSlot", "webApp" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "webApp" : {
            "type" : "string"
          },
          "deploymentSlot" : {
            "type" : "string"
          },
          "clean" : {
            "type" : "boolean"
          },
          "skipSteadyStateCheck" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AzureWebAppSwapSlotStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "targetSlot" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "targetSlot" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureWebAppTrafficShiftStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "traffic" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traffic" : {
            "$ref" : "#/definitions/ParameterFieldString"
          }
        }
      } ]
    },
    "BackgroundStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "command" : {
            "type" : "string"
          },
          "reports" : {
            "$ref" : "#/definitions/UnitTestReport"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "Sh", "Bash", "Powershell", "Pwsh", "Python" ]
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "entrypoint" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "portBindings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BackgroundStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "run" ],
        "properties" : {
          "run" : {
            "type" : "string"
          },
          "envs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "entrypoint" : {
            "type" : "string"
          },
          "args" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ports" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "network" : {
            "type" : "string"
          },
          "image" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "user" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "sh", "bash", "powershell", "pwsh", "python" ]
          },
          "pull" : {
            "type" : "string",
            "enum" : [ "always", "never", "if-not-exists" ]
          },
          "entrypointList" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BambooBuildStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "planName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "planName" : {
            "type" : "string"
          },
          "planParameter" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/BambooParameterField"
            }
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BambooParameterField" : {
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "String", "Number" ]
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "BitriseStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "uses" ],
        "properties" : {
          "uses" : {
            "type" : "string"
          },
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "env" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BitriseStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "uses" ],
        "properties" : {
          "uses" : {
            "type" : "string"
          },
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "envs" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "BranchBuildSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BuildSpec"
      }, {
        "type" : "object",
        "required" : [ "branch" ],
        "properties" : {
          "branch" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Build" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "branch", "tag", "PR", "commitSha" ]
        },
        "spec" : {
          "$ref" : "#/definitions/BuildSpec"
        }
      }
    },
    "BuildSpec" : {
      "type" : "object"
    },
    "CIVolume" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "EmptyDir", "PersistentVolumeClaim", "HostPath" ]
        }
      }
    },
    "Capabilities" : {
      "type" : "object",
      "properties" : {
        "add" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "drop" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Capacity" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/CapacitySpec"
        }
      }
    },
    "CapacitySpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "ChaosStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "expectedResilienceScore", "experimentRef" ],
        "properties" : {
          "experimentRef" : {
            "type" : "string"
          },
          "expectedResilienceScore" : {
            "type" : "number",
            "format" : "double"
          },
          "assertion" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CloneRef" : {
      "type" : "object",
      "properties" : {
        "sha" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "branch", "pull-request", "tag" ]
        },
        "name" : {
          "$ref" : "#/definitions/ParameterFieldString"
        }
      }
    },
    "CloudProvider" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AWS" ]
        },
        "spec" : {
          "$ref" : "#/definitions/CloudProviderSpec"
        }
      }
    },
    "CloudProviderSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AWS" ]
        }
      }
    },
    "CloudformationCreateStackStepConfiguration" : {
      "type" : "object",
      "required" : [ "connectorRef", "region", "stackName", "templateFile" ],
      "properties" : {
        "stackName" : {
          "type" : "string"
        },
        "templateFile" : {
          "$ref" : "#/definitions/CloudformationTemplateFile"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudformationParametersFileSpec"
          }
        },
        "connectorRef" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string"
        },
        "roleArn" : {
          "type" : "string"
        },
        "capabilities" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "$ref" : "#/definitions/CloudformationTags"
        },
        "skipOnStackStatuses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "parameterOverrides" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        }
      }
    },
    "CloudformationCreateStackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration", "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/CloudformationCreateStackStepConfiguration"
          }
        }
      } ]
    },
    "CloudformationDeleteStackStepConfiguration" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/CloudformationDeleteStackStepConfigurationSpec"
        }
      }
    },
    "CloudformationDeleteStackStepConfigurationSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "CloudformationDeleteStackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/CloudformationDeleteStackStepConfiguration"
          }
        }
      } ]
    },
    "CloudformationParametersFileSpec" : {
      "type" : "object",
      "required" : [ "identifier", "store" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        }
      }
    },
    "CloudformationRollbackStepConfiguration" : {
      "type" : "object",
      "required" : [ "provisionerIdentifier" ],
      "properties" : {
        "provisionerIdentifier" : {
          "type" : "string"
        }
      }
    },
    "CloudformationRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "configuration" : {
            "$ref" : "#/definitions/CloudformationRollbackStepConfiguration"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CloudformationTags" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/CloudformationTagsFileSpec"
        }
      }
    },
    "CloudformationTagsFileSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "CloudformationTemplateFile" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/CloudformationTemplateFileSpec"
        }
      }
    },
    "CloudformationTemplateFileSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "ClusterYaml" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "CommandStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "onDelegate" ],
        "properties" : {
          "onDelegate" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandUnits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CommandUnitWrapper"
            }
          },
          "host" : {
            "type" : "string"
          },
          "environmentVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "outputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CommandUnitBaseSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "CommandUnitWrapper" : {
      "type" : "object",
      "required" : [ "identifier", "name", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/CommandUnitBaseSpec"
        }
      }
    },
    "CommitShaBuildSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BuildSpec"
      }, {
        "type" : "object",
        "required" : [ "commitSha" ],
        "properties" : {
          "commitSha" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ConfigK8sTrafficRouting" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRouting"
      }, {
        "type" : "object",
        "required" : [ "provider", "spec" ],
        "properties" : {
          "provider" : {
            "type" : "string",
            "enum" : [ "SMI", "ISTIO" ]
          },
          "spec" : {
            "$ref" : "#/definitions/K8sTrafficRoutingProvider"
          }
        }
      } ]
    },
    "Container" : {
      "type" : "object",
      "properties" : {
        "image" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "connector" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "credentials" : {
          "$ref" : "#/definitions/Credentials"
        },
        "pull" : {
          "$ref" : "#/definitions/ParameterFieldPullPolicy"
        },
        "entrypoint" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "args" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "dns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "env" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "extra-hosts" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "network" : {
          "type" : "string"
        },
        "network-mode" : {
          "type" : "string",
          "readOnly" : true
        },
        "privileged" : {
          "$ref" : "#/definitions/ParameterFieldBoolean"
        },
        "workdir" : {
          "type" : "string"
        },
        "ports" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "port-bindings" : {
          "readOnly" : true,
          "$ref" : "#/definitions/ParameterFieldMapStringString"
        },
        "volumes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Mount"
          }
        },
        "user" : {
          "$ref" : "#/definitions/ParameterFieldInteger"
        },
        "group" : {
          "type" : "string"
        },
        "cpu" : {
          "type" : "string"
        },
        "memory" : {
          "type" : "string"
        },
        "shm-size" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "ContainerInfraYamlSpec" : {
      "type" : "object",
      "required" : [ "connectorRef" ],
      "properties" : {
        "resources" : {
          "$ref" : "#/definitions/ContainerResource"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "namespace" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2147483647
        },
        "annotations" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "labels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "runAsUser" : {
          "type" : "integer",
          "format" : "int32"
        },
        "serviceAccountName" : {
          "type" : "string"
        },
        "initTimeout" : {
          "type" : "string"
        },
        "nodeSelector" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "hostNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tolerations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Toleration"
          }
        },
        "volumes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CIVolume"
          }
        },
        "automountServiceAccountToken" : {
          "type" : "boolean"
        },
        "containerSecurityContext" : {
          "$ref" : "#/definitions/SecurityContext"
        },
        "priorityClassName" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string",
          "enum" : [ "Linux", "MacOS", "Windows" ]
        },
        "harnessImageConnectorRef" : {
          "type" : "string"
        },
        "imagePullPolicy" : {
          "type" : "string",
          "enum" : [ "Always", "Never", "IfNotPresent" ]
        },
        "podSpecOverlay" : {
          "type" : "string"
        }
      }
    },
    "ContainerResource" : {
      "type" : "object",
      "required" : [ "limits" ],
      "properties" : {
        "limits" : {
          "$ref" : "#/definitions/Limits"
        }
      }
    },
    "CopyCommandUnitSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommandUnitBaseSpec"
      }, {
        "type" : "object",
        "required" : [ "destinationPath", "sourceType" ],
        "properties" : {
          "destinationPath" : {
            "type" : "string"
          },
          "sourceType" : {
            "type" : "string",
            "enum" : [ "Artifact", "Config" ]
          }
        }
      } ]
    },
    "CountCapacitySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CapacitySpec"
      }, {
        "type" : "object",
        "required" : [ "count" ],
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          }
        }
      } ]
    },
    "CountInstanceSelection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceSelectionBase"
      }, {
        "type" : "object",
        "properties" : {
          "count" : {
            "$ref" : "#/definitions/ParameterFieldString"
          }
        }
      } ]
    },
    "Credentials" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "aws" : {
          "$ref" : "#/definitions/CredentialsAws"
        }
      }
    },
    "CredentialsAws" : {
      "type" : "object",
      "properties" : {
        "access-key" : {
          "type" : "string",
          "readOnly" : true
        },
        "secret-key" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "CustomDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "CustomStageConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StageInfoConfig"
      }, {
        "type" : "object",
        "required" : [ "execution" ],
        "properties" : {
          "execution" : {
            "$ref" : "#/definitions/ExecutionElementConfig"
          },
          "environment" : {
            "$ref" : "#/definitions/EnvironmentYamlV2"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DBCommandStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbInstance" : {
            "type" : "string"
          },
          "dbSchema" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "command" : {
            "type" : "string",
            "enum" : [ "Update", "UpdateSQL", "Validate", "History", "Tag", "Rollback", "Clone", "Custom", "ParentWrapper" ]
          },
          "settings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "changeSetCloneDirectory" : {
            "type" : "string"
          },
          "parentStepType" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DefaultK8sTrafficRouting" : {
      "type" : "object",
      "required" : [ "provider", "spec" ],
      "properties" : {
        "provider" : {
          "type" : "string",
          "enum" : [ "SMI", "ISTIO" ]
        },
        "spec" : {
          "$ref" : "#/definitions/K8sTrafficRoutingProvider"
        }
      }
    },
    "DeleteManifestPathSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeleteResourcesBaseSpec"
      }, {
        "type" : "object",
        "properties" : {
          "manifestPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allManifestPaths" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "DeleteReleaseNameSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeleteResourcesBaseSpec"
      }, {
        "type" : "object",
        "properties" : {
          "deleteNamespace" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "DeleteResourceNameSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeleteResourcesBaseSpec"
      }, {
        "type" : "object",
        "required" : [ "resourceNames" ],
        "properties" : {
          "resourceNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DeleteResourcesBaseSpec" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "DeleteResourcesWrapper" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ResourceName", "ReleaseName", "ManifestPath" ]
        },
        "spec" : {
          "$ref" : "#/definitions/DeleteResourcesBaseSpec"
        }
      }
    },
    "DeploymentMetaData" : {
      "type" : "object",
      "discriminator" : "deploymentType"
    },
    "DeploymentStageConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StageInfoConfig"
      }, {
        "type" : "object",
        "required" : [ "execution" ],
        "properties" : {
          "serviceConfig" : {
            "$ref" : "#/definitions/ServiceConfig"
          },
          "service" : {
            "$ref" : "#/definitions/ServiceYamlV2"
          },
          "services" : {
            "$ref" : "#/definitions/ServicesYaml"
          },
          "deploymentType" : {
            "type" : "string",
            "enum" : [ "Kubernetes", "NativeHelm", "Ssh", "WinRm", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AwsLambda", "AWS_SAM", "SERVICE_YAML_V1_TYPE", "GoogleCloudRun" ]
          },
          "gitOpsEnabled" : {
            "type" : "boolean"
          },
          "customDeploymentRef" : {
            "$ref" : "#/definitions/StepTemplateRef"
          },
          "environment" : {
            "$ref" : "#/definitions/EnvironmentYamlV2"
          },
          "environments" : {
            "$ref" : "#/definitions/EnvironmentsYaml"
          },
          "environmentGroup" : {
            "$ref" : "#/definitions/EnvironmentGroupYaml"
          },
          "infrastructure" : {
            "$ref" : "#/definitions/PipelineInfrastructure"
          },
          "execution" : {
            "$ref" : "#/definitions/ExecutionElementConfig"
          },
          "deploymentMetadata" : {
            "$ref" : "#/definitions/DeploymentMetaData"
          },
          "multiDeploymentConfig" : {
            "$ref" : "#/definitions/MultiDeploymentConfig"
          }
        }
      } ]
    },
    "DestinationSpec" : {
      "type" : "object",
      "properties" : {
        "host" : {
          "type" : "string"
        },
        "weight" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "DockerStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "repo", "tags" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "repo" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "context" : {
            "type" : "string"
          },
          "dockerfile" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "buildArgs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "optimize" : {
            "type" : "boolean"
          },
          "baseImageConnectorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheFrom" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheTo" : {
            "type" : "string"
          },
          "caching" : {
            "type" : "boolean"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "registryRef" : {
            "type" : "string"
          },
          "envDockerSecrets" : {
            "type" : "object"
          },
          "fileDockerSecrets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "remoteCacheRepo" : {
            "type" : "string"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DownloadArtifactCommandUnitSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommandUnitBaseSpec"
      }, {
        "type" : "object",
        "required" : [ "destinationPath" ],
        "properties" : {
          "destinationPath" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DownloadAwsS3StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "downloadPath" : {
            "type" : "string"
          },
          "outputFilePathsContent" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "bucketName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DownloadHarnessStoreStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "downloadPath" : {
            "type" : "string"
          },
          "outputFilePathsContent" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "files" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DownloadManifestsStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ECRStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "account", "connectorRef", "imageName", "region", "tags" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "account" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "imageName" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "context" : {
            "type" : "string"
          },
          "dockerfile" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "buildArgs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "optimize" : {
            "type" : "boolean"
          },
          "remoteCacheImage" : {
            "type" : "string"
          },
          "baseImageConnectorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheFrom" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheTo" : {
            "type" : "string"
          },
          "caching" : {
            "type" : "boolean"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "envDockerSecrets" : {
            "type" : "object"
          },
          "fileDockerSecrets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsBasicRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "EcsBlueGreenCreateServiceStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "loadBalancer", "prodListener", "prodListenerRuleArn", "stageListener", "stageListenerRuleArn" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "loadBalancer" : {
            "type" : "string"
          },
          "prodListener" : {
            "type" : "string"
          },
          "prodListenerRuleArn" : {
            "type" : "string"
          },
          "stageListener" : {
            "type" : "string"
          },
          "stageListenerRuleArn" : {
            "type" : "string"
          },
          "sameAsAlreadyRunningInstances" : {
            "type" : "boolean"
          },
          "enableAutoScalingInSwapStep" : {
            "type" : "boolean"
          },
          "updateGreenService" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "EcsBlueGreenRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "EcsBlueGreenSwapTargetGroupsStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "doNotDownsizeOldService" : {
            "type" : "boolean"
          },
          "downsizeOldServiceDelayInSecs" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "EcsCanaryDeleteStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "EcsCanaryDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "EcsDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "EcsRollingDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sameAsAlreadyRunningInstances" : {
            "type" : "boolean"
          },
          "forceNewDeployment" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "EcsRollingRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "EcsRunTaskStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "runTaskRequestDefinition" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipSteadyStateCheck" : {
            "type" : "boolean"
          },
          "taskDefinition" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "taskDefinitionArn" : {
            "type" : "string"
          },
          "runTaskRequestDefinition" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "EcsServiceSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sameAsAlreadyRunningInstances" : {
            "type" : "boolean"
          },
          "resizeStrategy" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsUpgradeContainerStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "newServiceInstanceCount", "newServiceInstanceUnit" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "newServiceInstanceUnit" : {
            "type" : "string"
          },
          "downsizeOldServiceInstanceUnit" : {
            "type" : "string"
          },
          "newServiceInstanceCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "downsizeOldServiceInstanceCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "ElastiGroupDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "ElastigroupBGStageSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectedCloudProvider", "instances", "loadBalancers" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "loadBalancers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LoadBalancer"
            }
          },
          "instances" : {
            "$ref" : "#/definitions/ElastigroupInstances"
          },
          "connectedCloudProvider" : {
            "$ref" : "#/definitions/CloudProvider"
          }
        }
      } ]
    },
    "ElastigroupCurrentRunningInstances" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ElastigroupInstancesSpec"
      }, {
        "type" : "object"
      } ]
    },
    "ElastigroupDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "newService" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "newService" : {
            "$ref" : "#/definitions/Capacity"
          },
          "oldService" : {
            "$ref" : "#/definitions/Capacity"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ElastigroupFixedInstances" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ElastigroupInstancesSpec"
      }, {
        "type" : "object",
        "required" : [ "desired", "max", "min" ],
        "properties" : {
          "desired" : {
            "type" : "integer",
            "format" : "int32"
          },
          "min" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "ElastigroupInstances" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Fixed", "CurrentRunning" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ElastigroupInstancesSpec"
        }
      }
    },
    "ElastigroupInstancesSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Fixed", "CurrentRunning" ]
        }
      }
    },
    "ElastigroupRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ElastigroupSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "instances" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "instances" : {
            "$ref" : "#/definitions/ElastigroupInstances"
          }
        }
      } ]
    },
    "ElastigroupSwapRouteStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "downsizeOldElastigroup" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "downsizeOldElastigroup" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "EmptyDirYaml" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CIVolume"
      }, {
        "type" : "object",
        "required" : [ "mountPath", "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "EmptyDir", "PersistentVolumeClaim", "HostPath" ]
          },
          "mountPath" : {
            "type" : "string"
          },
          "spec" : {
            "$ref" : "#/definitions/EmptyDirYamlSpec"
          }
        }
      } ]
    },
    "EmptyDirYamlSpec" : {
      "type" : "object",
      "properties" : {
        "medium" : {
          "type" : "string"
        },
        "size" : {
          "type" : "string",
          "pattern" : "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      }
    },
    "EnvironmentGroupMetadata" : {
      "type" : "object",
      "properties" : {
        "oldParallel" : {
          "type" : "boolean"
        },
        "parallel" : {
          "type" : "boolean"
        }
      }
    },
    "EnvironmentGroupYaml" : {
      "type" : "object",
      "required" : [ "envGroupRef" ],
      "properties" : {
        "__uuid" : {
          "type" : "string"
        },
        "envGroupRef" : {
          "type" : "string",
          "pattern" : "^(?=\\s*\\S).*$"
        },
        "environments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentYamlV2"
          }
        },
        "filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilterYaml"
          }
        },
        "deployToAll" : {
          "type" : "boolean"
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        },
        "metadata" : {
          "$ref" : "#/definitions/EnvironmentGroupMetadata"
        }
      }
    },
    "EnvironmentInfraUseFromStage" : {
      "type" : "object",
      "required" : [ "stage" ],
      "properties" : {
        "stage" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentYaml" : {
      "type" : "object",
      "required" : [ "identifier", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "EnvironmentYamlV2" : {
      "type" : "object",
      "properties" : {
        "environmentRef" : {
          "type" : "string",
          "pattern" : "^(?=\\s*\\S).*$"
        },
        "gitBranch" : {
          "type" : "string"
        },
        "deployToAll" : {
          "type" : "boolean"
        },
        "filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilterYaml"
          }
        },
        "infrastructureDefinitions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InfraStructureDefinitionYaml"
          }
        },
        "infrastructureDefinition" : {
          "$ref" : "#/definitions/InfraStructureDefinitionYaml"
        },
        "provisioner" : {
          "$ref" : "#/definitions/ExecutionElementConfig"
        },
        "useFromStage" : {
          "$ref" : "#/definitions/EnvironmentInfraUseFromStage"
        },
        "environmentInputs" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "serviceOverrideInputs" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "gitOpsClusters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClusterYaml"
          }
        },
        "servicesOverrides" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceOverrideInputsYaml"
          }
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        }
      }
    },
    "EnvironmentsMetadata" : {
      "type" : "object",
      "properties" : {
        "oldParallel" : {
          "type" : "boolean"
        },
        "parallel" : {
          "type" : "boolean"
        }
      }
    },
    "EnvironmentsYaml" : {
      "type" : "object",
      "properties" : {
        "filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilterYaml"
          }
        },
        "values" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentYamlV2"
          }
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        },
        "metadata" : {
          "readOnly" : true,
          "$ref" : "#/definitions/EnvironmentsMetadata"
        }
      }
    },
    "ExecutionElementConfig" : {
      "type" : "object",
      "required" : [ "steps" ],
      "properties" : {
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "rollbackSteps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionWrapperConfig"
          }
        },
        "version" : {
          "type" : "string"
        }
      }
    },
    "ExecutionWrapperConfig" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "step" : {
          "$ref" : "#/definitions/StepElementConfig"
        },
        "parallel" : {
          "$ref" : "#/definitions/ParallelStepElementConfig"
        },
        "stepGroup" : {
          "$ref" : "#/definitions/StepGroupElementConfig"
        },
        "insert" : {
          "$ref" : "#/definitions/InjectStepNode"
        }
      }
    },
    "FailureStrategyActionConfig" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Ignore", "Retry", "MarkAsSuccess", "Abort", "StageRollback", "StepGroupRollback", "PipelineRollback", "ManualIntervention", "ProceedWithDefaultValues", "MarkAsFailure", "RetryStepGroup" ]
        }
      }
    },
    "FailureStrategyConfig" : {
      "type" : "object",
      "required" : [ "onFailure" ],
      "properties" : {
        "onFailure" : {
          "$ref" : "#/definitions/OnFailureConfig"
        }
      }
    },
    "FetchInstanceScriptStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "FetchLinkedAppsStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "FilterSpec" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "FilterYaml" : {
      "type" : "object",
      "required" : [ "entities", "identifier", "spec", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "tags", "all" ]
        },
        "entities" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "infrastructures", "gitOpsClusters", "environments" ]
          }
        },
        "spec" : {
          "$ref" : "#/definitions/FilterSpec"
        }
      }
    },
    "GARStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "host", "imageName", "projectID", "tags" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "host" : {
            "type" : "string"
          },
          "projectID" : {
            "type" : "string"
          },
          "imageName" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "context" : {
            "type" : "string"
          },
          "dockerfile" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "buildArgs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "optimize" : {
            "type" : "boolean"
          },
          "remoteCacheImage" : {
            "type" : "string"
          },
          "baseImageConnectorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheFrom" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheTo" : {
            "type" : "string"
          },
          "caching" : {
            "type" : "boolean"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "envDockerSecrets" : {
            "type" : "object"
          },
          "fileDockerSecrets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GCRStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "host", "imageName", "projectID", "tags" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "host" : {
            "type" : "string"
          },
          "projectID" : {
            "type" : "string"
          },
          "imageName" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "context" : {
            "type" : "string"
          },
          "dockerfile" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "buildArgs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "optimize" : {
            "type" : "boolean"
          },
          "remoteCacheImage" : {
            "type" : "string"
          },
          "baseImageConnectorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheFrom" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cacheTo" : {
            "type" : "string"
          },
          "caching" : {
            "type" : "boolean"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "envDockerSecrets" : {
            "type" : "object"
          },
          "fileDockerSecrets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GetAppDetailsStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "hardRefresh" : {
            "type" : "boolean"
          },
          "applicationName" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "applicationsList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AgentApplicationTargets"
            }
          },
          "applicationRegex" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitCloneStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "build" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "repoName" : {
            "type" : "string"
          },
          "build" : {
            "$ref" : "#/definitions/Build"
          },
          "projectName" : {
            "type" : "string"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "depth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sslVerify" : {
            "type" : "boolean"
          },
          "cloneDirectory" : {
            "type" : "string"
          },
          "outputFilePathsContent" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "lfs" : {
            "type" : "boolean"
          },
          "debug" : {
            "type" : "boolean"
          },
          "fetchTags" : {
            "type" : "boolean"
          },
          "sparseCheckout" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "submoduleStrategy" : {
            "type" : "string",
            "enum" : [ "true", "false", "recursive" ]
          },
          "preFetchCommand" : {
            "type" : "string"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitCloneStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "depth" : {
            "$ref" : "#/definitions/ParameterFieldInteger"
          },
          "insecure" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "lfs" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "strategy" : {
            "type" : "string",
            "enum" : [ "source-branch", "merge" ]
          },
          "submodules" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "tags" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "trace" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "ref" : {
            "$ref" : "#/definitions/ParameterFieldCloneRef"
          },
          "repo" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "connector" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "clonedir" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "runAsUser" : {
            "$ref" : "#/definitions/ParameterFieldInteger"
          },
          "connectorRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "version" : {
            "type" : "string"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          }
        }
      } ]
    },
    "GoogleCloudFunctionDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object",
        "properties" : {
          "environmentType" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "preExecution" : {
            "type" : "string"
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "GoogleCloudRunDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "GoogleCloudRunJobStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "preExecution" : {
            "type" : "string"
          },
          "commandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "GoogleCloudRunPrepareRollbackDataStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "preExecution" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "preExecution" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunServiceRevisionMetadata" : {
      "type" : "object",
      "properties" : {
        "revisionName" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "trafficValue" : {
          "$ref" : "#/definitions/ParameterFieldInteger"
        }
      }
    },
    "GoogleCloudRunTrafficShiftStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "preExecution" : {
            "type" : "string"
          },
          "revisionTrafficDetails" : {
            "$ref" : "#/definitions/ParameterFieldListGoogleCloudRunServiceRevisionMetadata"
          }
        }
      } ]
    },
    "GoogleFunctionsDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "updateFieldMask" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleFunctionsDeployWithoutTrafficStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "updateFieldMask" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleFunctionsGenOneDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "updateFieldMask" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleFunctionsGenOneRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "GoogleFunctionsRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "GoogleFunctionsTrafficShiftStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trafficPercent" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "HarnessFileStoreSource" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ShellScriptBaseSource"
      }, {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string"
          }
        }
      } ]
    },
    "HarnessForConfig" : {
      "type" : "object",
      "properties" : {
        "times" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "maxConcurrency" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "items" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "partitionSize" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "end" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "unit" : {
          "type" : "string",
          "enum" : [ "Percentage", "Count" ]
        },
        "nodeName" : {
          "type" : "string"
        }
      }
    },
    "HeaderSpec" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "matchType" : {
          "type" : "string",
          "enum" : [ "EXACT", "PREFIX", "REGEX" ]
        }
      }
    },
    "HelmBlueGreenStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ignoreReleaseHistFailStatus" : {
            "type" : "boolean"
          },
          "skipSteadyStateCheck" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "environmentVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "HelmBlueGreenSwapStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "environmentVariables" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          }
        }
      } ]
    },
    "HelmCanaryDeleteStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "environmentVariables" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          }
        }
      } ]
    },
    "HelmCanaryDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "instanceSelection" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ignoreReleaseHistFailStatus" : {
            "type" : "boolean"
          },
          "skipSteadyStateCheck" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "environmentVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "instanceSelection" : {
            "$ref" : "#/definitions/InstanceSelectionWrapper"
          }
        }
      } ]
    },
    "HelmDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ignoreReleaseHistFailStatus" : {
            "type" : "boolean"
          },
          "skipSteadyStateCheck" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "environmentVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "HelmFileParameters" : {
      "type" : "object",
      "required" : [ "name", "path" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        }
      }
    },
    "HelmParameters" : {
      "type" : "object",
      "required" : [ "name", "value" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "HelmRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipSteadyStateCheck" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "environmentVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "HelmValues" : {
      "type" : "object",
      "properties" : {
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HelmParameters"
          }
        },
        "fileParameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HelmFileParameters"
          }
        },
        "valueFiles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "HostPathYaml" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CIVolume"
      }, {
        "type" : "object",
        "required" : [ "mountPath", "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "EmptyDir", "PersistentVolumeClaim", "HostPath" ]
          },
          "mountPath" : {
            "type" : "string"
          },
          "spec" : {
            "$ref" : "#/definitions/HostPathYamlSpec"
          }
        }
      } ]
    },
    "HostPathYamlSpec" : {
      "type" : "object",
      "required" : [ "path" ],
      "properties" : {
        "path" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "IgnoreFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Ignore" ]
          }
        }
      } ]
    },
    "InfraOverrides" : {
      "type" : "object",
      "properties" : {
        "environment" : {
          "$ref" : "#/definitions/EnvironmentYaml"
        },
        "infrastructureDefinition" : {
          "$ref" : "#/definitions/InfrastructureDef"
        }
      }
    },
    "InfraStructureDefinitionYaml" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "pattern" : "^(?=\\s*\\S).*$"
        },
        "inputs" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "InfraUseFromStage" : {
      "type" : "object",
      "required" : [ "stage" ],
      "properties" : {
        "stage" : {
          "type" : "string"
        },
        "overrides" : {
          "$ref" : "#/definitions/InfraOverrides"
        }
      }
    },
    "InfrastructureDef" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "KubernetesDirect", "KubernetesGcp", "KubernetesAzure", "Pdc", "SshWinRmAzure", "ServerlessAwsLambda", "AzureWebApp", "AzureFunction", "SshWinRmAws", "CustomDeployment", "ECS", "Elastigroup", "TAS", "Asg", "GoogleCloudFunctions", "AWS_SAM", "AwsLambda", "KubernetesAws", "KubernetesRancher", "GoogleCloudRun" ]
        },
        "spec" : {
          "$ref" : "#/definitions/Infrastructure"
        },
        "provisioner" : {
          "$ref" : "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "InheritK8sTrafficRouting" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRouting"
      }, {
        "type" : "object",
        "properties" : {
          "routes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sTrafficRoutingRouteInherit"
            }
          }
        }
      } ]
    },
    "InheritedCloudformationDeleteStackStepConfiguration" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationDeleteStackStepConfigurationSpec"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InjectStepNode" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionWrapperConfig"
          }
        },
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        }
      }
    },
    "InlineCloudformationDeleteStackStepConfiguration" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationDeleteStackStepConfigurationSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "region", "stackName" ],
        "properties" : {
          "stackName" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "roleArn" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InlineCloudformationTagsFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationTagsFileSpec"
      }, {
        "type" : "object",
        "required" : [ "content" ],
        "properties" : {
          "content" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InlineCloudformationTemplateFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationTemplateFileSpec"
      }, {
        "type" : "object",
        "required" : [ "templateBody" ],
        "properties" : {
          "templateBody" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InlineTerraformBackendConfigSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformBackendConfigSpec"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InlineTerraformVarFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformVarFileSpec"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InlineTerragruntBackendConfigSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerragruntBackendConfigSpec"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InlineTerragruntVarFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerragruntVarFileSpec"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InstanceSelectionBase" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "InstanceSelectionWrapper" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Count", "Percentage" ]
        },
        "spec" : {
          "$ref" : "#/definitions/InstanceSelectionBase"
        }
      }
    },
    "JUnitTestReport" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UnitTestReportSpec"
      }, {
        "type" : "object",
        "properties" : {
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "JenkinsBuildStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "jobName" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "jobName" : {
            "type" : "string"
          },
          "consoleLogPollFrequency" : {
            "type" : "string",
            "pattern" : "^(([1-9])+\\d+[s])|(([5-9])+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
          },
          "jobParameter" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/JenkinsParameterField"
            }
          },
          "unstableStatusAsSuccess" : {
            "type" : "boolean"
          },
          "useConnectorUrlForJobExecution" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "JenkinsParameterField" : {
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "String", "Number" ]
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "K8sApplyStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "skipDryRun" : {
            "type" : "boolean"
          },
          "skipSteadyStateCheck" : {
            "type" : "boolean"
          },
          "filePaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipRendering" : {
            "type" : "boolean"
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          },
          "overrides" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ManifestConfigWrapper"
            }
          },
          "manifestSource" : {
            "$ref" : "#/definitions/ManifestSourceWrapper"
          }
        }
      } ]
    },
    "K8sBGStageScaleDownStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deleteResources" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "K8sBGSwapServicesStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "K8sBlueGreenStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "skipDryRun" : {
            "type" : "boolean"
          },
          "pruningEnabled" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          },
          "skipUnchangedManifest" : {
            "type" : "boolean"
          },
          "trafficRouting" : {
            "$ref" : "#/definitions/DefaultK8sTrafficRouting"
          }
        }
      } ]
    },
    "K8sCanaryDeleteStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "K8sCanaryStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "instanceSelection" ],
        "properties" : {
          "instanceSelection" : {
            "$ref" : "#/definitions/InstanceSelectionWrapper"
          },
          "skipDryRun" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          },
          "trafficRouting" : {
            "$ref" : "#/definitions/DefaultK8sTrafficRouting"
          }
        }
      } ]
    },
    "K8sDeleteStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "deleteResources" ],
        "properties" : {
          "deleteResources" : {
            "$ref" : "#/definitions/DeleteResourcesWrapper"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "K8sDirectInfra" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepGroupInfra"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "KubernetesDirect", "Delegate", "Noop" ]
          },
          "spec" : {
            "$ref" : "#/definitions/ContainerInfraYamlSpec"
          }
        }
      } ]
    },
    "K8sDryRunManifestStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "encryptYamlOutput" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          }
        }
      } ]
    },
    "K8sPatchStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "mergeStrategyType", "workload" ],
        "properties" : {
          "workload" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "source" : {
            "$ref" : "#/definitions/ParameterFieldStoreConfigWrapper"
          },
          "recordChangeCause" : {
            "type" : "boolean"
          },
          "mergeStrategyType" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Merge", "Json", "Strategic" ]
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          },
          "skipSteadyStateCheck" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "K8sRollingRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "pruningEnabled" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          }
        }
      } ]
    },
    "K8sRollingStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "skipDryRun" : {
            "type" : "boolean"
          },
          "pruningEnabled" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          }
        }
      } ]
    },
    "K8sRollingStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "__uuid" : {
            "type" : "string",
            "readOnly" : true
          },
          "metadata" : {
            "type" : "string"
          },
          "skip_dry_run" : {
            "readOnly" : true,
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "prune" : {
            "readOnly" : true,
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "delegates" : {
            "$ref" : "#/definitions/ParameterFieldListTaskSelectorYaml"
          },
          "flags" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlagV1"
            }
          }
        }
      } ]
    },
    "K8sRolloutManifestPathSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sRolloutResourcesBaseSpec"
      }, {
        "type" : "object",
        "properties" : {
          "manifestPaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allManifestPaths" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "K8sRolloutReleaseNameSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sRolloutResourcesBaseSpec"
      }, {
        "type" : "object"
      } ]
    },
    "K8sRolloutResourceNameSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sRolloutResourcesBaseSpec"
      }, {
        "type" : "object",
        "required" : [ "resourceNames" ],
        "properties" : {
          "resourceNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "K8sRolloutResourceWrapper" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ResourceName", "ReleaseName", "ManifestPath" ]
        },
        "spec" : {
          "$ref" : "#/definitions/K8sRolloutResourcesBaseSpec"
        }
      }
    },
    "K8sRolloutResourcesBaseSpec" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "K8sRolloutStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "command", "resources" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sStepCommandFlag"
            }
          },
          "command" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/K8sRolloutResourceWrapper"
          }
        }
      } ]
    },
    "K8sScaleStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "instanceSelection", "workload" ],
        "properties" : {
          "instanceSelection" : {
            "$ref" : "#/definitions/InstanceSelectionWrapper"
          },
          "workload" : {
            "type" : "string"
          },
          "skipSteadyStateCheck" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "K8sStepCommandFlag" : {
      "type" : "object",
      "required" : [ "commandType" ],
      "properties" : {
        "commandType" : {
          "type" : "string",
          "enum" : [ "Apply", "Patch", "Rollout" ]
        },
        "flag" : {
          "type" : "string"
        }
      }
    },
    "K8sStepCommandFlagV1" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "apply" ]
        },
        "value" : {
          "$ref" : "#/definitions/ParameterFieldString"
        }
      }
    },
    "K8sTrafficRouting" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "K8sTrafficRoutingAuthorityRuleSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "matchType" : {
            "type" : "string",
            "enum" : [ "EXACT", "PREFIX", "REGEX" ]
          }
        }
      } ]
    },
    "K8sTrafficRoutingDestination" : {
      "type" : "object",
      "properties" : {
        "destination" : {
          "$ref" : "#/definitions/DestinationSpec"
        }
      }
    },
    "K8sTrafficRoutingHeaderRuleSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/HeaderSpec"
            }
          }
        }
      } ]
    },
    "K8sTrafficRoutingMethodRuleSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "enum" : [ "GET", "POST", "PUT", "DELETE", "HEAD", "CONNECT", "OPTION", "TRACE", "PATCH" ]
          },
          "matchType" : {
            "type" : "string",
            "enum" : [ "EXACT", "PREFIX", "REGEX" ]
          }
        }
      } ]
    },
    "K8sTrafficRoutingPortRuleSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "K8sTrafficRoutingProvider" : {
      "type" : "object",
      "discriminator" : "provider",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "routes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/K8sTrafficRoutingRoute"
          }
        }
      }
    },
    "K8sTrafficRoutingRoute" : {
      "type" : "object",
      "required" : [ "route" ],
      "properties" : {
        "route" : {
          "$ref" : "#/definitions/RouteSpec"
        }
      }
    },
    "K8sTrafficRoutingRouteInherit" : {
      "type" : "object",
      "required" : [ "route" ],
      "properties" : {
        "route" : {
          "$ref" : "#/definitions/RouteInheritSpec"
        }
      }
    },
    "K8sTrafficRoutingRule" : {
      "type" : "object",
      "properties" : {
        "rule" : {
          "$ref" : "#/definitions/Rule"
        }
      }
    },
    "K8sTrafficRoutingRuleSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "K8sTrafficRoutingSchemaRuleSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "matchType" : {
            "type" : "string",
            "enum" : [ "EXACT", "PREFIX", "REGEX" ]
          }
        }
      } ]
    },
    "K8sTrafficRoutingStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "trafficRouting", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "INHERIT", "CONFIG" ]
          },
          "trafficRouting" : {
            "$ref" : "#/definitions/K8sTrafficRouting"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "K8sTrafficRoutingURIRuleSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "matchType" : {
            "type" : "string",
            "enum" : [ "EXACT", "PREFIX", "REGEX" ]
          }
        }
      } ]
    },
    "KubernetesDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "KustomizeReplicas" : {
      "type" : "object",
      "required" : [ "count", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "count" : {
          "type" : "string"
        }
      }
    },
    "KustomizeValues" : {
      "type" : "object",
      "properties" : {
        "images" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "namespace" : {
          "type" : "string"
        },
        "replicas" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KustomizeReplicas"
          }
        },
        "namePrefix" : {
          "type" : "string"
        },
        "nameSuffix" : {
          "type" : "string"
        },
        "commonLabels" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "commonAnnotations" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "forceCommonLabels" : {
          "type" : "boolean"
        },
        "forceCommonAnnotations" : {
          "type" : "boolean"
        }
      }
    },
    "Limits" : {
      "type" : "object",
      "properties" : {
        "memory" : {
          "type" : "string"
        },
        "cpu" : {
          "type" : "string"
        }
      }
    },
    "LiquibaseCommandStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbInstance" : {
            "type" : "string"
          },
          "dbSchema" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "settings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "command" : {
            "type" : "string"
          },
          "excludeChangeLogFile" : {
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "string"
          }
        }
      } ]
    },
    "LoadBalancer" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AWSLoadBalancerConfig" ]
        },
        "spec" : {
          "$ref" : "#/definitions/LoadBalancerSpec"
        }
      }
    },
    "LoadBalancerSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AWSLoadBalancerConfig" ]
        }
      }
    },
    "ManifestSourceWrapper" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "K8sManifest" ]
        },
        "spec" : {
          "$ref" : "#/definitions/ManifestAttributes"
        }
      }
    },
    "ManualFailureSpecConfig" : {
      "type" : "object",
      "required" : [ "onTimeout", "timeout" ],
      "properties" : {
        "timeout" : {
          "type" : "string"
        },
        "onTimeout" : {
          "$ref" : "#/definitions/OnTimeoutConfig"
        }
      }
    },
    "ManualInterventionFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "spec" : {
            "readOnly" : true,
            "$ref" : "#/definitions/ManualFailureSpecConfig"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ManualIntervention" ]
          }
        }
      } ]
    },
    "MarkAsFailFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "MarkAsFailure" ]
          }
        }
      } ]
    },
    "MarkAsSuccessFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "MarkAsSuccess" ]
          }
        }
      } ]
    },
    "MatrixConfigInterface" : {
      "type" : "object"
    },
    "MergePRStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "deleteSourceBranch" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deleteSourceBranch" : {
            "type" : "boolean"
          },
          "disableGitRestraint" : {
            "type" : "boolean"
          },
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          }
        }
      } ]
    },
    "ModuleSource" : {
      "type" : "object",
      "required" : [ "useConnectorCredentials" ],
      "properties" : {
        "useConnectorCredentials" : {
          "$ref" : "#/definitions/ParameterFieldBoolean"
        }
      }
    },
    "Mount" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "type" : "string"
        },
        "target" : {
          "type" : "string"
        }
      }
    },
    "MultiDeploymentConfig" : {
      "type" : "object",
      "properties" : {
        "onFailure" : {
          "type" : "string",
          "enum" : [ "RunAll", "SkipQueued" ]
        },
        "when" : {
          "type" : "string",
          "pattern" : "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        }
      }
    },
    "NativeHelmDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "OnFailureConfig" : {
      "type" : "object",
      "required" : [ "action", "errors" ],
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "Unknown", "AllErrors", "Authentication", "Connectivity", "Timeout", "Authorization", "Verification", "DelegateProvisioning", "PolicyEvaluationFailure", "InputTimeoutError", "ApprovalRejection", "DelegateRestart", "UserMarkedFailure" ]
          }
        },
        "action" : {
          "$ref" : "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnRetryFailureConfig" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "$ref" : "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnTimeoutConfig" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "$ref" : "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "Output" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "alias" : {
          "type" : "string"
        },
        "mask" : {
          "type" : "boolean"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "pipeline", "stage" ]
        }
      }
    },
    "OutputNGVariable" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "PRBuildSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BuildSpec"
      }, {
        "type" : "object",
        "required" : [ "number" ],
        "properties" : {
          "number" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ParallelStepElementConfig" : {
      "type" : "object",
      "required" : [ "sections" ],
      "properties" : {
        "sections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ParameterFieldCloneRef" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "$ref" : "#/definitions/CloneRef"
        },
        "defaultValue" : {
          "$ref" : "#/definitions/CloneRef"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldInteger" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "integer",
          "format" : "int32"
        },
        "defaultValue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldJsonNode" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "defaultValue" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldListGoogleCloudRunServiceRevisionMetadata" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GoogleCloudRunServiceRevisionMetadata"
          }
        },
        "defaultValue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GoogleCloudRunServiceRevisionMetadata"
          }
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldListString" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldListTaskSelectorYaml" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskSelectorYaml"
          }
        },
        "defaultValue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskSelectorYaml"
          }
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldMapStringJsonNode" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "defaultValue" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldMapStringParameterFieldJsonNode" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ParameterFieldJsonNode"
          }
        },
        "defaultValue" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ParameterFieldJsonNode"
          }
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldMapStringString" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldMatrixConfigInterface" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "$ref" : "#/definitions/MatrixConfigInterface"
        },
        "defaultValue" : {
          "$ref" : "#/definitions/MatrixConfigInterface"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldPullPolicy" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "string",
          "enum" : [ "always", "never", "if-not-exists" ]
        },
        "defaultValue" : {
          "type" : "string",
          "enum" : [ "always", "never", "if-not-exists" ]
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldReport" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "$ref" : "#/definitions/Report"
        },
        "defaultValue" : {
          "$ref" : "#/definitions/Report"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldShell" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "string",
          "enum" : [ "sh", "bash", "powershell", "pwsh", "python" ]
        },
        "defaultValue" : {
          "type" : "string",
          "enum" : [ "sh", "bash", "powershell", "pwsh", "python" ]
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldStoreConfigWrapper" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "defaultValue" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "ParameterFieldTILanguage" : {
      "type" : "object",
      "properties" : {
        "expressionValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "string",
          "enum" : [ "Java", "Kotlin", "Scala", "Csharp", "Python", "Ruby" ]
        },
        "defaultValue" : {
          "type" : "string",
          "enum" : [ "Java", "Kotlin", "Scala", "Csharp", "Python", "Ruby" ]
        },
        "typeString" : {
          "type" : "boolean"
        },
        "inputSetValidator" : {
          "$ref" : "#/definitions/InputSetValidator"
        },
        "jsonResponseField" : {
          "type" : "boolean"
        },
        "responseField" : {
          "type" : "string"
        },
        "executionInput" : {
          "type" : "boolean"
        }
      }
    },
    "PercentageCapacitySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CapacitySpec"
      }, {
        "type" : "object",
        "required" : [ "percentage" ],
        "properties" : {
          "percentage" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 100
          }
        }
      } ]
    },
    "PercentageInstanceSelection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceSelectionBase"
      }, {
        "type" : "object",
        "properties" : {
          "percentage" : {
            "$ref" : "#/definitions/ParameterFieldString"
          }
        }
      } ]
    },
    "PersistentVolumeClaimYaml" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CIVolume"
      }, {
        "type" : "object",
        "required" : [ "mountPath", "spec", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "EmptyDir", "PersistentVolumeClaim", "HostPath" ]
          },
          "mountPath" : {
            "type" : "string"
          },
          "spec" : {
            "$ref" : "#/definitions/PersistentVolumeClaimYamlSpec"
          }
        }
      } ]
    },
    "PersistentVolumeClaimYamlSpec" : {
      "type" : "object",
      "required" : [ "claimName" ],
      "properties" : {
        "claimName" : {
          "type" : "string"
        },
        "readOnly" : {
          "type" : "boolean"
        }
      }
    },
    "PipelineInfrastructure" : {
      "type" : "object",
      "properties" : {
        "infrastructureDefinition" : {
          "$ref" : "#/definitions/InfrastructureDef"
        },
        "useFromStage" : {
          "$ref" : "#/definitions/InfraUseFromStage"
        },
        "environment" : {
          "$ref" : "#/definitions/EnvironmentYaml"
        },
        "allowSimultaneousDeployments" : {
          "type" : "boolean"
        },
        "infrastructureKey" : {
          "type" : "string"
        },
        "environmentRef" : {
          "type" : "string"
        }
      }
    },
    "PipelineRollbackFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "PipelineRollback" ]
          }
        }
      } ]
    },
    "PluginStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "settings" : {
            "$ref" : "#/definitions/ParameterFieldMapStringJsonNode"
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "uses" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "reports" : {
            "$ref" : "#/definitions/UnitTestReport"
          },
          "entrypoint" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PluginStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringJsonNode"
          },
          "image" : {
            "type" : "string"
          },
          "uses" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "user" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pull" : {
            "type" : "string",
            "enum" : [ "always", "never", "if-not-exists" ]
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PolicyConfig" : {
      "type" : "object",
      "required" : [ "policySets" ],
      "properties" : {
        "policySets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ProceedWithDefaultValues" ]
          }
        }
      } ]
    },
    "RemoteCloudformationTagsFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationTagsFileSpec"
      }, {
        "type" : "object",
        "required" : [ "store" ],
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "RemoteCloudformationTemplateFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationTemplateFileSpec"
      }, {
        "type" : "object",
        "required" : [ "store" ],
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "RemoteTerraformBackendConfigSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformBackendConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "store" ],
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "RemoteTerraformVarFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformVarFileSpec"
      }, {
        "type" : "object",
        "required" : [ "store" ],
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          },
          "optional" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "RemoteTerragruntBackendConfigSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerragruntBackendConfigSpec"
      }, {
        "type" : "object",
        "required" : [ "store" ],
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "RemoteTerragruntVarFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerragruntVarFileSpec"
      }, {
        "type" : "object",
        "required" : [ "store" ],
        "properties" : {
          "store" : {
            "$ref" : "#/definitions/StoreConfigWrapper"
          }
        }
      } ]
    },
    "Report" : {
      "type" : "object",
      "properties" : {
        "paths" : {
          "$ref" : "#/definitions/ParameterFieldListString"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "junit", "xunit", "numit" ]
        }
      }
    },
    "ResponseStageElementConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/StageElementConfig"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RestoreCacheGCSStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "bucket", "connectorRef", "key" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "key" : {
            "type" : "string"
          },
          "bucket" : {
            "type" : "string"
          },
          "sourcePaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "failIfKeyNotFound" : {
            "type" : "boolean"
          },
          "archiveFormat" : {
            "type" : "string",
            "enum" : [ "Tar", "Gzip" ]
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RestoreCacheS3StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "bucket", "connectorRef", "key" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "key" : {
            "type" : "string"
          },
          "bucket" : {
            "type" : "string"
          },
          "sourcePaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "region" : {
            "type" : "string"
          },
          "endpoint" : {
            "type" : "string"
          },
          "pathStyle" : {
            "type" : "boolean"
          },
          "failIfKeyNotFound" : {
            "type" : "boolean"
          },
          "archiveFormat" : {
            "type" : "string",
            "enum" : [ "Tar", "Gzip" ]
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RetryFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "spec" : {
            "readOnly" : true,
            "$ref" : "#/definitions/RetryFailureSpecConfig"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Retry" ]
          }
        }
      } ]
    },
    "RetryFailureSpecConfig" : {
      "type" : "object",
      "required" : [ "onRetryFailure", "retryCount", "retryIntervals" ],
      "properties" : {
        "retryCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "retryIntervals" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "onRetryFailure" : {
          "$ref" : "#/definitions/OnRetryFailureConfig"
        }
      }
    },
    "RetrySGFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "spec", "type" ],
        "properties" : {
          "spec" : {
            "readOnly" : true,
            "$ref" : "#/definitions/RetryStepGroupFailureSpecConfig"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "RetryStepGroup" ]
          }
        }
      } ]
    },
    "RetryStepGroupFailureSpecConfig" : {
      "type" : "object",
      "required" : [ "retryCount", "retryIntervals" ],
      "properties" : {
        "retryCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "retryIntervals" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        }
      }
    },
    "RevertPRStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "commitId" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commitId" : {
            "type" : "string"
          },
          "disableGitRestraint" : {
            "type" : "boolean"
          },
          "prTitle" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RollbackSchemaStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbInstance" : {
            "type" : "string"
          },
          "dbSchema" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RouteInheritSpec" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "destinations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/K8sTrafficRoutingDestination"
          }
        }
      }
    },
    "RouteSpec" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "destinations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/K8sTrafficRoutingDestination"
          }
        },
        "type" : {
          "type" : "string",
          "enum" : [ "HTTP" ]
        },
        "rules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/K8sTrafficRoutingRule"
          }
        }
      }
    },
    "Rule" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "URI", "SCHEME", "METHOD", "AUTHORITY", "HEADERS", "PORT" ]
        },
        "spec" : {
          "$ref" : "#/definitions/K8sTrafficRoutingRuleSpec"
        }
      }
    },
    "RunStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "command" : {
            "type" : "string"
          },
          "outputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OutputNGVariable"
            }
          },
          "reports" : {
            "$ref" : "#/definitions/UnitTestReport"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "Sh", "Bash", "Powershell", "Pwsh", "Python" ]
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RunStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "shell" : {
            "$ref" : "#/definitions/ParameterFieldShell"
          },
          "script" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "container" : {
            "$ref" : "#/definitions/Container"
          },
          "output" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Output"
            }
          },
          "report" : {
            "$ref" : "#/definitions/ParameterFieldReport"
          },
          "delegate" : {
            "$ref" : "#/definitions/ParameterFieldListTaskSelectorYaml"
          },
          "env" : {
            "$ref" : "#/definitions/ParameterFieldMapStringParameterFieldJsonNode"
          },
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringParameterFieldJsonNode"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RunTestStepV2Info" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "command" : {
            "type" : "string"
          },
          "outputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OutputNGVariable"
            }
          },
          "reports" : {
            "$ref" : "#/definitions/UnitTestReport"
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "Sh", "Bash", "Powershell", "Pwsh", "Python" ]
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "intelligenceMode" : {
            "type" : "boolean"
          },
          "globs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RunTestsStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "buildTool", "language" ],
        "properties" : {
          "args" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "Java", "Kotlin", "Scala", "Csharp", "Python", "Ruby" ]
          },
          "buildTool" : {
            "type" : "string",
            "enum" : [ "Maven", "Bazel", "Gradle", "Dotnet", "Nunitconsole", "SBT", "Pytest", "Unittest", "Rspec" ]
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "reports" : {
            "$ref" : "#/definitions/UnitTestReport"
          },
          "testAnnotations" : {
            "type" : "string"
          },
          "testRoot" : {
            "type" : "string"
          },
          "packages" : {
            "type" : "string"
          },
          "namespaces" : {
            "type" : "string"
          },
          "runOnlySelectedTests" : {
            "type" : "boolean"
          },
          "preCommand" : {
            "type" : "string"
          },
          "postCommand" : {
            "type" : "string"
          },
          "outputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OutputNGVariable"
            }
          },
          "envVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "buildEnvironment" : {
            "type" : "string",
            "enum" : [ "Core", "Framework" ]
          },
          "frameworkVersion" : {
            "type" : "string",
            "enum" : [ "5.0", "6.0" ]
          },
          "pythonVersion" : {
            "type" : "string",
            "enum" : [ "3", "2" ]
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "Sh", "Bash", "Powershell", "Pwsh", "Python" ]
          },
          "testSplitStrategy" : {
            "type" : "string",
            "enum" : [ "ClassTiming", "TestCount" ]
          },
          "enableTestSplitting" : {
            "type" : "boolean"
          },
          "testGlobs" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RunTestsStepInfoV1" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "shell" : {
            "$ref" : "#/definitions/ParameterFieldShell"
          },
          "script" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "match" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "container" : {
            "$ref" : "#/definitions/Container"
          },
          "output" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Output"
            }
          },
          "report" : {
            "$ref" : "#/definitions/ParameterFieldReport"
          },
          "delegate" : {
            "$ref" : "#/definitions/ParameterFieldListTaskSelectorYaml"
          },
          "env" : {
            "$ref" : "#/definitions/ParameterFieldMapStringParameterFieldJsonNode"
          },
          "with" : {
            "$ref" : "#/definitions/ParameterFieldMapStringParameterFieldJsonNode"
          },
          "intelligence" : {
            "$ref" : "#/definitions/TestIntelligence"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "S3UrlCloudformationTemplateFileSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CloudformationTemplateFileSpec"
      }, {
        "type" : "object",
        "required" : [ "templateUrl" ],
        "properties" : {
          "templateUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SaveCacheGCSStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "bucket", "connectorRef", "key", "sourcePaths" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "key" : {
            "type" : "string"
          },
          "bucket" : {
            "type" : "string"
          },
          "sourcePaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "override" : {
            "type" : "boolean"
          },
          "archiveFormat" : {
            "type" : "string",
            "enum" : [ "Tar", "Gzip" ]
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SaveCacheS3StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "bucket", "connectorRef", "key", "sourcePaths" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "key" : {
            "type" : "string"
          },
          "bucket" : {
            "type" : "string"
          },
          "sourcePaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "region" : {
            "type" : "string"
          },
          "endpoint" : {
            "type" : "string"
          },
          "pathStyle" : {
            "type" : "boolean"
          },
          "override" : {
            "type" : "boolean"
          },
          "archiveFormat" : {
            "type" : "string",
            "enum" : [ "Tar", "Gzip" ]
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ScriptCommandUnitSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommandUnitBaseSpec"
      }, {
        "type" : "object",
        "required" : [ "shell", "source" ],
        "properties" : {
          "shell" : {
            "type" : "string",
            "enum" : [ "Bash", "PowerShell" ]
          },
          "source" : {
            "$ref" : "#/definitions/ShellScriptSourceWrapper"
          },
          "tailFiles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TailFilePattern"
            }
          },
          "workingDirectory" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ScriptStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "run" ],
        "properties" : {
          "run" : {
            "type" : "string"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "envs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "user" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "sh", "bash", "powershell", "pwsh", "python" ]
          },
          "pull" : {
            "type" : "string",
            "enum" : [ "always", "never", "if-not-exists" ]
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SecurityContext" : {
      "type" : "object",
      "properties" : {
        "allowPrivilegeEscalation" : {
          "type" : "boolean"
        },
        "procMount" : {
          "type" : "string"
        },
        "privileged" : {
          "type" : "boolean"
        },
        "readOnlyRootFilesystem" : {
          "type" : "boolean"
        },
        "runAsNonRoot" : {
          "type" : "boolean"
        },
        "runAsGroup" : {
          "type" : "integer",
          "format" : "int32"
        },
        "runAsUser" : {
          "type" : "integer",
          "format" : "int32"
        },
        "capabilities" : {
          "$ref" : "#/definitions/Capabilities"
        }
      }
    },
    "SecurityStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "settings" : {
            "$ref" : "#/definitions/ParameterFieldMapStringJsonNode"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "imageTag" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "outputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OutputNGVariable"
            }
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "typeName" : {
            "type" : "string"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServerlessAwsLambdaDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandOptions" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServerlessAwsLambdaDeployV2StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "serverlessVersion" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          },
          "deployCommandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ServerlessAwsLambdaDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "ServerlessAwsLambdaPackageV2StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "serverlessVersion" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          },
          "packageCommandOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ServerlessAwsLambdaPrepareRollbackV2StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "serverlessVersion" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServerlessAwsLambdaRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ServerlessAwsLambdaRollbackV2StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "image" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "privileged" : {
            "type" : "boolean"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePullPolicy" : {
            "type" : "string",
            "enum" : [ "Always", "Never", "IfNotPresent" ]
          },
          "serverlessVersion" : {
            "type" : "string"
          },
          "preExecution" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServiceConfig" : {
      "type" : "object",
      "properties" : {
        "useFromStage" : {
          "$ref" : "#/definitions/ServiceUseFromStage"
        },
        "service" : {
          "$ref" : "#/definitions/ServiceYaml"
        },
        "serviceRef" : {
          "type" : "string"
        },
        "serviceDefinition" : {
          "$ref" : "#/definitions/ServiceDefinition"
        },
        "stageOverrides" : {
          "$ref" : "#/definitions/StageOverridesConfig"
        }
      }
    },
    "ServiceOverrideInputsYaml" : {
      "type" : "object",
      "required" : [ "serviceRef" ],
      "properties" : {
        "serviceRef" : {
          "type" : "string"
        },
        "serviceOverrideInputs" : {
          "$ref" : "#/definitions/JsonNode"
        }
      }
    },
    "ServiceOverrides" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "ServiceUseFromStage" : {
      "type" : "object",
      "required" : [ "stage" ],
      "properties" : {
        "stage" : {
          "type" : "string"
        },
        "overrides" : {
          "$ref" : "#/definitions/ServiceOverrides"
        },
        "metadata" : {
          "type" : "string"
        }
      }
    },
    "ServiceYaml" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ServiceYamlV2" : {
      "type" : "object",
      "properties" : {
        "serviceRef" : {
          "type" : "string",
          "pattern" : "^(?=\\s*\\S).*$"
        },
        "gitBranch" : {
          "type" : "string"
        },
        "useFromStage" : {
          "$ref" : "#/definitions/ServiceUseFromStageV2"
        },
        "serviceInputs" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        }
      }
    },
    "ServicesMetadata" : {
      "type" : "object",
      "properties" : {
        "parallel" : {
          "type" : "boolean"
        }
      }
    },
    "ServicesYaml" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceYamlV2"
          }
        },
        "useFromStage" : {
          "$ref" : "#/definitions/ServiceUseFromStageV2"
        },
        "metadata" : {
          "$ref" : "#/definitions/ServicesMetadata"
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        }
      }
    },
    "ShellScriptBaseSource" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "ShellScriptInlineSource" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ShellScriptBaseSource"
      }, {
        "type" : "object",
        "properties" : {
          "script" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ShellScriptProvisionStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "source" ],
        "properties" : {
          "source" : {
            "$ref" : "#/definitions/ShellScriptSourceWrapper"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "environmentVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          }
        }
      } ]
    },
    "ShellScriptSourceWrapper" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/ShellScriptBaseSource"
        }
      }
    },
    "Splitting" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "concurrency" : {
          "type" : "integer",
          "format" : "int32"
        },
        "strategy" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "class_timing", "test_count" ]
        }
      }
    },
    "SshDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "StageElementConfig" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "description" : {
          "type" : "string"
        },
        "when" : {
          "$ref" : "#/definitions/StageWhenCondition"
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        },
        "delegateSelectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string"
        },
        "template" : {
          "$ref" : "#/definitions/TemplateLinkConfig"
        },
        "timeout" : {
          "type" : "string",
          "pattern" : "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "skipInstances" : {
          "type" : "boolean"
        },
        "strategy" : {
          "$ref" : "#/definitions/StrategyConfig"
        },
        "spec" : {
          "$ref" : "#/definitions/StageInfoConfig"
        }
      }
    },
    "StageInfoConfig" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "execution" : {
          "$ref" : "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "StageOverridesConfig" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "artifacts" : {
          "$ref" : "#/definitions/ArtifactListConfig"
        },
        "manifests" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManifestConfigWrapper"
          }
        },
        "configFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigFileWrapper"
          }
        }
      }
    },
    "StageRollbackFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "StageRollback" ]
          }
        }
      } ]
    },
    "StageWhenCondition" : {
      "type" : "object",
      "required" : [ "pipelineStatus" ],
      "properties" : {
        "pipelineStatus" : {
          "type" : "string",
          "enum" : [ "Success", "Failure", "All" ]
        },
        "condition" : {
          "type" : "string",
          "pattern" : "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        }
      }
    },
    "StepElementConfig" : {
      "type" : "object",
      "required" : [ "identifier", "name", "type" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "description" : {
          "type" : "string"
        },
        "timeout" : {
          "type" : "string",
          "pattern" : "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "enforce" : {
          "$ref" : "#/definitions/PolicyConfig"
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        },
        "when" : {
          "$ref" : "#/definitions/StepWhenCondition"
        },
        "type" : {
          "type" : "string"
        },
        "strategy" : {
          "$ref" : "#/definitions/StrategyConfig"
        },
        "spec" : {
          "$ref" : "#/definitions/StepSpecType"
        }
      }
    },
    "StepGroupElementConfig" : {
      "type" : "object",
      "required" : [ "identifier", "name" ],
      "properties" : {
        "stepGroupInfra" : {
          "$ref" : "#/definitions/StepGroupInfra"
        },
        "sharedPaths" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "identifier" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
        },
        "when" : {
          "$ref" : "#/definitions/StepWhenCondition"
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "template" : {
          "$ref" : "#/definitions/TemplateLinkConfig"
        },
        "failureStrategies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FailureStrategyConfig"
          }
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "delegateSelectors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "strategy" : {
          "$ref" : "#/definitions/StrategyConfig"
        }
      }
    },
    "StepGroupFailureActionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FailureStrategyActionConfig"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "StepGroupRollback" ]
          }
        }
      } ]
    },
    "StepGroupInfra" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "KubernetesDirect", "Delegate", "Noop" ]
        }
      }
    },
    "StepSpecType" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "StepWhenCondition" : {
      "type" : "object",
      "required" : [ "stageStatus" ],
      "properties" : {
        "stageStatus" : {
          "type" : "string",
          "enum" : [ "Success", "Failure", "All" ]
        },
        "condition" : {
          "type" : "string",
          "pattern" : "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        }
      }
    },
    "StrategyConfig" : {
      "type" : "object",
      "properties" : {
        "matrix" : {
          "$ref" : "#/definitions/ParameterFieldMatrixConfigInterface"
        },
        "repeat" : {
          "$ref" : "#/definitions/HarnessForConfig"
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "when" : {
          "type" : "string",
          "pattern" : "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "onFailure" : {
          "type" : "string",
          "enum" : [ "RunAll", "SkipQueued" ]
        }
      }
    },
    "SyncOptions" : {
      "type" : "object",
      "required" : [ "applyOutOfSyncOnly", "autoCreateNamespace", "prunePropagationPolicy", "pruneResourcesAtLast", "replaceResources", "skipSchemaValidation" ],
      "properties" : {
        "skipSchemaValidation" : {
          "type" : "boolean"
        },
        "autoCreateNamespace" : {
          "type" : "boolean"
        },
        "pruneResourcesAtLast" : {
          "type" : "boolean"
        },
        "applyOutOfSyncOnly" : {
          "type" : "boolean"
        },
        "replaceResources" : {
          "type" : "boolean"
        },
        "prunePropagationPolicy" : {
          "type" : "string",
          "enum" : [ "foreground", "background", "orphan" ]
        }
      }
    },
    "SyncRetryStrategy" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "baseBackoffDuration" : {
          "type" : "string"
        },
        "increaseBackoffByFactor" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        },
        "maxBackoffDuration" : {
          "type" : "string"
        }
      }
    },
    "SyncStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "applyOnly", "dryRun", "forceApply", "prune", "syncOptions", "waitTillHealthy" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "prune" : {
            "type" : "boolean"
          },
          "dryRun" : {
            "type" : "boolean"
          },
          "applyOnly" : {
            "type" : "boolean"
          },
          "forceApply" : {
            "type" : "boolean"
          },
          "waitTillHealthy" : {
            "type" : "boolean"
          },
          "applicationsList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AgentApplicationTargets"
            }
          },
          "applicationRegex" : {
            "type" : "string"
          },
          "syncOptions" : {
            "$ref" : "#/definitions/SyncOptions"
          },
          "retryStrategy" : {
            "$ref" : "#/definitions/SyncRetryStrategy"
          }
        }
      } ]
    },
    "TagBuildSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BuildSpec"
      }, {
        "type" : "object",
        "required" : [ "tag" ],
        "properties" : {
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TagsFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FilterSpec"
      }, {
        "type" : "object",
        "required" : [ "matchType", "tags" ],
        "properties" : {
          "matchType" : {
            "type" : "string",
            "enum" : [ "all", "any" ]
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TailFilePattern" : {
      "type" : "object",
      "properties" : {
        "tailFile" : {
          "$ref" : "#/definitions/ParameterFieldString"
        },
        "tailPattern" : {
          "$ref" : "#/definitions/ParameterFieldString"
        }
      }
    },
    "TasAppResizeStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "newAppInstances" ],
        "properties" : {
          "newAppInstances" : {
            "$ref" : "#/definitions/TasInstanceSelectionWrapper"
          },
          "oldAppInstances" : {
            "$ref" : "#/definitions/TasInstanceSelectionWrapper"
          },
          "ignoreInstanceCountManifest" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasBGAppSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "existingVersionToKeep", "tasInstanceCountType" ],
        "properties" : {
          "tempRoutes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tasInstanceCountType" : {
            "type" : "string",
            "enum" : [ "FromManifest", "MatchRunningInstances" ]
          },
          "existingVersionToKeep" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          },
          "additionalRoutes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasBasicAppSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "existingVersionToKeep", "tasInstanceCountType" ],
        "properties" : {
          "tasInstanceCountType" : {
            "type" : "string",
            "enum" : [ "FromManifest", "MatchRunningInstances" ]
          },
          "existingVersionToKeep" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          },
          "additionalRoutes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasCanaryAppSetupStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "existingVersionToKeep", "resizeStrategy", "tasInstanceCountType" ],
        "properties" : {
          "resizeStrategy" : {
            "type" : "string",
            "enum" : [ "UpScaleNewFirst", "DownScaleOldFirst" ]
          },
          "tasInstanceCountType" : {
            "type" : "string",
            "enum" : [ "FromManifest", "MatchRunningInstances" ]
          },
          "existingVersionToKeep" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          },
          "additionalRoutes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasCommandScript" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        }
      }
    },
    "TasCommandStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "script" ],
        "properties" : {
          "inputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "outputVariables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "script" : {
            "$ref" : "#/definitions/TasCommandScript"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasCountInstanceSelection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TasInstanceSelectionBase"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/ParameterFieldString"
          }
        }
      } ]
    },
    "TasDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "TasInstanceSelectionBase" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "TasInstanceSelectionWrapper" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Percentage", "Count" ]
        },
        "spec" : {
          "$ref" : "#/definitions/TasInstanceSelectionBase"
        }
      }
    },
    "TasPercentageInstanceSelection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TasInstanceSelectionBase"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/ParameterFieldString"
          }
        }
      } ]
    },
    "TasRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasRollingDeployStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "additionalRoutes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasRollingRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasRouteMappingStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "appName", "routeType", "routes" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "appName" : {
            "type" : "string"
          },
          "routeType" : {
            "type" : "string",
            "enum" : [ "Map", "UnMap" ]
          },
          "routes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TasSwapRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "upsizeInActiveApp" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "upsizeInActiveApp" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TasSwapRoutesStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "downSizeOldApplication" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "downSizeOldApplication" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TerraformApplyStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/TerraformStepConfiguration"
          },
          "cloudCliConfiguration" : {
            "$ref" : "#/definitions/TerraformCloudCliStepConfiguration"
          }
        }
      } ]
    },
    "TerraformBackendConfig" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/TerraformBackendConfigSpec"
        }
      }
    },
    "TerraformBackendConfigSpec" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "TerraformCliOptionFlag" : {
      "type" : "object",
      "required" : [ "commandType", "flag" ],
      "properties" : {
        "commandType" : {
          "type" : "string",
          "enum" : [ "INIT", "WORKSPACE", "REFRESH", "PLAN", "APPLY", "DESTROY" ]
        },
        "flag" : {
          "type" : "string"
        }
      }
    },
    "TerraformCloudApplySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TerraformCloudCliExecutionData" : {
      "type" : "object",
      "required" : [ "configFiles" ],
      "properties" : {
        "targets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "configFiles" : {
          "$ref" : "#/definitions/TerraformConfigFilesWrapper"
        },
        "varFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformVarFileWrapper"
          }
        },
        "backendConfig" : {
          "$ref" : "#/definitions/TerraformBackendConfig"
        }
      }
    },
    "TerraformCloudCliPlanExecutionData" : {
      "type" : "object",
      "required" : [ "command", "configFiles" ],
      "properties" : {
        "configFiles" : {
          "$ref" : "#/definitions/TerraformConfigFilesWrapper"
        },
        "varFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformVarFileWrapper"
          }
        },
        "backendConfig" : {
          "$ref" : "#/definitions/TerraformBackendConfig"
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "command" : {
          "type" : "string",
          "enum" : [ "Apply", "Destroy" ]
        },
        "commandFlags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformCliOptionFlag"
          }
        },
        "skipStateStorage" : {
          "type" : "boolean"
        }
      }
    },
    "TerraformCloudCliStepConfiguration" : {
      "type" : "object",
      "properties" : {
        "commandFlags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformCliOptionFlag"
          }
        },
        "encryptOutput" : {
          "$ref" : "#/definitions/TerraformEncryptOutput"
        },
        "skipStateStorage" : {
          "type" : "boolean"
        },
        "spec" : {
          "$ref" : "#/definitions/TerraformCloudCliExecutionData"
        }
      }
    },
    "TerraformCloudPlanAndApplySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "organization", "provisionerIdentifier", "workspace" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "workspace" : {
            "type" : "string"
          },
          "discardPendingRuns" : {
            "type" : "boolean"
          },
          "overridePolicies" : {
            "type" : "boolean"
          },
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TerraformCloudPlanAndDestroySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "organization", "provisionerIdentifier", "workspace" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "workspace" : {
            "type" : "string"
          },
          "discardPendingRuns" : {
            "type" : "boolean"
          },
          "overridePolicies" : {
            "type" : "boolean"
          },
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TerraformCloudPlanOnlySpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "discardPendingRuns", "organization", "provisionerIdentifier", "workspace" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "workspace" : {
            "type" : "string"
          },
          "discardPendingRuns" : {
            "type" : "boolean"
          },
          "exportTerraformPlanJson" : {
            "type" : "boolean"
          },
          "planType" : {
            "type" : "string",
            "enum" : [ "Apply", "Destroy" ]
          },
          "terraformVersion" : {
            "type" : "string"
          },
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TerraformCloudPlanSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "discardPendingRuns", "organization", "provisionerIdentifier", "workspace" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "connectorRef" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "workspace" : {
            "type" : "string"
          },
          "discardPendingRuns" : {
            "type" : "boolean"
          },
          "exportTerraformPlanJson" : {
            "type" : "boolean"
          },
          "planType" : {
            "type" : "string",
            "enum" : [ "Apply", "Destroy" ]
          },
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "TerraformCloudRefreshSpec" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "organization", "workspace" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "workspace" : {
            "type" : "string"
          },
          "discardPendingRuns" : {
            "type" : "boolean"
          },
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          }
        }
      } ]
    },
    "TerraformCloudRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "discardPendingRuns" : {
            "type" : "boolean"
          },
          "overridePolicies" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "runMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TerraformCloudRunExecutionSpec" : {
      "type" : "object",
      "discriminator" : "runType"
    },
    "TerraformCloudRunStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "runType", "spec" ],
        "properties" : {
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "runType" : {
            "type" : "string",
            "enum" : [ "RefreshState", "PlanOnly", "PlanAndApply", "PlanAndDestroy", "Plan", "Apply" ]
          },
          "spec" : {
            "$ref" : "#/definitions/TerraformCloudRunExecutionSpec"
          },
          "runMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TerraformConfigFilesWrapper" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "moduleSource" : {
          "$ref" : "#/definitions/ModuleSource"
        }
      }
    },
    "TerraformDestroyStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/TerraformStepConfiguration"
          },
          "cloudCliConfiguration" : {
            "$ref" : "#/definitions/TerraformCloudCliStepConfiguration"
          }
        }
      } ]
    },
    "TerraformEncryptOutput" : {
      "type" : "object",
      "required" : [ "outputSecretManagerRef" ],
      "properties" : {
        "outputSecretManagerRef" : {
          "type" : "string"
        }
      }
    },
    "TerraformExecutionData" : {
      "type" : "object",
      "required" : [ "configFiles" ],
      "properties" : {
        "workspace" : {
          "type" : "string"
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "configFiles" : {
          "$ref" : "#/definitions/TerraformConfigFilesWrapper"
        },
        "varFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformVarFileWrapper"
          }
        },
        "backendConfig" : {
          "$ref" : "#/definitions/TerraformBackendConfig"
        },
        "providerCredential" : {
          "$ref" : "#/definitions/TerraformProviderCredential"
        }
      }
    },
    "TerraformPlanExecutionData" : {
      "type" : "object",
      "required" : [ "command", "configFiles", "secretManagerRef" ],
      "properties" : {
        "workspace" : {
          "type" : "string"
        },
        "configFiles" : {
          "$ref" : "#/definitions/TerraformConfigFilesWrapper"
        },
        "varFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformVarFileWrapper"
          }
        },
        "backendConfig" : {
          "$ref" : "#/definitions/TerraformBackendConfig"
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "command" : {
          "type" : "string",
          "enum" : [ "Apply", "Destroy" ]
        },
        "secretManagerRef" : {
          "type" : "string"
        },
        "exportTerraformPlanJson" : {
          "type" : "boolean"
        },
        "exportTerraformHumanReadablePlan" : {
          "type" : "boolean"
        },
        "skipRefreshCommand" : {
          "type" : "boolean"
        },
        "commandFlags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformCliOptionFlag"
          }
        },
        "providerCredential" : {
          "$ref" : "#/definitions/TerraformProviderCredential"
        },
        "skipStateStorage" : {
          "type" : "boolean"
        },
        "storeTfPlanOnDelegate" : {
          "type" : "boolean"
        }
      }
    },
    "TerraformPlanStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "configuration" : {
            "$ref" : "#/definitions/TerraformPlanExecutionData"
          },
          "cloudCliConfiguration" : {
            "$ref" : "#/definitions/TerraformCloudCliPlanExecutionData"
          }
        }
      } ]
    },
    "TerraformProviderCredential" : {
      "type" : "object",
      "required" : [ "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Aws" ]
        },
        "spec" : {
          "$ref" : "#/definitions/TerraformProviderCredentialSpec"
        }
      }
    },
    "TerraformProviderCredentialSpec" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "TerraformRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipRefreshCommand" : {
            "type" : "boolean"
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TerraformCliOptionFlag"
            }
          }
        }
      } ]
    },
    "TerraformStepConfiguration" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "skipRefreshCommand" : {
          "type" : "boolean"
        },
        "commandFlags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerraformCliOptionFlag"
          }
        },
        "encryptOutput" : {
          "$ref" : "#/definitions/TerraformEncryptOutput"
        },
        "skipStateStorage" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "Inline", "InheritFromPlan", "InheritFromApply" ]
        },
        "spec" : {
          "$ref" : "#/definitions/TerraformExecutionData"
        }
      }
    },
    "TerraformVarFile" : {
      "type" : "object",
      "required" : [ "identifier", "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/TerraformVarFileSpec"
        }
      }
    },
    "TerraformVarFileSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "TerraformVarFileWrapper" : {
      "type" : "object",
      "required" : [ "varFile" ],
      "properties" : {
        "varFile" : {
          "$ref" : "#/definitions/TerraformVarFile"
        }
      }
    },
    "TerragruntApplyStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration", "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/TerragruntStepConfiguration"
          }
        }
      } ]
    },
    "TerragruntBackendConfig" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/TerragruntBackendConfigSpec"
        }
      }
    },
    "TerragruntBackendConfigSpec" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "TerragruntCliOptionFlag" : {
      "type" : "object",
      "required" : [ "commandType", "flag" ],
      "properties" : {
        "commandType" : {
          "type" : "string",
          "enum" : [ "INIT", "WORKSPACE", "PLAN", "APPLY", "DESTROY", "OUTPUT" ]
        },
        "flag" : {
          "type" : "string"
        }
      }
    },
    "TerragruntConfigFilesWrapper" : {
      "type" : "object",
      "required" : [ "store" ],
      "properties" : {
        "store" : {
          "$ref" : "#/definitions/StoreConfigWrapper"
        },
        "moduleSource" : {
          "$ref" : "#/definitions/ModuleSource"
        }
      }
    },
    "TerragruntDestroyStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration", "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "type" : "string"
          },
          "configuration" : {
            "$ref" : "#/definitions/TerragruntStepConfiguration"
          }
        }
      } ]
    },
    "TerragruntExecutionData" : {
      "type" : "object",
      "required" : [ "configFiles", "moduleConfig" ],
      "properties" : {
        "workspace" : {
          "type" : "string"
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "configFiles" : {
          "$ref" : "#/definitions/TerragruntConfigFilesWrapper"
        },
        "varFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerragruntVarFileWrapper"
          }
        },
        "backendConfig" : {
          "$ref" : "#/definitions/TerragruntBackendConfig"
        },
        "moduleConfig" : {
          "$ref" : "#/definitions/TerragruntModuleConfig"
        }
      }
    },
    "TerragruntModuleConfig" : {
      "type" : "object",
      "required" : [ "path", "terragruntRunType" ],
      "properties" : {
        "terragruntRunType" : {
          "type" : "string",
          "enum" : [ "RunAll", "RunModule" ]
        },
        "path" : {
          "type" : "string"
        }
      }
    },
    "TerragruntPlanExecutionData" : {
      "type" : "object",
      "required" : [ "command", "configFiles", "moduleConfig", "secretManagerRef" ],
      "properties" : {
        "workspace" : {
          "type" : "string"
        },
        "configFiles" : {
          "$ref" : "#/definitions/TerragruntConfigFilesWrapper"
        },
        "varFiles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerragruntVarFileWrapper"
          }
        },
        "backendConfig" : {
          "$ref" : "#/definitions/TerragruntBackendConfig"
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "environmentVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NGVariable"
          }
        },
        "command" : {
          "type" : "string",
          "enum" : [ "Apply", "Destroy" ]
        },
        "secretManagerRef" : {
          "type" : "string"
        },
        "exportTerragruntPlanJson" : {
          "type" : "boolean"
        },
        "moduleConfig" : {
          "$ref" : "#/definitions/TerragruntModuleConfig"
        },
        "commandFlags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerragruntCliOptionFlag"
          }
        }
      }
    },
    "TerragruntPlanStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "configuration", "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "configuration" : {
            "$ref" : "#/definitions/TerragruntPlanExecutionData"
          }
        }
      } ]
    },
    "TerragruntRollbackStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "provisionerIdentifier" ],
        "properties" : {
          "provisionerIdentifier" : {
            "type" : "string"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commandFlags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TerragruntCliOptionFlag"
            }
          }
        }
      } ]
    },
    "TerragruntStepConfiguration" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "commandFlags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TerragruntCliOptionFlag"
          }
        },
        "type" : {
          "type" : "string",
          "enum" : [ "Inline", "InheritFromPlan", "InheritFromApply" ]
        },
        "spec" : {
          "$ref" : "#/definitions/TerragruntExecutionData"
        }
      }
    },
    "TerragruntVarFile" : {
      "type" : "object",
      "required" : [ "identifier", "spec", "type" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "spec" : {
          "$ref" : "#/definitions/TerragruntVarFileSpec"
        }
      }
    },
    "TerragruntVarFileSpec" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        }
      }
    },
    "TerragruntVarFileWrapper" : {
      "type" : "object",
      "required" : [ "varFile" ],
      "properties" : {
        "varFile" : {
          "$ref" : "#/definitions/TerragruntVarFile"
        }
      }
    },
    "TestIntelligence" : {
      "type" : "object",
      "properties" : {
        "disabled" : {
          "$ref" : "#/definitions/ParameterFieldBoolean"
        }
      }
    },
    "TestStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "image" : {
            "type" : "string"
          },
          "uses" : {
            "type" : "string",
            "enum" : [ "maven", "bazel", "gradle", "dotnet", "nunit_console", "sbt", "pytest", "unittest", "rspec" ]
          },
          "with" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/JsonNode"
            }
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "envs" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "privileged" : {
            "type" : "boolean"
          },
          "user" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pull" : {
            "type" : "string",
            "enum" : [ "always", "never", "if-not-exists" ]
          },
          "shell" : {
            "type" : "string",
            "enum" : [ "sh", "bash", "powershell", "pwsh", "python" ]
          },
          "splitting" : {
            "$ref" : "#/definitions/Splitting"
          },
          "language" : {
            "$ref" : "#/definitions/ParameterFieldTILanguage"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Toleration" : {
      "type" : "object",
      "properties" : {
        "effect" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "operator" : {
          "type" : "string"
        },
        "tolerationSeconds" : {
          "type" : "integer",
          "format" : "int32"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "TrafficRoutingIstioProvider" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingProvider"
      }, {
        "type" : "object",
        "properties" : {
          "gateways" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "delegateService" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "TrafficRoutingSMIProvider" : {
      "allOf" : [ {
        "$ref" : "#/definitions/K8sTrafficRoutingProvider"
      }, {
        "type" : "object",
        "properties" : {
          "rootService" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UnitTestReport" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "JUnit" ]
        },
        "spec" : {
          "$ref" : "#/definitions/UnitTestReportSpec"
        }
      }
    },
    "UnitTestReportSpec" : {
      "type" : "object"
    },
    "UpdateGitOpsAppStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "agentId", "applicationName" ],
        "properties" : {
          "applicationName" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "targetRevision" : {
            "type" : "string"
          },
          "helm" : {
            "$ref" : "#/definitions/HelmValues"
          },
          "kustomize" : {
            "$ref" : "#/definitions/KustomizeValues"
          }
        }
      } ]
    },
    "UpdateReleaseRepoStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "properties" : {
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NGVariable"
            }
          },
          "stringMap" : {
            "$ref" : "#/definitions/ParameterFieldMapStringString"
          },
          "disableGitRestraint" : {
            "type" : "boolean"
          },
          "delegateSelectors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "prTitle" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UploadToArtifactoryStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "connectorRef", "sourcePath", "target" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "target" : {
            "type" : "string"
          },
          "sourcePath" : {
            "type" : "string"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UploadToGCSStepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "bucket", "connectorRef", "sourcePath" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "bucket" : {
            "type" : "string"
          },
          "sourcePath" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UploadToS3StepInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepSpecType"
      }, {
        "type" : "object",
        "required" : [ "bucket", "connectorRef", "region", "sourcePath" ],
        "properties" : {
          "connectorRef" : {
            "type" : "string"
          },
          "resources" : {
            "$ref" : "#/definitions/ContainerResource"
          },
          "endpoint" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "bucket" : {
            "type" : "string"
          },
          "sourcePath" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "runAsUser" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stripPrefix" : {
            "type" : "string"
          },
          "baseImageConnectorRefs" : {
            "$ref" : "#/definitions/ParameterFieldListString"
          },
          "connectorMandatory" : {
            "type" : "boolean"
          },
          "harregistryRef" : {
            "$ref" : "#/definitions/ParameterFieldString"
          },
          "privilegedV1" : {
            "$ref" : "#/definitions/ParameterFieldBoolean"
          },
          "version" : {
            "type" : "string"
          }
        }
      } ]
    },
    "WinrmDeploymentMetaData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentMetaData"
      }, {
        "type" : "object"
      } ]
    },
    "ResponseStepElementConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/StepElementConfig"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FeedbackFormDTO" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "score" : {
          "type" : "integer",
          "format" : "int32"
        },
        "suggestion" : {
          "type" : "string"
        }
      }
    },
    "CurrentOrUpcomingWindow" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "FreezeDetailedResponse" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "GLOBAL", "MANUAL" ]
        },
        "status" : {
          "type" : "string",
          "enum" : [ "Enabled", "Disabled" ]
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "windows" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeWindow"
          }
        },
        "currentOrUpcomingWindow" : {
          "$ref" : "#/definitions/CurrentOrUpcomingWindow"
        },
        "identifier" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "freezeScope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "FreezeWindow" : {
      "type" : "object",
      "required" : [ "startTime", "timeZone" ],
      "properties" : {
        "timeZone" : {
          "type" : "string"
        },
        "startTime" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "string"
        },
        "endTime" : {
          "type" : "string"
        },
        "recurrence" : {
          "$ref" : "#/definitions/Recurrence"
        }
      }
    },
    "Recurrence" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "spec" : {
          "$ref" : "#/definitions/RecurrenceSpec"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "Daily", "Weekly", "Monthly", "Yearly" ]
        }
      }
    },
    "RecurrenceSpec" : {
      "type" : "object",
      "properties" : {
        "until" : {
          "type" : "string"
        },
        "value" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 2,
          "maximum" : 11
        }
      }
    },
    "ResponseFreezeDetailedResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FreezeDetailedResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FreezeResponse" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "GLOBAL", "MANUAL" ]
        },
        "status" : {
          "type" : "string",
          "enum" : [ "Enabled", "Disabled" ]
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "windows" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeWindow"
          }
        },
        "identifier" : {
          "type" : "string"
        },
        "yaml" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "freezeScope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        }
      }
    },
    "ResponseFreezeResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FreezeResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FreezeBannerDetails" : {
      "type" : "object",
      "properties" : {
        "window" : {
          "$ref" : "#/definitions/CurrentOrUpcomingWindow"
        },
        "windows" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeWindow"
          }
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "freezeScope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "accountName" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        }
      }
    },
    "GlobalFreezeBannerDetailsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "activeOrUpcomingGlobalFreezes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeBannerDetails"
          }
        }
      }
    },
    "ResponseGlobalFreezeBannerDetailsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/GlobalFreezeBannerDetailsResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FreezeSummaryResponse" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "GLOBAL", "MANUAL" ]
        },
        "status" : {
          "type" : "string",
          "enum" : [ "Enabled", "Disabled" ]
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "windows" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeWindow"
          }
        },
        "currentOrUpcomingWindow" : {
          "$ref" : "#/definitions/CurrentOrUpcomingWindow"
        },
        "identifier" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "freezeScope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "yaml" : {
          "type" : "string"
        }
      }
    },
    "PageFreezeSummaryResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeSummaryResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageFreezeSummaryResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageFreezeSummaryResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FreezeFilterPropertiesDTO" : {
      "type" : "object",
      "properties" : {
        "freezeIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "sort" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "freezeStatus" : {
          "type" : "string",
          "enum" : [ "Enabled", "Disabled" ]
        },
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "searchTerm" : {
          "type" : "string"
        }
      }
    },
    "FrozenExecutionDetail" : {
      "type" : "object",
      "properties" : {
        "freeze" : {
          "$ref" : "#/definitions/FreezeSummaryResponse"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "FrozenExecutionDetails" : {
      "type" : "object",
      "properties" : {
        "freezeList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FrozenExecutionDetail"
          }
        }
      }
    },
    "ResponseFrozenExecutionDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FrozenExecutionDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FreezeErrorResponseDTO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "FreezeResponseWrapperDTO" : {
      "type" : "object",
      "properties" : {
        "noOfSuccess" : {
          "type" : "integer",
          "format" : "int32"
        },
        "noOfFailed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "successfulFreezeResponseDTOList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeResponse"
          }
        },
        "freezeErrorResponseDTOList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeErrorResponseDTO"
          }
        }
      }
    },
    "ResponseFreezeResponseWrapperDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/FreezeResponseWrapperDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "FreezeReference" : {
      "type" : "object",
      "properties" : {
        "freezeScope" : {
          "type" : "string",
          "enum" : [ "account", "org", "project", "unknown" ]
        },
        "identifier" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "GLOBAL", "MANUAL" ]
        }
      }
    },
    "ResponseShouldDisableDeploymentFreezeResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ShouldDisableDeploymentFreezeResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ShouldDisableDeploymentFreezeResponseDTO" : {
      "type" : "object",
      "properties" : {
        "shouldDisable" : {
          "type" : "boolean"
        },
        "freezeReferences" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FreezeReference"
          }
        }
      }
    },
    "ResponseJsonNode" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ClusterResponse" : {
      "type" : "object",
      "properties" : {
        "clusterRef" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "envRef" : {
          "type" : "string"
        },
        "linkedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
        },
        "name" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResponseClusterResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ClusterResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageClusterResponse" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClusterResponse"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageClusterResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageClusterResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ClusterRequest" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envRef" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
        }
      }
    },
    "ClusterFromGitops" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "scopeLevel" : {
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "PageClusterFromGitops" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClusterFromGitops"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageClusterFromGitops" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageClusterFromGitops"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ClusterBatchResponse" : {
      "type" : "object",
      "properties" : {
        "linked" : {
          "type" : "integer",
          "format" : "int64"
        },
        "unlinked" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseClusterBatchResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ClusterBatchResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ClusterBasicDTO" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
        }
      }
    },
    "ClusterBatchRequest" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envRef" : {
          "type" : "string"
        },
        "linkAllClusters" : {
          "type" : "boolean"
        },
        "unlinkAllClusters" : {
          "type" : "boolean"
        },
        "searchTerm" : {
          "type" : "string"
        },
        "clusters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClusterBasicDTO"
          }
        }
      }
    },
    "HarnessArtifactInstanceEnvMetadataDTO" : {
      "type" : "object",
      "properties" : {
        "registry" : {
          "type" : "string"
        },
        "artifact" : {
          "type" : "string"
        },
        "prodEnvCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "preProdEnvCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "HarnessArtifactInstanceEnvMetadataResponseDTO" : {
      "type" : "object",
      "properties" : {
        "instanceMetadata" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HarnessArtifactInstanceEnvMetadataDTO"
          }
        }
      }
    },
    "ResponseHarnessArtifactInstanceEnvMetadataResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/HarnessArtifactInstanceEnvMetadataResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "HarnessArtifactInstanceEnvMetadataRequestDTO" : {
      "type" : "object",
      "properties" : {
        "artifactsMetadata" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HarnessArtifactMetadata"
          }
        }
      }
    },
    "HarnessArtifactMetadata" : {
      "type" : "object",
      "properties" : {
        "registryIdentifier" : {
          "type" : "string"
        },
        "artifactIdentifier" : {
          "type" : "string"
        }
      }
    },
    "HarnessArtifactInstanceDetailDTO" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "envIdentifier" : {
          "type" : "string"
        },
        "infraName" : {
          "type" : "string"
        },
        "infraIdentifier" : {
          "type" : "string"
        },
        "envType" : {
          "type" : "string"
        },
        "lastDeployedByName" : {
          "type" : "string"
        },
        "lastDeployedById" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "string"
        },
        "lastPipelineExecutionName" : {
          "type" : "string"
        },
        "lastPipelineExecutionId" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "HarnessArtifactInstanceDetailResponseDTO" : {
      "type" : "object",
      "properties" : {
        "instanceDetail" : {
          "$ref" : "#/definitions/HarnessArtifactInstanceDetailDTO"
        }
      }
    },
    "PageHarnessArtifactInstanceDetailResponseDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HarnessArtifactInstanceDetailResponseDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageHarnessArtifactInstanceDetailResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageHarnessArtifactInstanceDetailResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "K8sStepInstanceInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StepInstanceInfo"
      }, {
        "type" : "object",
        "properties" : {
          "podName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseListStepExecutionInstanceInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StepExecutionInstanceInfo"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StepExecutionInstanceInfo" : {
      "type" : "object",
      "required" : [ "deployedServiceInstances", "serviceInstancesAfter", "serviceInstancesBefore" ],
      "properties" : {
        "deployedServiceInstances" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StepInstanceInfo"
          }
        },
        "serviceInstancesBefore" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StepInstanceInfo"
          }
        },
        "serviceInstancesAfter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StepInstanceInfo"
          }
        }
      }
    },
    "StepInstanceInfo" : {
      "type" : "object",
      "discriminator" : "className",
      "properties" : {
        "instanceName" : {
          "type" : "string"
        }
      }
    },
    "HarnessServiceInfoNG" : {
      "type" : "object",
      "properties" : {
        "serviceId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envId" : {
          "type" : "string"
        },
        "infraMappingId" : {
          "type" : "string"
        }
      }
    },
    "ResponseOptionalHarnessServiceInfoNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/HarnessServiceInfoNG"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DuplicateInstanceStat" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "envIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "instanceKey" : {
          "type" : "string"
        },
        "count" : {
          "type" : "string"
        }
      }
    },
    "ResponseListDuplicateInstanceStat" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DuplicateInstanceStat"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DeleteInstancesRequest" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "boolean"
        },
        "deletedCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseDeleteInstancesRequest" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeleteInstancesRequest"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "GitOpsInstanceRequest" : {
      "type" : "object",
      "required" : [ "creationTimestamp", "instanceInfo", "lastDeployedAt" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "applicationIdentifier" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "envIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "buildId" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceInfo" : {
          "$ref" : "#/definitions/K8sBasicInfo"
        },
        "pipelineName" : {
          "type" : "string"
        },
        "lastExecutedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pipelineExecutionId" : {
          "type" : "string"
        },
        "lastDeployedByName" : {
          "type" : "string"
        },
        "lastDeployedById" : {
          "type" : "string"
        }
      }
    },
    "K8sBasicInfo" : {
      "type" : "object",
      "required" : [ "namespace", "podId", "podName" ],
      "properties" : {
        "namespace" : {
          "type" : "string"
        },
        "podName" : {
          "type" : "string"
        },
        "podId" : {
          "type" : "string"
        },
        "agentIdentifier" : {
          "type" : "string"
        },
        "clusterIdentifier" : {
          "type" : "string"
        },
        "containerList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/K8sContainer"
          }
        }
      }
    },
    "K8sContainer" : {
      "type" : "object",
      "properties" : {
        "containerId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "image" : {
          "type" : "string"
        },
        "imageId" : {
          "type" : "string"
        }
      }
    },
    "ContextElement" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "elementType" : {
          "type" : "string",
          "enum" : [ "SERVICE", "INFRAMAPPING", "SERVICE_TEMPLATE", "TAG", "SHELL", "HOST", "INSTANCE", "STANDARD", "PARAM", "PARTITION", "OTHER", "FORK", "CONTAINER_SERVICE", "CLUSTER", "AWS_LAMBDA_FUNCTION", "AMI_SERVICE_SETUP", "AMI_SERVICE_DEPLOY", "ECS_SERVICE_SETUP", "AMI_SWITCH_ROUTES", "PCF_SERVICE_SETUP", "PCF_SERVICE_DEPLOY", "PCF_ROUTE_SWAP_ROLLBACK", "PCF_INSTANCE", "SPOTINST_SERVICE_SETUP", "SPOTINST_SERVICE_DEPLOY", "ARTIFACT", "ARTIFACT_VARIABLE", "HELM_DEPLOY", "CLOUD_FORMATION_PROVISION", "CLOUD_FORMATION_ROLLBACK", "CLOUD_FORMATION_DEPROVISION", "TERRAFORM_PROVISION", "SHELL_SCRIPT_PROVISION", "K8S", "TERRAFORM_INHERIT_PLAN", "TERRAGRUNT_INHERIT_PLAN", "AZURE_VMSS_SETUP", "AZURE_WEBAPP_SETUP", "HELM_CHART", "MANIFEST_VARIABLE", "RANCHER_K8S_CLUSTER_CRITERIA" ]
        },
        "uuid" : {
          "type" : "string"
        }
      }
    },
    "DOMConfiguration" : {
      "type" : "object",
      "properties" : {
        "parameterNames" : {
          "$ref" : "#/definitions/DOMStringList"
        }
      }
    },
    "DOMImplementation" : {
      "type" : "object"
    },
    "DOMStringList" : {
      "type" : "object",
      "properties" : {
        "length" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "DelegateMetaInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "host_name" : {
          "type" : "string"
        }
      }
    },
    "DelegateResponseData" : {
      "type" : "object",
      "discriminator" : "@class"
    },
    "Document" : {
      "type" : "object",
      "properties" : {
        "doctype" : {
          "$ref" : "#/definitions/DocumentType"
        },
        "documentElement" : {
          "$ref" : "#/definitions/Element"
        },
        "inputEncoding" : {
          "type" : "string"
        },
        "xmlEncoding" : {
          "type" : "string"
        },
        "xmlStandalone" : {
          "type" : "boolean"
        },
        "xmlVersion" : {
          "type" : "string"
        },
        "strictErrorChecking" : {
          "type" : "boolean"
        },
        "documentURI" : {
          "type" : "string"
        },
        "domConfig" : {
          "$ref" : "#/definitions/DOMConfiguration"
        },
        "implementation" : {
          "$ref" : "#/definitions/DOMImplementation"
        },
        "attributes" : {
          "$ref" : "#/definitions/NamedNodeMap"
        },
        "localName" : {
          "type" : "string"
        },
        "nodeName" : {
          "type" : "string"
        },
        "nodeValue" : {
          "type" : "string"
        },
        "parentNode" : {
          "$ref" : "#/definitions/Node"
        },
        "childNodes" : {
          "$ref" : "#/definitions/NodeList"
        },
        "firstChild" : {
          "$ref" : "#/definitions/Node"
        },
        "lastChild" : {
          "$ref" : "#/definitions/Node"
        },
        "previousSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "nextSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "ownerDocument" : {
          "$ref" : "#/definitions/Document"
        },
        "baseURI" : {
          "type" : "string"
        },
        "textContent" : {
          "type" : "string"
        },
        "prefix" : {
          "type" : "string"
        },
        "nodeType" : {
          "type" : "integer",
          "format" : "int32"
        },
        "namespaceURI" : {
          "type" : "string"
        }
      }
    },
    "DocumentType" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "publicId" : {
          "type" : "string"
        },
        "systemId" : {
          "type" : "string"
        },
        "notations" : {
          "$ref" : "#/definitions/NamedNodeMap"
        },
        "internalSubset" : {
          "type" : "string"
        },
        "entities" : {
          "$ref" : "#/definitions/NamedNodeMap"
        },
        "attributes" : {
          "$ref" : "#/definitions/NamedNodeMap"
        },
        "localName" : {
          "type" : "string"
        },
        "nodeName" : {
          "type" : "string"
        },
        "nodeValue" : {
          "type" : "string"
        },
        "parentNode" : {
          "$ref" : "#/definitions/Node"
        },
        "childNodes" : {
          "$ref" : "#/definitions/NodeList"
        },
        "firstChild" : {
          "$ref" : "#/definitions/Node"
        },
        "lastChild" : {
          "$ref" : "#/definitions/Node"
        },
        "previousSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "nextSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "ownerDocument" : {
          "$ref" : "#/definitions/Document"
        },
        "baseURI" : {
          "type" : "string"
        },
        "textContent" : {
          "type" : "string"
        },
        "prefix" : {
          "type" : "string"
        },
        "nodeType" : {
          "type" : "integer",
          "format" : "int32"
        },
        "namespaceURI" : {
          "type" : "string"
        }
      }
    },
    "Element" : {
      "type" : "object",
      "properties" : {
        "schemaTypeInfo" : {
          "$ref" : "#/definitions/TypeInfo"
        },
        "tagName" : {
          "type" : "string"
        },
        "attributes" : {
          "$ref" : "#/definitions/NamedNodeMap"
        },
        "localName" : {
          "type" : "string"
        },
        "nodeName" : {
          "type" : "string"
        },
        "nodeValue" : {
          "type" : "string"
        },
        "parentNode" : {
          "$ref" : "#/definitions/Node"
        },
        "childNodes" : {
          "$ref" : "#/definitions/NodeList"
        },
        "firstChild" : {
          "$ref" : "#/definitions/Node"
        },
        "lastChild" : {
          "$ref" : "#/definitions/Node"
        },
        "previousSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "nextSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "ownerDocument" : {
          "$ref" : "#/definitions/Document"
        },
        "baseURI" : {
          "type" : "string"
        },
        "textContent" : {
          "type" : "string"
        },
        "prefix" : {
          "type" : "string"
        },
        "nodeType" : {
          "type" : "integer",
          "format" : "int32"
        },
        "namespaceURI" : {
          "type" : "string"
        }
      }
    },
    "ExecutionDataValue" : {
      "type" : "object",
      "properties" : {
        "displayName" : {
          "type" : "string"
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "HttpStateExecutionData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DelegateResponseData"
      }, {
        "type" : "object",
        "properties" : {
          "httpUrl" : {
            "type" : "string"
          },
          "httpMethod" : {
            "type" : "string"
          },
          "httpResponseCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "httpResponseBody" : {
            "type" : "string"
          },
          "assertionStatement" : {
            "type" : "string"
          },
          "assertionStatus" : {
            "type" : "string"
          },
          "header" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/KeyValuePair"
            }
          },
          "useProxy" : {
            "type" : "boolean"
          },
          "warningMessage" : {
            "type" : "string"
          },
          "document" : {
            "$ref" : "#/definitions/Document"
          },
          "stateName" : {
            "type" : "string"
          },
          "stateType" : {
            "type" : "string"
          },
          "startTs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "endTs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ABORTED", "DISCONTINUING", "ERROR", "FAILED", "NEW", "PAUSED", "PAUSING", "QUEUED", "RESUMED", "RUNNING", "SCHEDULED", "STARTING", "SUCCESS", "WAITING", "SKIPPED", "ABORTING", "REJECTED", "EXPIRED", "PREPARING" ]
          },
          "errorMsg" : {
            "type" : "string"
          },
          "waitInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "element" : {
            "$ref" : "#/definitions/ContextElement"
          },
          "stateParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "delegateMetaInfo" : {
            "$ref" : "#/definitions/DelegateMetaInfo"
          },
          "templateVariable" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "executionSummary" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ExecutionDataValue"
            }
          },
          "executionDetails" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ExecutionDataValue"
            }
          }
        }
      } ]
    },
    "KeyValuePair" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "NamedNodeMap" : {
      "type" : "object",
      "properties" : {
        "length" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Node" : {
      "type" : "object",
      "properties" : {
        "attributes" : {
          "$ref" : "#/definitions/NamedNodeMap"
        },
        "localName" : {
          "type" : "string"
        },
        "nodeName" : {
          "type" : "string"
        },
        "nodeValue" : {
          "type" : "string"
        },
        "parentNode" : {
          "$ref" : "#/definitions/Node"
        },
        "childNodes" : {
          "$ref" : "#/definitions/NodeList"
        },
        "firstChild" : {
          "$ref" : "#/definitions/Node"
        },
        "lastChild" : {
          "$ref" : "#/definitions/Node"
        },
        "previousSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "nextSibling" : {
          "$ref" : "#/definitions/Node"
        },
        "ownerDocument" : {
          "$ref" : "#/definitions/Document"
        },
        "baseURI" : {
          "type" : "string"
        },
        "textContent" : {
          "type" : "string"
        },
        "prefix" : {
          "type" : "string"
        },
        "nodeType" : {
          "type" : "integer",
          "format" : "int32"
        },
        "namespaceURI" : {
          "type" : "string"
        }
      }
    },
    "NodeList" : {
      "type" : "object",
      "properties" : {
        "length" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ScriptStateExecutionData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DelegateResponseData"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "activityId" : {
            "type" : "string"
          },
          "sweepingOutputEnvVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "secretOutputVars" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "stateName" : {
            "type" : "string"
          },
          "stateType" : {
            "type" : "string"
          },
          "startTs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "endTs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ABORTED", "DISCONTINUING", "ERROR", "FAILED", "NEW", "PAUSED", "PAUSING", "QUEUED", "RESUMED", "RUNNING", "SCHEDULED", "STARTING", "SUCCESS", "WAITING", "SKIPPED", "ABORTING", "REJECTED", "EXPIRED", "PREPARING" ]
          },
          "errorMsg" : {
            "type" : "string"
          },
          "waitInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "element" : {
            "$ref" : "#/definitions/ContextElement"
          },
          "stateParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "delegateMetaInfo" : {
            "$ref" : "#/definitions/DelegateMetaInfo"
          },
          "templateVariable" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "executionSummary" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ExecutionDataValue"
            }
          },
          "executionDetails" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ExecutionDataValue"
            }
          }
        }
      } ]
    },
    "TypeInfo" : {
      "type" : "object",
      "properties" : {
        "typeName" : {
          "type" : "string"
        },
        "typeNamespace" : {
          "type" : "string"
        }
      }
    },
    "InstanceSyncResponseV2" : {
      "type" : "object"
    },
    "InvalidPerpetualTaskResponse" : {
      "type" : "object",
      "properties" : {
        "perpetualTaskId" : {
          "type" : "string"
        },
        "reasonForBeingMarkedAsInvalid" : {
          "type" : "string"
        }
      }
    },
    "DeploymentDetails" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "DeploymentReleaseDetails" : {
      "type" : "object",
      "properties" : {
        "taskInfoId" : {
          "type" : "string"
        },
        "deploymentDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentDetails"
          }
        },
        "deploymentType" : {
          "type" : "string"
        }
      }
    },
    "HelmChartInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "repoUrl" : {
          "type" : "string"
        },
        "subChartPath" : {
          "type" : "string"
        }
      }
    },
    "InstanceSyncTaskDetails" : {
      "type" : "object",
      "properties" : {
        "details" : {
          "$ref" : "#/definitions/PageDeploymentReleaseDetails"
        },
        "responseBatchConfig" : {
          "$ref" : "#/definitions/ResponseBatchConfig"
        }
      }
    },
    "K8sDeploymentReleaseDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentDetails"
      }, {
        "type" : "object",
        "properties" : {
          "releaseName" : {
            "type" : "string"
          },
          "namespaces" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "k8sCloudClusterConfig" : {
            "$ref" : "#/definitions/KubernetesCloudClusterConfig"
          },
          "helmChartInfo" : {
            "$ref" : "#/definitions/HelmChartInfo"
          }
        }
      } ]
    },
    "KubernetesCloudClusterConfig" : {
      "type" : "object",
      "properties" : {
        "clusterName" : {
          "type" : "string"
        },
        "endpoint" : {
          "type" : "string"
        },
        "caCertData" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string"
        },
        "subscriptionId" : {
          "type" : "string"
        },
        "resourceGroup" : {
          "type" : "string"
        },
        "useClusterAdminCredentials" : {
          "type" : "boolean"
        },
        "addRegionalParam" : {
          "type" : "boolean"
        }
      }
    },
    "NativeHelmDeploymentReleaseDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DeploymentDetails"
      }, {
        "type" : "object",
        "properties" : {
          "releaseName" : {
            "type" : "string"
          },
          "namespaces" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "helmChartInfo" : {
            "$ref" : "#/definitions/HelmChartInfo"
          },
          "k8sCloudClusterConfig" : {
            "$ref" : "#/definitions/KubernetesCloudClusterConfig"
          },
          "helmVersion" : {
            "type" : "string"
          },
          "workloadLabelSelectors" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      } ]
    },
    "PageDeploymentReleaseDetails" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentReleaseDetails"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponseBatchConfig" : {
      "type" : "object",
      "properties" : {
        "instanceCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "releaseCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseInstanceSyncTaskDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceSyncTaskDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "JiraFieldAllowedValueNG" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "JiraFieldNG" : {
      "type" : "object",
      "required" : [ "allowedValues", "key", "name", "schema" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "required" : {
          "type" : "boolean"
        },
        "schema" : {
          "$ref" : "#/definitions/JiraFieldSchemaNG"
        },
        "allowedValues" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JiraFieldAllowedValueNG"
          }
        },
        "custom" : {
          "type" : "boolean"
        }
      }
    },
    "JiraFieldSchemaNG" : {
      "type" : "object",
      "required" : [ "type", "typeStr" ],
      "properties" : {
        "array" : {
          "type" : "boolean"
        },
        "typeStr" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "string", "number", "date", "datetime", "timetracking", "option", "user", "issuelink", "issuetype" ]
        },
        "customType" : {
          "type" : "string"
        }
      }
    },
    "JiraIssueCreateMetadataNG" : {
      "type" : "object",
      "properties" : {
        "projects" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JiraProjectNG"
          }
        }
      }
    },
    "JiraIssueTypeNG" : {
      "type" : "object",
      "required" : [ "fields", "id", "name", "statuses" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "statuses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JiraStatusNG"
          }
        },
        "fields" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JiraFieldNG"
          }
        },
        "subTask" : {
          "type" : "boolean"
        }
      }
    },
    "JiraProjectNG" : {
      "type" : "object",
      "required" : [ "id", "issuetypes", "key", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "issuetypes" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JiraIssueTypeNG"
          }
        }
      }
    },
    "JiraStatusCategoryNG" : {
      "type" : "object",
      "required" : [ "id", "key", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "JiraStatusNG" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "statusCategory" : {
          "$ref" : "#/definitions/JiraStatusCategoryNG"
        }
      }
    },
    "ResponseJiraIssueCreateMetadataNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/JiraIssueCreateMetadataNG"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "JiraIssueUpdateMetadataNG" : {
      "type" : "object",
      "required" : [ "fields" ],
      "properties" : {
        "fields" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JiraFieldNG"
          }
        }
      }
    },
    "ResponseJiraIssueUpdateMetadataNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/JiraIssueUpdateMetadataNG"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "JiraIssueTransitionNG" : {
      "type" : "object",
      "required" : [ "id", "name", "to" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "to" : {
          "$ref" : "#/definitions/JiraStatusNG"
        },
        "available" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListJiraIssueTransitionNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JiraIssueTransitionNG"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "JiraUserData" : {
      "type" : "object",
      "properties" : {
        "accountId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "emailAddress" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListJiraUserData" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JiraUserData"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "JiraProjectBasicNG" : {
      "type" : "object",
      "required" : [ "id", "key", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseListJiraProjectBasicNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JiraProjectBasicNG"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListJiraStatusNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JiraStatusNG"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OauthAccessTokenResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accessTokenRef" : {
          "type" : "string"
        },
        "refreshTokenRef" : {
          "type" : "string"
        }
      }
    },
    "RestResponseOauthAccessTokenResponseDTO" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/OauthAccessTokenResponseDTO"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "OauthAccessTokenDTO" : {
      "type" : "object",
      "properties" : {
        "accessToken" : {
          "type" : "string"
        },
        "refreshToken" : {
          "type" : "string"
        },
        "userDetailsDTO" : {
          "$ref" : "#/definitions/UserDetailsDTO"
        }
      }
    },
    "UserDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "userEmail" : {
          "type" : "string"
        }
      }
    },
    "OAuthAccessTokenApiResponse" : {
      "type" : "object",
      "properties" : {
        "accessTokenRef" : {
          "type" : "string"
        },
        "refreshTokenRef" : {
          "type" : "string"
        }
      }
    },
    "RestResponseOAuthAccessTokenApiResponse" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/OAuthAccessTokenApiResponse"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "OAuthCreateTokenAPIRequest" : {
      "type" : "object",
      "properties" : {
        "hostDomain" : {
          "type" : "string"
        },
        "providerIdentifier" : {
          "type" : "string"
        },
        "code" : {
          "type" : "string"
        },
        "userDetails" : {
          "$ref" : "#/definitions/UserDetailsRequest"
        },
        "privateSecret" : {
          "type" : "boolean"
        }
      }
    },
    "UserDetailsRequest" : {
      "type" : "object",
      "properties" : {
        "userEmail" : {
          "type" : "string"
        }
      }
    },
    "AuthorInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "DashboardWorkloadDeployment" : {
      "type" : "object",
      "properties" : {
        "workloadDeploymentInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkloadDeploymentInfo"
          }
        }
      }
    },
    "LastWorkloadInfo" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deploymentType" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "authorInfo" : {
          "$ref" : "#/definitions/AuthorInfo"
        },
        "triggerType" : {
          "type" : "string"
        }
      }
    },
    "ResponseDashboardWorkloadDeployment" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DashboardWorkloadDeployment"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "WorkloadCountInfo" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "WorkloadDateCountInfo" : {
      "type" : "object",
      "properties" : {
        "date" : {
          "type" : "integer",
          "format" : "int64"
        },
        "execution" : {
          "$ref" : "#/definitions/WorkloadCountInfo"
        }
      }
    },
    "WorkloadDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "lastExecuted" : {
          "$ref" : "#/definitions/LastWorkloadInfo"
        },
        "deploymentTypeList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeploymentChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "percentSuccess" : {
          "type" : "number",
          "format" : "double"
        },
        "rateSuccess" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "lastPipelineExecutionId" : {
          "type" : "string"
        },
        "workload" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkloadDateCountInfo"
          }
        }
      }
    },
    "CustomSequenceDTO" : {
      "type" : "object",
      "properties" : {
        "envAndEnvGroupCardList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvAndEnvGroupCard"
          }
        }
      }
    },
    "EnvAndEnvGroupCard" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "environmentTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "PreProduction", "Production" ]
          }
        },
        "envGroup" : {
          "type" : "boolean"
        },
        "new" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseCustomSequenceDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CustomSequenceDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceSequence" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceSequence"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceSequence" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "shouldUseCustomSequence" : {
          "type" : "boolean"
        },
        "customSequence" : {
          "$ref" : "#/definitions/CustomSequenceDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseSequenceToggleDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SequenceToggleDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SequenceToggleDTO" : {
      "type" : "object",
      "properties" : {
        "shouldUseCustomSequence" : {
          "type" : "boolean"
        },
        "nullCustomSequence" : {
          "type" : "boolean"
        }
      }
    },
    "Deployment" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "DeploymentDateAndCount" : {
      "type" : "object",
      "properties" : {
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deployments" : {
          "$ref" : "#/definitions/Deployment"
        }
      }
    },
    "DeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "rate" : {
          "type" : "number",
          "format" : "double"
        },
        "countList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentDateAndCount"
          }
        }
      }
    },
    "HealthDeploymentDashboard" : {
      "type" : "object",
      "properties" : {
        "healthDeploymentInfo" : {
          "$ref" : "#/definitions/HealthDeploymentInfo"
        }
      }
    },
    "HealthDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "total" : {
          "$ref" : "#/definitions/TotalDeploymentInfo"
        },
        "success" : {
          "$ref" : "#/definitions/DeploymentInfo"
        },
        "failure" : {
          "$ref" : "#/definitions/DeploymentInfo"
        },
        "active" : {
          "$ref" : "#/definitions/DeploymentInfo"
        }
      }
    },
    "ResponseHealthDeploymentDashboard" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/HealthDeploymentDashboard"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TotalDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "production" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nonProduction" : {
          "type" : "integer",
          "format" : "int64"
        },
        "rate" : {
          "type" : "number",
          "format" : "double"
        },
        "countList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentDateAndCount"
          }
        }
      }
    },
    "DeploymentsSummary" : {
      "type" : "object",
      "properties" : {
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "prod" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nonProd" : {
          "type" : "integer",
          "format" : "int64"
        },
        "total" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "DeploymentsSummaryInfo" : {
      "type" : "object",
      "properties" : {
        "deploymentsSummaries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentsSummary"
          }
        }
      }
    },
    "ResponseDeploymentsSummaryInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeploymentsSummaryInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DeploymentsSummaryPercentage" : {
      "type" : "object",
      "properties" : {
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "prod" : {
          "type" : "number",
          "format" : "double"
        },
        "nonProd" : {
          "type" : "number",
          "format" : "double"
        },
        "total" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "DeploymentsSummaryPercentageInfo" : {
      "type" : "object",
      "properties" : {
        "deploymentsSummaries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentsSummaryPercentage"
          }
        }
      }
    },
    "ResponseDeploymentsSummaryPercentageInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeploymentsSummaryPercentageInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ChangeRate" : {
      "type" : "object",
      "properties" : {
        "percentChange" : {
          "type" : "number",
          "format" : "double"
        },
        "trend" : {
          "type" : "string",
          "enum" : [ "UP_TREND", "DOWN_TREND", "NO_CHANGE", "INVALID" ]
        }
      }
    },
    "DeploymentInfoV2" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "rate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "countList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentDateAndCount"
          }
        }
      }
    },
    "HealthDeploymentDashboardV2" : {
      "type" : "object",
      "properties" : {
        "healthDeploymentInfo" : {
          "$ref" : "#/definitions/HealthDeploymentInfoV2"
        }
      }
    },
    "HealthDeploymentInfoV2" : {
      "type" : "object",
      "properties" : {
        "total" : {
          "$ref" : "#/definitions/TotalDeploymentInfoV2"
        },
        "success" : {
          "$ref" : "#/definitions/DeploymentInfoV2"
        },
        "failure" : {
          "$ref" : "#/definitions/DeploymentInfoV2"
        },
        "active" : {
          "$ref" : "#/definitions/DeploymentInfoV2"
        }
      }
    },
    "ResponseHealthDeploymentDashboardV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/HealthDeploymentDashboardV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TotalDeploymentInfoV2" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "production" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nonProduction" : {
          "type" : "integer",
          "format" : "int64"
        },
        "rate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "countList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentDateAndCount"
          }
        }
      }
    },
    "DeploymentChangeRates" : {
      "type" : "object",
      "properties" : {
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "DeploymentCount" : {
      "type" : "object",
      "properties" : {
        "total" : {
          "type" : "integer",
          "format" : "int64"
        },
        "success" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failure" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseServiceDeploymentInfoDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDeploymentInfoDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeployment" : {
      "type" : "object",
      "properties" : {
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deployments" : {
          "$ref" : "#/definitions/DeploymentCount"
        },
        "rate" : {
          "$ref" : "#/definitions/DeploymentChangeRates"
        }
      }
    },
    "ServiceDeploymentInfoDTO" : {
      "type" : "object",
      "properties" : {
        "serviceDeploymentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDeployment"
          }
        }
      }
    },
    "ResponseServiceDeploymentListInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDeploymentListInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeploymentListInfo" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "totalDeploymentsChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "serviceDeploymentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDeployment"
          }
        }
      }
    },
    "DeploymentChangeRatesV2" : {
      "type" : "object",
      "properties" : {
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        }
      }
    },
    "ResponseServiceDeploymentListInfoV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDeploymentListInfoV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeploymentListInfoV2" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "totalDeploymentsChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "frequencyChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "serviceDeploymentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDeploymentV2"
          }
        }
      }
    },
    "ServiceDeploymentV2" : {
      "type" : "object",
      "properties" : {
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deployments" : {
          "$ref" : "#/definitions/DeploymentCount"
        },
        "rate" : {
          "$ref" : "#/definitions/DeploymentChangeRatesV2"
        }
      }
    },
    "ExecutionDeployment" : {
      "type" : "object",
      "properties" : {
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deployments" : {
          "$ref" : "#/definitions/DeploymentCount"
        }
      }
    },
    "ExecutionDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "executionDeploymentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionDeployment"
          }
        }
      }
    },
    "ResponseExecutionDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ExecutionDeploymentInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "DashboardExecutionStatusInfo" : {
      "type" : "object",
      "properties" : {
        "failure" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStatusInfo"
          }
        },
        "pending" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStatusInfo"
          }
        },
        "active" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStatusInfo"
          }
        }
      }
    },
    "EnvironmentDeploymentsInfo" : {
      "type" : "object",
      "properties" : {
        "envId" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "envType" : {
          "type" : "string"
        },
        "infrastructureDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InfrastructureInfo"
          }
        }
      }
    },
    "ExecutionStatusInfo" : {
      "type" : "object",
      "properties" : {
        "pipelineName" : {
          "type" : "string"
        },
        "pipelineIdentifier" : {
          "type" : "string"
        },
        "startTs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string"
        },
        "planExecutionId" : {
          "type" : "string"
        },
        "gitInfo" : {
          "$ref" : "#/definitions/GitInfo"
        },
        "triggerType" : {
          "type" : "string"
        },
        "author" : {
          "$ref" : "#/definitions/AuthorInfo"
        },
        "serviceInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDeploymentInfo"
          }
        },
        "environmentInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentDeploymentsInfo"
          }
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "GitInfo" : {
      "type" : "object",
      "properties" : {
        "sourceBranch" : {
          "type" : "string"
        },
        "targetBranch" : {
          "type" : "string"
        },
        "commit" : {
          "type" : "string"
        },
        "commitID" : {
          "type" : "string"
        },
        "eventType" : {
          "type" : "string"
        },
        "repoName" : {
          "type" : "string"
        }
      }
    },
    "InfrastructureInfo" : {
      "type" : "object",
      "properties" : {
        "infrastructureIdentifier" : {
          "type" : "string"
        },
        "infrastructureName" : {
          "type" : "string"
        }
      }
    },
    "ResponseDashboardExecutionStatusInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DashboardExecutionStatusInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "serviceTag" : {
          "type" : "string"
        },
        "image" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        }
      }
    },
    "DashboardWorkloadDeploymentV2" : {
      "type" : "object",
      "properties" : {
        "workloadDeploymentInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkloadDeploymentInfoV2"
          }
        }
      }
    },
    "ResponseDashboardWorkloadDeploymentV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DashboardWorkloadDeploymentV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "WorkloadDeploymentInfoV2" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "lastExecuted" : {
          "$ref" : "#/definitions/LastWorkloadInfo"
        },
        "deploymentTypeList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeploymentChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "percentSuccess" : {
          "type" : "number",
          "format" : "double"
        },
        "rateSuccess" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "lastPipelineExecutionId" : {
          "type" : "string"
        },
        "workload" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkloadDateCountInfo"
          }
        }
      }
    },
    "IconDTO" : {
      "type" : "object",
      "properties" : {
        "deploymentType" : {
          "type" : "string"
        },
        "icon" : {
          "type" : "string"
        }
      }
    },
    "InstanceCountDetailsByEnvTypeBase" : {
      "type" : "object",
      "properties" : {
        "totalInstances" : {
          "type" : "integer",
          "format" : "int32"
        },
        "nonProdInstances" : {
          "type" : "integer",
          "format" : "int32"
        },
        "prodInstances" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseServiceDetailsInfoDTOV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDetailsInfoDTOV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDetailsDTOV2" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "deploymentTypeList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "deploymentIconList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/IconDTO"
          }
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeploymentChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "successRate" : {
          "type" : "number",
          "format" : "double"
        },
        "successRateChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "instanceCountDetails" : {
          "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeBase"
        },
        "lastPipelineExecuted" : {
          "$ref" : "#/definitions/ServicePipelineInfo"
        },
        "entityGitDetails" : {
          "$ref" : "#/definitions/EntityGitDetails"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "storeType" : {
          "type" : "string",
          "enum" : [ "INLINE", "REMOTE" ]
        },
        "fallbackBranch" : {
          "type" : "string"
        }
      }
    },
    "ServiceDetailsInfoDTOV2" : {
      "type" : "object",
      "properties" : {
        "serviceDeploymentDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDetailsDTOV2"
          }
        }
      }
    },
    "ServicePipelineInfo" : {
      "type" : "object",
      "properties" : {
        "pipelineExecutionId" : {
          "type" : "string"
        },
        "planExecutionId" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "deployedById" : {
          "type" : "string"
        },
        "deployedByName" : {
          "type" : "string"
        },
        "lastExecutedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PageServiceDetailsDTOV2" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDetailsDTOV2"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceDetailsDTOV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceDetailsDTOV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseInstanceGroupedByService" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceGroupedByService"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CountGroupedOnArtifact" : {
      "type" : "object",
      "properties" : {
        "artifactPath" : {
          "type" : "string"
        },
        "artifactVersion" : {
          "type" : "string"
        },
        "artifact" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "executionCountGroupedOnStatusList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CountGroupedOnStatus"
          }
        }
      }
    },
    "CountGroupedOnService" : {
      "type" : "object",
      "properties" : {
        "serviceReference" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "executionCountGroupedOnStatusList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CountGroupedOnStatus"
          }
        },
        "executionCountGroupedOnArtifactList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CountGroupedOnArtifact"
          }
        }
      }
    },
    "CountGroupedOnStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PipelineExecutionCountInfo" : {
      "type" : "object",
      "properties" : {
        "executionCountGroupedOnServiceList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CountGroupedOnService"
          }
        }
      }
    },
    "ResponsePipelineExecutionCountInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PipelineExecutionCountInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceDetailsInfoDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDetailsInfoDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "serviceIdentifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "deploymentTypeList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeploymentChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "successRate" : {
          "type" : "number",
          "format" : "double"
        },
        "successRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "frequencyChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "instanceCountDetails" : {
          "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeBase"
        },
        "lastPipelineExecuted" : {
          "$ref" : "#/definitions/ServicePipelineInfo"
        }
      }
    },
    "ServiceDetailsInfoDTO" : {
      "type" : "object",
      "properties" : {
        "serviceDeploymentDetailsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDetailsDTO"
          }
        }
      }
    },
    "ResponseTimeValuePairListDTOInteger" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TimeValuePairListDTOInteger"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TimeValuePair" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "TimeValuePairInteger" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "value" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "TimeValuePairListDTO" : {
      "type" : "object",
      "properties" : {
        "timeValuePairList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TimeValuePairObject"
          }
        }
      }
    },
    "TimeValuePairListDTOInteger" : {
      "type" : "object",
      "properties" : {
        "timeValuePairList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TimeValuePairInteger"
          }
        }
      }
    },
    "TimeValuePairObject" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "ResponseServiceGrowthTrendAndEnvBasedInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceGrowthTrendAndEnvBasedInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceGrowthTrendAndEnvBasedInfo" : {
      "type" : "object",
      "properties" : {
        "timeValuePairListDTO" : {
          "$ref" : "#/definitions/TimeValuePairListDTOInteger"
        },
        "totalServiceEntities" : {
          "type" : "integer",
          "format" : "int64"
        },
        "activeServiceInstancesCountBasedOnEnvironmentType" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    },
    "InstanceCountDetailsByEnvTypeAndServiceId" : {
      "type" : "object",
      "properties" : {
        "instanceCountDetailsByEnvTypeBaseMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeBase"
          }
        }
      }
    },
    "ResponseInstanceCountDetailsByEnvTypeAndServiceId" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeAndServiceId"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActiveServiceInstanceSummary" : {
      "type" : "object",
      "properties" : {
        "changeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "countDetails" : {
          "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeBase"
        }
      }
    },
    "ResponseActiveServiceInstanceSummary" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ActiveServiceInstanceSummary"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActiveServiceInstanceSummaryV2" : {
      "type" : "object",
      "properties" : {
        "changeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "countDetails" : {
          "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeBase"
        }
      }
    },
    "ResponseActiveServiceInstanceSummaryV2" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ActiveServiceInstanceSummaryV2"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ActiveServiceInstanceSummaryV3" : {
      "type" : "object",
      "properties" : {
        "changeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "countDetails" : {
          "$ref" : "#/definitions/InstanceCountDetailsByEnvTypeAndEnvId"
        }
      }
    },
    "InstanceCountDetailsByEnvTypeAndEnvId" : {
      "type" : "object",
      "properties" : {
        "envIdVsInstanceCountMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "totalInstances" : {
          "type" : "integer",
          "format" : "int32"
        },
        "nonProdInstances" : {
          "type" : "integer",
          "format" : "int32"
        },
        "prodInstances" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseActiveServiceInstanceSummaryV3" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ActiveServiceInstanceSummaryV3"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AsgInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "asgName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AsgInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "asgName", "asgNameWithoutSuffix", "infrastructureKey", "region" ],
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "infrastructureKey" : {
            "type" : "string"
          },
          "asgNameWithoutSuffix" : {
            "type" : "string"
          },
          "asgName" : {
            "type" : "string"
          },
          "instanceId" : {
            "type" : "string"
          },
          "executionStrategy" : {
            "type" : "string"
          },
          "production" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "AwsLambdaInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsLambdaInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "functionName", "region" ],
        "properties" : {
          "functionName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "source" : {
            "type" : "string"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "memorySize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "runTime" : {
            "type" : "string"
          },
          "infraStructureKey" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "aliases" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/definitions/Tag"
            }
          },
          "functionArn" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "handler" : {
            "type" : "string"
          },
          "artifactId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSamInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "functionName", "infraStructureKey", "region" ],
        "properties" : {
          "functionName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "memorySize" : {
            "type" : "string"
          },
          "handler" : {
            "type" : "string"
          },
          "runTime" : {
            "type" : "string"
          },
          "infraStructureKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AwsSshWinrmInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "host", "infrastructureKey", "serviceType" ],
        "properties" : {
          "serviceType" : {
            "type" : "string"
          },
          "infrastructureKey" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureFunctionInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "functionAppName", "resourceGroup", "slotName", "subscriptionId" ],
        "properties" : {
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "functionAppName" : {
            "type" : "string"
          },
          "slotName" : {
            "type" : "string"
          },
          "infraStructureKey" : {
            "type" : "string"
          },
          "functionName" : {
            "type" : "string"
          },
          "functionType" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureSshWinrmInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "host", "infrastructureKey", "serviceType" ],
        "properties" : {
          "serviceType" : {
            "type" : "string"
          },
          "infrastructureKey" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureWebAppInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AzureWebAppInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "appName", "deploySlot", "resourceGroup", "subscriptionId" ],
        "properties" : {
          "subscriptionId" : {
            "type" : "string"
          },
          "resourceGroup" : {
            "type" : "string"
          },
          "appName" : {
            "type" : "string"
          },
          "deploySlot" : {
            "type" : "string"
          },
          "appServicePlanId" : {
            "type" : "string"
          },
          "instanceType" : {
            "type" : "string"
          },
          "instanceName" : {
            "type" : "string"
          },
          "deploySlotId" : {
            "type" : "string"
          },
          "hostName" : {
            "type" : "string"
          },
          "instanceIp" : {
            "type" : "string"
          },
          "instanceState" : {
            "type" : "string"
          },
          "instanceId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CustomDeploymentInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "infrastructureKey", "instanceName" ],
        "properties" : {
          "instanceName" : {
            "type" : "string"
          },
          "infrastructureKey" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      } ]
    },
    "EcsContainer" : {
      "type" : "object",
      "properties" : {
        "containerArn" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "image" : {
          "type" : "string"
        },
        "runtimeId" : {
          "type" : "string"
        }
      }
    },
    "EcsInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "cluster" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EcsInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "clusterArn", "containers", "region", "serviceName", "taskArn", "taskDefinitionArn" ],
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "clusterArn" : {
            "type" : "string"
          },
          "taskArn" : {
            "type" : "string"
          },
          "taskDefinitionArn" : {
            "type" : "string"
          },
          "launchType" : {
            "type" : "string"
          },
          "serviceName" : {
            "type" : "string"
          },
          "containers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/EcsContainer"
            }
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "startedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "infraStructureKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GitOpsInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "containerList", "namespace", "podName" ],
        "properties" : {
          "namespace" : {
            "type" : "string"
          },
          "podName" : {
            "type" : "string"
          },
          "appIdentifier" : {
            "type" : "string"
          },
          "clusterIdentifier" : {
            "type" : "string"
          },
          "agentIdentifier" : {
            "type" : "string"
          },
          "podId" : {
            "type" : "string"
          },
          "containerList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sContainer"
            }
          }
        }
      } ]
    },
    "GoogleCloudRunInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleCloudRunInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "generatedInstanceId", "infrastructureKey", "project", "region", "revisionName", "serviceName", "status" ],
        "properties" : {
          "infrastructureKey" : {
            "type" : "string"
          },
          "serviceName" : {
            "type" : "string"
          },
          "revisionName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "generatedInstanceId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleFunctionInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "project" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          }
        }
      } ]
    },
    "GoogleFunctionInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "functionName", "project", "region", "revision" ],
        "properties" : {
          "revision" : {
            "type" : "string"
          },
          "functionName" : {
            "type" : "string"
          },
          "project" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "source" : {
            "type" : "string"
          },
          "updatedTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "memorySize" : {
            "type" : "string"
          },
          "runTime" : {
            "type" : "string"
          },
          "infraStructureKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InfrastructureDetails" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "InstanceDetailsByBuildId" : {
      "type" : "object",
      "properties" : {
        "buildId" : {
          "type" : "string"
        },
        "instances" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceDetailsDTO"
          }
        },
        "postExecutionRollbackIsAllowed" : {
          "type" : "boolean"
        }
      }
    },
    "InstanceDetailsDTO" : {
      "type" : "object",
      "properties" : {
        "podName" : {
          "type" : "string"
        },
        "artifactName" : {
          "type" : "string"
        },
        "connectorRef" : {
          "type" : "string"
        },
        "infrastructureDetails" : {
          "$ref" : "#/definitions/InfrastructureDetails"
        },
        "terraformInstance" : {
          "type" : "string"
        },
        "deployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deployedById" : {
          "type" : "string"
        },
        "deployedByName" : {
          "type" : "string"
        },
        "pipelineExecutionName" : {
          "type" : "string"
        },
        "instanceInfoDTO" : {
          "$ref" : "#/definitions/InstanceInfoDTO"
        },
        "infrastructureMappingId" : {
          "type" : "string"
        },
        "instanceKey" : {
          "type" : "string"
        },
        "rollbackStatus" : {
          "type" : "string",
          "enum" : [ "UNAVAILABLE", "NOT_STARTED", "STARTED", "SUCCESS", "FAILURE" ]
        }
      }
    },
    "InstanceInfoDTO" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "podName" : {
          "type" : "string"
        }
      }
    },
    "InstancesByBuildIdList" : {
      "type" : "object",
      "properties" : {
        "instancesByBuildIdList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceDetailsByBuildId"
          }
        }
      }
    },
    "K8sInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "namespace" : {
            "type" : "string"
          },
          "releaseName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "K8sInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "containerList", "namespace", "podName", "releaseName" ],
        "properties" : {
          "namespace" : {
            "type" : "string"
          },
          "releaseName" : {
            "type" : "string"
          },
          "podName" : {
            "type" : "string"
          },
          "podIP" : {
            "type" : "string"
          },
          "blueGreenColor" : {
            "type" : "string"
          },
          "containerList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sContainer"
            }
          },
          "helmChartInfo" : {
            "$ref" : "#/definitions/HelmChartInfo"
          },
          "canary" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "NativeHelmInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "podName" ],
        "properties" : {
          "podName" : {
            "type" : "string"
          },
          "ip" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string"
          },
          "releaseName" : {
            "type" : "string"
          },
          "helmChartInfo" : {
            "$ref" : "#/definitions/HelmChartInfo"
          },
          "helmVersion" : {
            "type" : "string",
            "enum" : [ "V2", "V3", "V380" ]
          },
          "containerList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/K8sContainer"
            }
          },
          "canary" : {
            "type" : "boolean"
          },
          "blueGreenColor" : {
            "type" : "string"
          }
        }
      } ]
    },
    "PdcInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "host", "infrastructureKey", "serviceType" ],
        "properties" : {
          "serviceType" : {
            "type" : "string"
          },
          "infrastructureKey" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ReferenceInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "properties" : {
          "namespace" : {
            "type" : "string"
          },
          "releaseName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResponseInstancesByBuildIdList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstancesByBuildIdList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServerlessAwsLambdaInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "stage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServerlessAwsLambdaInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "functionName", "region", "serviceName", "stage" ],
        "properties" : {
          "serviceName" : {
            "type" : "string"
          },
          "stage" : {
            "type" : "string"
          },
          "functionName" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "handler" : {
            "type" : "string"
          },
          "memorySize" : {
            "type" : "string"
          },
          "runTime" : {
            "type" : "string"
          },
          "timeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "infraStructureKey" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SpotInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "ec2InstanceId" : {
            "type" : "string"
          },
          "elastigroupId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SpotInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "ec2InstanceId", "elastigroupId", "infrastructureKey" ],
        "properties" : {
          "infrastructureKey" : {
            "type" : "string"
          },
          "ec2InstanceId" : {
            "type" : "string"
          },
          "elastigroupId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SshWinrmInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "TasInfrastructureDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InfrastructureDetails"
      }, {
        "type" : "object",
        "properties" : {
          "organization" : {
            "type" : "string"
          },
          "space" : {
            "type" : "string"
          },
          "tasApplicationName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TasInstanceInfoDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InstanceInfoDTO"
      }, {
        "type" : "object",
        "required" : [ "id", "organization", "space", "tasApplicationName" ],
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "space" : {
            "type" : "string"
          },
          "tasApplicationName" : {
            "type" : "string"
          },
          "tasApplicationGuid" : {
            "type" : "string"
          },
          "instanceIndex" : {
            "type" : "string"
          }
        }
      } ]
    },
    "EnvIdCountPair" : {
      "type" : "object",
      "properties" : {
        "envId" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseTimeValuePairListDTOEnvIdCountPair" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TimeValuePairListDTOEnvIdCountPair"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TimeValuePairEnvIdCountPair" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "value" : {
          "$ref" : "#/definitions/EnvIdCountPair"
        }
      }
    },
    "TimeValuePairListDTOEnvIdCountPair" : {
      "type" : "object",
      "properties" : {
        "timeValuePairList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TimeValuePairEnvIdCountPair"
          }
        }
      }
    },
    "DeploymentsInfo" : {
      "type" : "object",
      "properties" : {
        "deployments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStatusInfo"
          }
        }
      }
    },
    "ResponseDeploymentsInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeploymentsInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OrgDeployments" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectDeploymentsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProjectDeployments"
          }
        }
      }
    },
    "ProjectDeployments" : {
      "type" : "object",
      "properties" : {
        "projectIdentifier" : {
          "type" : "string"
        },
        "deployments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStatusInfo"
          }
        }
      }
    },
    "ResponseServiceDeployments" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDeployments"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeployments" : {
      "type" : "object",
      "properties" : {
        "orgDeploymentsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrgDeployments"
          }
        }
      }
    },
    "ResponseServiceHeaderInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceHeaderInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceHeaderInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "deploymentTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "deploymentIconList" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/IconDTO"
          }
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ArtifactDeploymentDetail" : {
      "type" : "object",
      "properties" : {
        "envName" : {
          "type" : "string"
        },
        "envId" : {
          "type" : "string"
        },
        "artifact" : {
          "type" : "string"
        },
        "chartVersion" : {
          "type" : "string"
        },
        "lastPipelineExecutionId" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pipelineId" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentGroupInstanceDetail" : {
      "type" : "object",
      "required" : [ "id", "isDrift", "isEnvGroup" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "environmentTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "PreProduction", "Production" ]
          }
        },
        "isEnvGroup" : {
          "type" : "boolean"
        },
        "isDrift" : {
          "type" : "boolean"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "artifactDeploymentDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactDeploymentDetail"
          }
        },
        "isRollback" : {
          "type" : "boolean"
        },
        "isRevert" : {
          "type" : "boolean"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentGroupInstanceDetails" : {
      "type" : "object",
      "required" : [ "environmentGroupInstanceDetails" ],
      "properties" : {
        "environmentGroupInstanceDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentGroupInstanceDetail"
          }
        }
      }
    },
    "ResponseEnvironmentGroupInstanceDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentGroupInstanceDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ArtifactInstanceDetail" : {
      "type" : "object",
      "required" : [ "environmentGroupInstanceDetails" ],
      "properties" : {
        "artifact" : {
          "type" : "string"
        },
        "environmentGroupInstanceDetails" : {
          "$ref" : "#/definitions/EnvironmentGroupInstanceDetails"
        }
      }
    },
    "ArtifactInstanceDetails" : {
      "type" : "object",
      "required" : [ "artifactInstanceDetails" ],
      "properties" : {
        "artifactInstanceDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ArtifactInstanceDetail"
          }
        }
      }
    },
    "ResponseArtifactInstanceDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ArtifactInstanceDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ChartVersionInstanceDetail" : {
      "type" : "object",
      "required" : [ "environmentGroupInstanceDetails" ],
      "properties" : {
        "chartVersion" : {
          "type" : "string"
        },
        "environmentGroupInstanceDetails" : {
          "$ref" : "#/definitions/EnvironmentGroupInstanceDetails"
        }
      }
    },
    "ChartVersionInstanceDetails" : {
      "type" : "object",
      "required" : [ "chartVersionInstanceDetails" ],
      "properties" : {
        "chartVersionInstanceDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChartVersionInstanceDetail"
          }
        }
      }
    },
    "ResponseChartVersionInstanceDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ChartVersionInstanceDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "OpenTaskDetails" : {
      "type" : "object",
      "properties" : {
        "pipelineDeploymentDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServicePipelineWithRevertInfo"
          }
        }
      }
    },
    "ResponseOpenTaskDetails" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/OpenTaskDetails"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServicePipelineWithRevertInfo" : {
      "type" : "object",
      "properties" : {
        "pipelineExecutionId" : {
          "type" : "string"
        },
        "planExecutionId" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "deployedById" : {
          "type" : "string"
        },
        "deployedByName" : {
          "type" : "string"
        },
        "lastExecutedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureDetail" : {
          "type" : "string"
        },
        "revertExecution" : {
          "type" : "boolean"
        }
      }
    },
    "BuildIdAndInstanceCount" : {
      "type" : "object",
      "properties" : {
        "buildId" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "EnvBuildIdAndInstanceCountInfo" : {
      "type" : "object",
      "properties" : {
        "envId" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "buildIdAndInstanceCountList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BuildIdAndInstanceCount"
          }
        }
      }
    },
    "EnvBuildIdAndInstanceCountInfoList" : {
      "type" : "object",
      "properties" : {
        "envBuildIdAndInstanceCountInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvBuildIdAndInstanceCountInfo"
          }
        }
      }
    },
    "ResponseEnvBuildIdAndInstanceCountInfoList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvBuildIdAndInstanceCountInfoList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InstanceGroupedByArtifact" : {
      "type" : "object",
      "required" : [ "instanceGroupedByChartVersionList" ],
      "properties" : {
        "artifact" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedByChartVersionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByChartVersion"
          }
        }
      }
    },
    "InstanceGroupedByChartVersion" : {
      "type" : "object",
      "properties" : {
        "instanceKey" : {
          "type" : "string"
        },
        "infrastructureMappingId" : {
          "type" : "string"
        },
        "chartVersion" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastPlanExecutionId" : {
          "type" : "string"
        },
        "stageNodeExecutionId" : {
          "type" : "string"
        },
        "pipelineIdentifier" : {
          "type" : "string"
        },
        "stageSetupId" : {
          "type" : "string"
        },
        "rollbackStatus" : {
          "type" : "string",
          "enum" : [ "UNAVAILABLE", "NOT_STARTED", "STARTED", "SUCCESS", "FAILURE" ]
        }
      }
    },
    "InstanceGroupedByEnvironment" : {
      "type" : "object",
      "required" : [ "envId", "instanceGroupedByEnvironmentTypeList" ],
      "properties" : {
        "envId" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "envGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "instanceGroupedByEnvironmentTypeList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByEnvironmentType"
          }
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        }
      }
    },
    "InstanceGroupedByEnvironmentList" : {
      "type" : "object",
      "required" : [ "instanceGroupedByEnvironmentList" ],
      "properties" : {
        "instanceGroupedByEnvironmentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByEnvironment"
          }
        }
      }
    },
    "InstanceGroupedByEnvironmentType" : {
      "type" : "object",
      "required" : [ "instanceGroupedByInfrastructureList" ],
      "properties" : {
        "environmentType" : {
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        },
        "instanceGroupedByInfrastructureList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByInfrastructure"
          }
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "InstanceGroupedByInfrastructure" : {
      "type" : "object",
      "required" : [ "instanceGroupedByArtifactList" ],
      "properties" : {
        "infrastructureId" : {
          "type" : "string"
        },
        "infrastructureName" : {
          "type" : "string"
        },
        "clusterId" : {
          "type" : "string"
        },
        "agentId" : {
          "type" : "string"
        },
        "instanceGroupedByArtifactList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedByArtifact"
          }
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseInstanceGroupedByEnvironmentList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceGroupedByEnvironmentList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InstanceGroupedOnArtifact" : {
      "type" : "object",
      "required" : [ "instanceGroupedOnChartVersionList" ],
      "properties" : {
        "artifact" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedOnChartVersionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedOnChartVersion"
          }
        }
      }
    },
    "InstanceGroupedOnArtifactList" : {
      "type" : "object",
      "required" : [ "instanceGroupedOnArtifactList" ],
      "properties" : {
        "instanceGroupedOnArtifactList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedOnArtifact"
          }
        }
      }
    },
    "InstanceGroupedOnChartVersion" : {
      "type" : "object",
      "properties" : {
        "chartVersion" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedOnEnvironmentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedOnEnvironment"
          }
        }
      }
    },
    "InstanceGroupedOnEnvironment" : {
      "type" : "object",
      "properties" : {
        "envId" : {
          "type" : "string"
        },
        "envName" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedOnEnvironmentTypeList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedOnEnvironmentType"
          }
        }
      }
    },
    "InstanceGroupedOnEnvironmentType" : {
      "type" : "object",
      "properties" : {
        "environmentType" : {
          "type" : "string",
          "enum" : [ "PreProduction", "Production" ]
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedOnInfrastructureList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedOnInfrastructure"
          }
        }
      }
    },
    "InstanceGroupedOnInfrastructure" : {
      "type" : "object",
      "properties" : {
        "infrastructureId" : {
          "type" : "string"
        },
        "infrastructureName" : {
          "type" : "string"
        },
        "clusterId" : {
          "type" : "string"
        },
        "agentId" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseInstanceGroupedOnArtifactList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceGroupedOnArtifactList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InstanceGroupByArtifact" : {
      "type" : "object",
      "properties" : {
        "artifact" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupedOnEnvironmentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupedOnEnvironment"
          }
        }
      }
    },
    "InstanceGroupByChartVersion" : {
      "type" : "object",
      "required" : [ "instanceGroupByArtifactList" ],
      "properties" : {
        "chartVersion" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceGroupByArtifactList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupByArtifact"
          }
        }
      }
    },
    "InstanceGroupedOnChartVersionList" : {
      "type" : "object",
      "required" : [ "instanceGroupByChartVersionList" ],
      "properties" : {
        "instanceGroupByChartVersionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupByChartVersion"
          }
        }
      }
    },
    "ResponseInstanceGroupedOnChartVersionList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceGroupedOnChartVersionList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseInstanceDetailsByBuildId" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceDetailsByBuildId"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InstanceDetailGroupedByPipelineExecution" : {
      "type" : "object",
      "required" : [ "instances", "pipelineId", "planExecutionId" ],
      "properties" : {
        "pipelineId" : {
          "type" : "string"
        },
        "planExecutionId" : {
          "type" : "string"
        },
        "lastDeployedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instances" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceDetailsDTO"
          }
        },
        "stageNodeExecutionId" : {
          "type" : "string"
        },
        "stageStatus" : {
          "type" : "string",
          "enum" : [ "NO_OP", "RUNNING", "INTERVENTION_WAITING", "TIMED_WAITING", "ASYNC_WAITING", "TASK_WAITING", "DISCONTINUING", "PAUSING", "QUEUED", "SKIPPED", "PAUSED", "ABORTED", "ERRORED", "FAILED", "EXPIRED", "SUSPENDED", "SUCCEEDED", "IGNORE_FAILED", "APPROVAL_WAITING", "RESOURCE_WAITING", "APPROVAL_REJECTED", "INPUT_WAITING", "WAIT_STEP_RUNNING", "FREEZE_FAILED", "QUEUED_LICENSE_LIMIT_REACHED", "QUEUED_EXECUTION_CONCURRENCY_REACHED", "QUEUED_STEP_LIMIT_REACHED", "STARTING_QUEUED_STEP", "UPLOAD_WAITING", "UNRECOGNIZED" ]
        },
        "stageSetupId" : {
          "type" : "string"
        },
        "rollbackStatus" : {
          "type" : "string",
          "enum" : [ "UNAVAILABLE", "NOT_STARTED", "STARTED", "SUCCESS", "FAILURE" ]
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "InstanceDetailGroupedByPipelineExecutionList" : {
      "type" : "object",
      "required" : [ "instanceDetailGroupedByPipelineExecutionList" ],
      "properties" : {
        "instanceDetailGroupedByPipelineExecutionList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceDetailGroupedByPipelineExecution"
          }
        }
      }
    },
    "ResponseInstanceDetailGroupedByPipelineExecutionList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InstanceDetailGroupedByPipelineExecutionList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "EnvironmentDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "environmentInfoByServiceId" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentInfoByServiceId"
          }
        }
      }
    },
    "EnvironmentInfoByServiceId" : {
      "type" : "object",
      "properties" : {
        "environmentName" : {
          "type" : "string"
        },
        "environmentId" : {
          "type" : "string"
        },
        "artifactImage" : {
          "type" : "string"
        },
        "tag" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "service_startTs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "service_endTs" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseEnvironmentDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvironmentDeploymentInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceDeploymentMetrics" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDeploymentMetrics"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeploymentMetrics" : {
      "type" : "object",
      "properties" : {
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "frequency" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "totalDeploymentsChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        },
        "frequencyChangeRate" : {
          "$ref" : "#/definitions/ChangeRate"
        }
      }
    },
    "ResponseServiceDeploymentsList" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceDeploymentsList"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDeploymentsList" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "serviceDeploymentList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDeploymentV2"
          }
        }
      }
    },
    "BasicDeploymentMetric" : {
      "type" : "object",
      "properties" : {
        "successfulDeployments" : {
          "type" : "integer",
          "format" : "int32"
        },
        "failedDeployments" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalDeployments" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "BasicServiceDeploymentMetrics" : {
      "type" : "object",
      "required" : [ "deploymentMetric", "serviceId", "serviceName" ],
      "properties" : {
        "serviceId" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "deploymentMetric" : {
          "$ref" : "#/definitions/BasicDeploymentMetric"
        }
      }
    },
    "PageBasicServiceDeploymentMetrics" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BasicServiceDeploymentMetrics"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageBasicServiceDeploymentMetrics" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageBasicServiceDeploymentMetrics"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ProjectDashBoardInfo" : {
      "type" : "object",
      "properties" : {
        "projectIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "deploymentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "deploymentsCountChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "successDeploymentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failedDeploymentsCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ProjectsDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "projectDashBoardInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProjectDashBoardInfo"
          }
        }
      }
    },
    "ResponseProjectsDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ProjectsDashboardInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "LandingDashboardRequestCD" : {
      "type" : "object",
      "required" : [ "orgProjectIdentifiers" ],
      "properties" : {
        "orgProjectIdentifiers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrgProjectIdentifier"
          }
        }
      }
    },
    "OrgProjectIdentifier" : {
      "type" : "object",
      "properties" : {
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        }
      }
    },
    "DeploymentStatsSummary" : {
      "type" : "object",
      "properties" : {
        "totalCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalCountChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        },
        "failureRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "deploymentRate" : {
          "type" : "number",
          "format" : "double"
        },
        "deploymentRateChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "timeBasedDeploymentInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TimeBasedDeploymentInfo"
          }
        }
      }
    },
    "ResponseDeploymentStatsSummary" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/DeploymentStatsSummary"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TimeBasedDeploymentInfo" : {
      "type" : "object",
      "properties" : {
        "epochTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "successCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failedCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureRate" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "PipelineExecutionDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "planExecutionId" : {
          "type" : "string"
        },
        "startTs" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PipelinesExecutionDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "runningExecutions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PipelineExecutionDashboardInfo"
          }
        },
        "pendingApprovalExecutions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PipelineExecutionDashboardInfo"
          }
        },
        "pendingManualInterventionExecutions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PipelineExecutionDashboardInfo"
          }
        },
        "failed24HrsExecutions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PipelineExecutionDashboardInfo"
          }
        }
      }
    },
    "ResponsePipelinesExecutionDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PipelinesExecutionDashboardInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServicesCount" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServicesCount"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServicesCount" : {
      "type" : "object",
      "properties" : {
        "totalCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "newCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "EnvCount" : {
      "type" : "object",
      "properties" : {
        "totalCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "newCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseEnvCount" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/EnvCount"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseServicesDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServicesDashboardInfo"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "totalDeploymentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "successDeploymentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "failureDeploymentsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDeploymentsChangeRate" : {
          "type" : "number",
          "format" : "double"
        },
        "instancesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instancesCountChangeRate" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "ServicesDashboardInfo" : {
      "type" : "object",
      "properties" : {
        "serviceDashboardInfoList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDashboardInfo"
          }
        }
      }
    },
    "LandingPageDeploymentCount" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResponseLandingPageDeploymentCount" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/LandingPageDeploymentCount"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PostProdRollbackCheckDTO" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "swimLaneInfo" : {
          "$ref" : "#/definitions/PostProdRollbackSwimLaneInfo"
        },
        "rollbackAllowed" : {
          "type" : "boolean"
        }
      }
    },
    "PostProdRollbackSwimLaneInfo" : {
      "type" : "object"
    },
    "ResponsePostProdRollbackCheckDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PostProdRollbackCheckDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PostProdRollbackRequestDTO" : {
      "type" : "object",
      "required" : [ "infrastructureMappingId", "instanceKey" ],
      "properties" : {
        "instanceKey" : {
          "type" : "string"
        },
        "infrastructureMappingId" : {
          "type" : "string"
        }
      }
    },
    "PostProdRollbackResponseDTO" : {
      "type" : "object",
      "properties" : {
        "instanceKey" : {
          "type" : "string"
        },
        "infraMappingId" : {
          "type" : "string"
        },
        "planExecutionId" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "rollbackTriggered" : {
          "type" : "boolean"
        }
      }
    },
    "ResponsePostProdRollbackResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PostProdRollbackResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CgiTaskConfig" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "cgiTaskExecutables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CgiTaskExecutable"
          }
        }
      }
    },
    "CgiTaskExecutable" : {
      "type" : "object",
      "properties" : {
        "arch" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapStringCgiTaskConfig" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CgiTaskConfig"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Member" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string",
          "format" : "uri"
        },
        "display" : {
          "type" : "string"
        }
      }
    },
    "ScimGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "meta" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "schemas" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "displayName" : {
          "type" : "string"
        },
        "members" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Member"
          }
        },
        "harnessScopes" : {
          "type" : "string"
        }
      }
    },
    "AddOperation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PatchOperation"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      } ]
    },
    "OktaAddOperation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PatchOperation"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      } ]
    },
    "OktaRemoveOperation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PatchOperation"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      } ]
    },
    "OktaReplaceOperation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PatchOperation"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      } ]
    },
    "PatchOperation" : {
      "type" : "object",
      "discriminator" : "op",
      "properties" : {
        "path" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "PatchRequest" : {
      "type" : "object",
      "required" : [ "Operations", "schemas" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "meta" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "Operations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PatchOperation"
          }
        },
        "schemas" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RemoveOperation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PatchOperation"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      } ]
    },
    "ReplaceOperation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PatchOperation"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      } ]
    },
    "ScimUser" : {
      "type" : "object",
      "properties" : {
        "schemas" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "userName" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "emails" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "roles" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "name" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "groups" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "password" : {
          "$ref" : "#/definitions/JsonNode"
        },
        "id" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "meta" : {
          "$ref" : "#/definitions/JsonNode"
        }
      }
    },
    "ResponseServiceAccountDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceAccountDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceAccountDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "email", "identifier", "name" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "governanceMetadata" : {
          "$ref" : "#/definitions/GovernanceMetadata"
        }
      }
    },
    "ResponseListServiceAccountDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceAccountDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PageServiceAccountAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceAccountAggregateDTO"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceAccountAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceAccountAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceAccountAggregateDTO" : {
      "type" : "object",
      "required" : [ "createdAt", "lastModifiedAt", "serviceAccount" ],
      "properties" : {
        "serviceAccount" : {
          "$ref" : "#/definitions/ServiceAccountDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "tokensCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "roleAssignmentsMetadataDTO" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoleAssignmentMetadataDTO"
          }
        }
      }
    },
    "ResponseServiceAccountAggregateDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceAccountAggregateDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseListServiceAccountDTOInternal" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceAccountDTOInternal"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceAccountDTOInternal" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "email", "identifier", "name" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "governanceMetadata" : {
          "$ref" : "#/definitions/GovernanceMetadata"
        },
        "uniqueIdInternal" : {
          "type" : "string"
        },
        "parentUniqueIdInternal" : {
          "type" : "string"
        }
      }
    },
    "ResponseListServiceNowFieldNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceNowFieldNG"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowFieldAllowedValueNG" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowFieldNG" : {
      "type" : "object",
      "required" : [ "allowedValues", "key", "name", "schema" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "required" : {
          "type" : "boolean"
        },
        "schema" : {
          "$ref" : "#/definitions/ServiceNowFieldSchemaNG"
        },
        "internalType" : {
          "type" : "string"
        },
        "allowedValues" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceNowFieldAllowedValueNG"
          }
        },
        "readOnly" : {
          "type" : "boolean"
        },
        "custom" : {
          "type" : "boolean"
        }
      }
    },
    "ServiceNowFieldSchemaNG" : {
      "type" : "object",
      "required" : [ "type", "typeStr" ],
      "properties" : {
        "array" : {
          "type" : "boolean"
        },
        "typeStr" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "glide_date_time", "integer", "boolean", "string", "option", "unknown" ]
        },
        "customType" : {
          "type" : "string"
        },
        "multilineText" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListServiceNowTicketTypeDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceNowTicketTypeDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowTicketTypeDTO" : {
      "type" : "object",
      "required" : [ "key", "name" ],
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ResponseServiceNowTicketNG" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ServiceNowTicketNG"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowFieldValueNG" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "displayValue" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowTicketNG" : {
      "type" : "object",
      "required" : [ "fields", "number", "url" ],
      "properties" : {
        "url" : {
          "type" : "string"
        },
        "number" : {
          "type" : "string"
        },
        "fields" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ServiceNowFieldValueNG"
          }
        }
      }
    },
    "ResponseListServiceNowStagingTable" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceNowStagingTable"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowStagingTable" : {
      "type" : "object",
      "required" : [ "label", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        }
      }
    },
    "ResponseListServiceNowTemplate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceNowTemplate"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ServiceNowTemplate" : {
      "type" : "object",
      "required" : [ "fields", "name", "sys_id" ],
      "properties" : {
        "sys_id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "fields" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ServiceNowFieldValueNG"
          }
        }
      }
    },
    "PageServiceNowTemplate" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalItems" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageItemCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceNowTemplate"
          }
        },
        "pageIndex" : {
          "type" : "integer",
          "format" : "int64"
        },
        "empty" : {
          "type" : "boolean"
        },
        "pageToken" : {
          "type" : "string"
        }
      }
    },
    "ResponsePageServiceNowTemplate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PageServiceNowTemplate"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "Board" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "CannyBoardsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "boards" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Board"
          }
        }
      }
    },
    "ResponseCannyBoardsResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CannyBoardsResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CannyCategoriesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "boardId" : {
          "type" : "string"
        },
        "categoryList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Category"
          }
        }
      }
    },
    "Category" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "ResponseCannyCategoriesResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CannyCategoriesResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CannyPostResponseDTO" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "postURL" : {
          "type" : "string"
        }
      }
    },
    "ResponseCannyPostResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CannyPostResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseSetupStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "DELEGATE_PROVISION_FAILURE", "K8S_CONNECTOR_PROVISION_FAILURE", "DOCKER_CONNECTOR_PROVISION_FAILURE", "PROVISIONING_DISABLED" ]
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseDelegateStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "IN_PROGRESS", "FAILURE" ]
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseScmConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/ScmConnectorResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ScmConnectorResponse" : {
      "type" : "object",
      "properties" : {
        "connectorResponseDTO" : {
          "$ref" : "#/definitions/ConnectorResponse"
        },
        "secretResponseWrapper" : {
          "$ref" : "#/definitions/SecretResponseWrapper"
        },
        "connectorValidationResult" : {
          "$ref" : "#/definitions/ConnectorValidationResult"
        }
      }
    },
    "ScmConnectorDTO" : {
      "type" : "object",
      "properties" : {
        "secret" : {
          "$ref" : "#/definitions/SecretDTOV2"
        },
        "connector" : {
          "$ref" : "#/definitions/ConnectorInfoDTO"
        }
      }
    },
    "ResponseTunnelResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/TunnelResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "TunnelResponseDTO" : {
      "type" : "object",
      "required" : [ "port", "serverUrl" ],
      "properties" : {
        "serverUrl" : {
          "type" : "string"
        },
        "port" : {
          "type" : "string"
        },
        "userCredentials" : {
          "type" : "string"
        }
      }
    },
    "TunnelRegisterRequestDTO" : {
      "type" : "object",
      "required" : [ "port" ],
      "properties" : {
        "port" : {
          "type" : "string"
        },
        "userCredentials" : {
          "type" : "string"
        }
      }
    },
    "AwsCodeCommitSCMDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SourceCodeManagerDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication" ],
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/AwsCodeCommitAuthenticationDTO"
          }
        }
      } ]
    },
    "AzureRepoSCMDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SourceCodeManagerDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/AzureRepoAuthentication"
          }
        }
      } ]
    },
    "BitbucketSCMDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SourceCodeManagerDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/BitbucketAuthentication"
          }
        }
      } ]
    },
    "GithubSCMDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SourceCodeManagerDTO"
      }, {
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/GithubAuthentication"
          }
        }
      } ]
    },
    "GitlabSCMDTO" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SourceCodeManagerDTO"
      }, {
        "type" : "object",
        "required" : [ "authentication" ],
        "properties" : {
          "authentication" : {
            "$ref" : "#/definitions/GitlabAuthentication"
          }
        }
      } ]
    },
    "ResponseListSourceCodeManagerDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SourceCodeManagerDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SourceCodeManagerAuthentication" : {
      "type" : "object"
    },
    "SourceCodeManagerDTO" : {
      "type" : "object",
      "required" : [ "name" ],
      "discriminator" : "type",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "userIdentifier" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "BITBUCKET", "GITHUB", "GITLAB", "AWS_CODE_COMMIT", "AZURE_REPO", "BITBUCKET_SERVER", "GITLAB_ON_PREM" ]
        },
        "authentication" : {
          "$ref" : "#/definitions/SourceCodeManagerAuthentication"
        }
      }
    },
    "ResponseSourceCodeManagerDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SourceCodeManagerDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StreamingOutput" : {
      "type" : "object"
    },
    "ResponseSettingValueResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SettingValueResponseDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SettingValueResponseDTO" : {
      "type" : "object",
      "required" : [ "value", "valueType" ],
      "properties" : {
        "valueType" : {
          "type" : "string",
          "enum" : [ "String", "Boolean", "Number" ]
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "ResponseListSettingUpdateResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SettingUpdateResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SettingDTO" : {
      "type" : "object",
      "required" : [ "allowOverrides", "allowedScopes", "category", "groupIdentifier", "identifier", "isSettingEditable", "name", "valueType" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "orgIdentifier" : {
          "type" : "string"
        },
        "projectIdentifier" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CE", "CV", "CF", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS", "SCIM", "GIT_EXPERIENCE", "CONNECTORS", "EULA", "NOTIFICATIONS", "SUPPLY_CHAIN_ASSURANCE", "USER", "MODULES_VISIBILITY" ]
        },
        "groupIdentifier" : {
          "type" : "string"
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "String", "Boolean", "Number" ]
        },
        "allowedValues" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "allowOverrides" : {
          "type" : "boolean"
        },
        "value" : {
          "type" : "string"
        },
        "defaultValue" : {
          "type" : "string"
        },
        "settingSource" : {
          "type" : "string",
          "enum" : [ "ACCOUNT", "ORG", "PROJECT", "DEFAULT" ]
        },
        "isSettingEditable" : {
          "type" : "boolean"
        },
        "allowedScopes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ACCOUNT", "ORGANIZATION", "PROJECT" ]
          }
        },
        "uniqueId" : {
          "type" : "string"
        },
        "parentUniqueId" : {
          "type" : "string"
        }
      }
    },
    "SettingUpdateResponseDTO" : {
      "type" : "object",
      "required" : [ "setting" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "setting" : {
          "$ref" : "#/definitions/SettingDTO"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updateStatus" : {
          "type" : "boolean"
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "SettingRequestDTO" : {
      "type" : "object",
      "required" : [ "allowOverrides", "updateType" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "allowOverrides" : {
          "type" : "boolean"
        },
        "updateType" : {
          "type" : "string",
          "enum" : [ "UPDATE", "RESTORE" ]
        }
      }
    },
    "ResponseListSettingResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SettingResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SettingResponseDTO" : {
      "type" : "object",
      "required" : [ "setting" ],
      "properties" : {
        "setting" : {
          "$ref" : "#/definitions/SettingDTO"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseListUserSettingUpdateResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserSettingUpdateResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserSettingDTO" : {
      "type" : "object",
      "required" : [ "category", "groupIdentifier", "identifier", "valueType" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CE", "CV", "CF", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS", "SCIM", "GIT_EXPERIENCE", "CONNECTORS", "EULA", "NOTIFICATIONS", "SUPPLY_CHAIN_ASSURANCE", "USER", "MODULES_VISIBILITY" ]
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "String", "Boolean", "Number" ]
        },
        "allowedValues" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "value" : {
          "type" : "string"
        },
        "userID" : {
          "type" : "string"
        },
        "groupIdentifier" : {
          "type" : "string"
        }
      }
    },
    "UserSettingUpdateResponseDTO" : {
      "type" : "object",
      "required" : [ "userSettingDTO" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "userSettingDTO" : {
          "$ref" : "#/definitions/UserSettingDTO"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updateStatus" : {
          "type" : "boolean"
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "UserSettingRequestDTO" : {
      "type" : "object",
      "required" : [ "updateType" ],
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "updateType" : {
          "type" : "string",
          "enum" : [ "UPDATE", "RESTORE" ]
        },
        "enableAcrossAccounts" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseListUserSettingResponseDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserSettingResponseDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserSettingResponseDTO" : {
      "type" : "object",
      "required" : [ "userSetting" ],
      "properties" : {
        "userSetting" : {
          "$ref" : "#/definitions/UserSettingDTO"
        },
        "lastModifiedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseUserInfoFromClearBitDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/UserInfoFromClearBitDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserInfoFromClearBitDTO" : {
      "type" : "object",
      "properties" : {
        "userEmail" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "jobTitle" : {
          "type" : "string"
        },
        "phoneNumber" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        }
      }
    },
    "RestResponseUserInfo" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/UserInfo"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "OAuthSignupDTO" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "utmInfo" : {
          "$ref" : "#/definitions/UtmInfo"
        },
        "intent" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "signupAction" : {
          "type" : "string",
          "enum" : [ "REGULAR", "TRIAL", "SUBSCRIBE" ]
        },
        "edition" : {
          "type" : "string",
          "enum" : [ "COMMUNITY", "FREE", "TEAM", "ENTERPRISE", "STARTUP" ]
        },
        "referer" : {
          "type" : "string"
        },
        "gaClientId" : {
          "type" : "string"
        },
        "visitorToken" : {
          "type" : "string"
        }
      }
    },
    "SignupTelemetryDTO" : {
      "type" : "object",
      "properties" : {
        "signupAction" : {
          "type" : "string"
        },
        "edition" : {
          "type" : "string"
        },
        "utmInfo" : {
          "$ref" : "#/definitions/UtmInfo"
        },
        "visitorToken" : {
          "type" : "string"
        },
        "gaClientId" : {
          "type" : "string"
        },
        "intent" : {
          "type" : "string"
        },
        "referer" : {
          "type" : "string"
        },
        "source" : {
          "type" : "string"
        },
        "accountId" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "phoneNumber" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "jobTitle" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "personalEmail" : {
          "type" : "string"
        }
      }
    },
    "SignupDTO" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "utmInfo" : {
          "$ref" : "#/definitions/UtmInfo"
        },
        "intent" : {
          "type" : "string"
        },
        "signupAction" : {
          "type" : "string",
          "enum" : [ "REGULAR", "TRIAL", "SUBSCRIBE" ]
        },
        "edition" : {
          "type" : "string",
          "enum" : [ "COMMUNITY", "FREE", "TEAM", "ENTERPRISE", "STARTUP" ]
        },
        "billingFrequency" : {
          "type" : "string",
          "enum" : [ "MONTHLY", "YEARLY" ]
        }
      }
    },
    "CleanupSignupDTO" : {
      "type" : "object",
      "properties" : {
        "userInfo" : {
          "$ref" : "#/definitions/UserInfo"
        },
        "verificationToken" : {
          "$ref" : "#/definitions/SignupVerificationToken"
        }
      }
    },
    "SignupVerificationToken" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "appId" : {
          "type" : "string"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "RestResponseVerifyTokenResponseDTO" : {
      "type" : "object",
      "properties" : {
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "resource" : {
          "$ref" : "#/definitions/VerifyTokenResponseDTO"
        },
        "responseMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "VerifyTokenResponseDTO" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        }
      }
    },
    "CreditCardValidationResponse" : {
      "type" : "object",
      "properties" : {
        "valid" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseCreditCardValidationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CreditCardValidationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "AccountCreditCardValidationResponse" : {
      "type" : "object",
      "properties" : {
        "hasAtleastOneValidCreditCard" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseAccountCreditCardValidationResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/AccountCreditCardValidationResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CreditCardDTO" : {
      "type" : "object",
      "required" : [ "accountIdentifier", "creditCardIdentifier" ],
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "creditCardIdentifier" : {
          "type" : "string"
        }
      }
    },
    "CreditCardResponse" : {
      "type" : "object",
      "required" : [ "creditCardDTO" ],
      "properties" : {
        "creditCardDTO" : {
          "$ref" : "#/definitions/CreditCardDTO"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdatedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResponseCreditCardResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CreditCardResponse"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CardDTO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "last4" : {
          "type" : "string"
        },
        "funding" : {
          "type" : "string"
        },
        "expireMonth" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expireYear" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cvcCheck" : {
          "type" : "string"
        },
        "brand" : {
          "type" : "string"
        },
        "addressCity" : {
          "type" : "string"
        },
        "addressCountry" : {
          "type" : "string"
        },
        "addressState" : {
          "type" : "string"
        },
        "addressZip" : {
          "type" : "string"
        },
        "addressLine1" : {
          "type" : "string"
        },
        "addressLine2" : {
          "type" : "string"
        },
        "fingerPrint" : {
          "type" : "string"
        },
        "isDefaultCard" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseCardDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CardDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "InvoiceDetailDTO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ItemDTO"
          }
        },
        "subscriptionId" : {
          "type" : "string"
        },
        "invoiceId" : {
          "type" : "string"
        },
        "totalAmount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "periodStart" : {
          "type" : "integer",
          "format" : "int64"
        },
        "periodEnd" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nextPaymentAttempt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "amountDue" : {
          "type" : "integer",
          "format" : "int64"
        },
        "clientSecret" : {
          "type" : "string"
        },
        "paymentIntent" : {
          "$ref" : "#/definitions/PaymentIntentDetailDTO"
        }
      }
    },
    "ItemDTO" : {
      "type" : "object",
      "properties" : {
        "price" : {
          "$ref" : "#/definitions/PriceDTO"
        },
        "description" : {
          "type" : "string"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int64"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "proration" : {
          "type" : "boolean"
        }
      }
    },
    "NextActionDetailDTO" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "useStripeSdk" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "PaymentIntentDetailDTO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "clientSecret" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "nextAction" : {
          "$ref" : "#/definitions/NextActionDetailDTO"
        }
      }
    },
    "PendingUpdateDetailDTO" : {
      "type" : "object",
      "properties" : {
        "expiresAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PriceDTO" : {
      "type" : "object",
      "properties" : {
        "priceId" : {
          "type" : "string"
        },
        "currency" : {
          "type" : "string"
        },
        "tiersDTO" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TiersDTO"
          }
        },
        "tierMode" : {
          "type" : "string",
          "enum" : [ "volume", "graduated" ]
        },
        "unitAmount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lookupKey" : {
          "type" : "string"
        },
        "productId" : {
          "type" : "string"
        },
        "metaData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "active" : {
          "type" : "boolean"
        }
      }
    },
    "ResponseSubscriptionDetailDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/SubscriptionDetailDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "SubscriptionDetailDTO" : {
      "type" : "object",
      "properties" : {
        "subscriptionId" : {
          "type" : "string"
        },
        "accountIdentifier" : {
          "type" : "string"
        },
        "customerId" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "cancelAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "canceledAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "currentPeriodStart" : {
          "type" : "integer",
          "format" : "int64"
        },
        "currentPeriodEnd" : {
          "type" : "integer",
          "format" : "int64"
        },
        "clientSecret" : {
          "type" : "string"
        },
        "pendingUpdate" : {
          "$ref" : "#/definitions/PendingUpdateDetailDTO"
        },
        "latestInvoice" : {
          "type" : "string"
        },
        "latestInvoiceDetail" : {
          "$ref" : "#/definitions/InvoiceDetailDTO"
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ItemDTO"
          }
        }
      }
    },
    "TiersDTO" : {
      "type" : "object",
      "properties" : {
        "upTo" : {
          "type" : "integer",
          "format" : "int64"
        },
        "unitAmount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AddressDto" : {
      "type" : "object",
      "required" : [ "city", "country", "line1", "postalCode", "state" ],
      "properties" : {
        "line1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 46,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#()@!+]+$"
        },
        "line2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 46,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#()@!+]+$"
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#()@!+]+$"
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#()@!+]+$"
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#()@!+]+$"
        },
        "postalCode" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#()@!+]+$"
        }
      }
    },
    "CustomerDTO" : {
      "type" : "object",
      "properties" : {
        "billingEmail" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 254,
          "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$"
        },
        "companyName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 46,
          "pattern" : "^[a-zA-Z0-9 \\-.,'&#/()@!+]+$"
        },
        "address" : {
          "$ref" : "#/definitions/AddressDto"
        },
        "defaultPaymentMethod" : {
          "type" : "string"
        }
      }
    },
    "SubscriptionItemRequest" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int64"
        },
        "quantityIncludedInPrice" : {
          "type" : "boolean"
        }
      }
    },
    "SubscriptionRequest" : {
      "type" : "object",
      "properties" : {
        "accountIdentifier" : {
          "type" : "string"
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SubscriptionItemRequest"
          }
        },
        "paymentFrequency" : {
          "type" : "string"
        },
        "edition" : {
          "type" : "string"
        },
        "premiumSupport" : {
          "type" : "boolean"
        },
        "customer" : {
          "$ref" : "#/definitions/CustomerDTO"
        }
      }
    },
    "StripeItemRequest" : {
      "type" : "object",
      "properties" : {
        "priceId" : {
          "type" : "string"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "SubscriptionDTO" : {
      "type" : "object",
      "properties" : {
        "customer" : {
          "$ref" : "#/definitions/CustomerDTO"
        },
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "paymentMethodId" : {
          "type" : "string"
        },
        "paymentFrequency" : {
          "type" : "string",
          "enum" : [ "MONTHLY", "YEARLY" ]
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StripeItemRequest"
          }
        }
      }
    },
    "ResponseListSubscriptionDetailDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SubscriptionDetailDTO"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseInvoiceDetailDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/InvoiceDetailDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "CustomerDetailDTO" : {
      "type" : "object",
      "properties" : {
        "customerId" : {
          "type" : "string"
        },
        "billingEmail" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string"
        },
        "defaultSource" : {
          "type" : "string"
        },
        "address" : {
          "$ref" : "#/definitions/AddressDto"
        }
      }
    },
    "ResponseCustomerDetailDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/CustomerDetailDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "StripeBillingDTO" : {
      "type" : "object",
      "properties" : {
        "line1" : {
          "type" : "string"
        },
        "line2" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "zipCode" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "creditCardId" : {
          "type" : "string"
        }
      }
    },
    "ResponseEnumMapUsageKeyLong" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PriceCollectionDTO" : {
      "type" : "object",
      "properties" : {
        "prices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PriceDTO"
          }
        }
      }
    },
    "ResponsePriceCollectionDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PriceCollectionDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "PaymentMethodCollectionDTO" : {
      "type" : "object",
      "properties" : {
        "paymentMethods" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CardDTO"
          }
        }
      }
    },
    "ResponsePaymentMethodCollectionDTO" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/PaymentMethodCollectionDTO"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "ResponseMapUsageKeyLong" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "RecommendationRequest" : {
      "type" : "object",
      "properties" : {
        "moduleType" : {
          "type" : "string",
          "enum" : [ "CD", "CI", "CV", "CF", "CE", "STO", "CHAOS", "SRM", "IACM", "CET", "IDP", "CODE", "SSCA", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "PLATFORM", "SEI", "HAR" ]
        },
        "usageMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "ResponseYamlSnippets" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "ERROR" ]
        },
        "data" : {
          "$ref" : "#/definitions/YamlSnippets"
        },
        "metaData" : {
          "type" : "object"
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "YamlSnippetMetaData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "iconTag" : {
          "type" : "string"
        }
      }
    },
    "YamlSnippets" : {
      "type" : "object",
      "properties" : {
        "yamlSnippets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/YamlSnippetMetaData"
          }
        }
      }
    }
  }
}